
vcu_mk_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005458  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08005510  08005510  00006510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005630  08005630  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005630  08005630  0000705c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005630  08005630  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005630  08005630  00006630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005634  08005634  00006634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005638  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  2000005c  08005694  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08005694  0000735c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001138c  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000233e  00000000  00000000  00018410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  0001a750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c32  00000000  00000000  0001b6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c05  00000000  00000000  0001c302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c85  00000000  00000000  00032f07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098a7f  00000000  00000000  00045b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de60b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d70  00000000  00000000  000de650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000e23c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000005c 	.word	0x2000005c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080054f8 	.word	0x080054f8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000060 	.word	0x20000060
 80000fc:	080054f8 	.word	0x080054f8

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	@ 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	@ 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	@ 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b092      	sub	sp, #72	@ 0x48
 8000414:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000416:	f000 fd8d 	bl	8000f34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800041a:	f000 f8c7 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800041e:	f000 fb07 	bl	8000a30 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000422:	f000 f975 	bl	8000710 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000426:	f000 f909 	bl	800063c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800042a:	f000 fab3 	bl	8000994 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800042e:	f000 fa47 	bl	80008c0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  uint16_t pot_val=0;
 8000432:	2346      	movs	r3, #70	@ 0x46
 8000434:	18fb      	adds	r3, r7, r3
 8000436:	2200      	movs	r2, #0
 8000438:	801a      	strh	r2, [r3, #0]

	  //	    if (HAL_GPIO_ReadPin(reverse_GPIO_Port, reverse_Pin) == GPIO_PIN_RESET) {
	  //
	  //	    }

		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800043a:	4b54      	ldr	r3, [pc, #336]	@ (800058c <main+0x17c>)
 800043c:	2100      	movs	r1, #0
 800043e:	0018      	movs	r0, r3
 8000440:	f002 fd6c 	bl	8002f1c <HAL_TIM_PWM_Start>
	  // 1. ADC & Motor PWM
	  HAL_ADC_Start(&hadc1);
 8000444:	4b52      	ldr	r3, [pc, #328]	@ (8000590 <main+0x180>)
 8000446:	0018      	movs	r0, r3
 8000448:	f001 f8fc 	bl	8001644 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1);
 800044c:	4b50      	ldr	r3, [pc, #320]	@ (8000590 <main+0x180>)
 800044e:	2101      	movs	r1, #1
 8000450:	0018      	movs	r0, r3
 8000452:	f001 f945 	bl	80016e0 <HAL_ADC_PollForConversion>
	  pot_val = HAL_ADC_GetValue(&hadc1);
 8000456:	4b4e      	ldr	r3, [pc, #312]	@ (8000590 <main+0x180>)
 8000458:	0018      	movs	r0, r3
 800045a:	f001 f9d5 	bl	8001808 <HAL_ADC_GetValue>
 800045e:	0002      	movs	r2, r0
 8000460:	2146      	movs	r1, #70	@ 0x46
 8000462:	187b      	adds	r3, r7, r1
 8000464:	801a      	strh	r2, [r3, #0]

	  uint32_t pwm_val = (pot_val * (__HAL_TIM_GET_AUTORELOAD(&htim3))) / 4095;
 8000466:	187b      	adds	r3, r7, r1
 8000468:	881a      	ldrh	r2, [r3, #0]
 800046a:	4b48      	ldr	r3, [pc, #288]	@ (800058c <main+0x17c>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000470:	4353      	muls	r3, r2
 8000472:	4948      	ldr	r1, [pc, #288]	@ (8000594 <main+0x184>)
 8000474:	0018      	movs	r0, r3
 8000476:	f7ff fe55 	bl	8000124 <__udivsi3>
 800047a:	0003      	movs	r3, r0
 800047c:	643b      	str	r3, [r7, #64]	@ 0x40
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm_val);
 800047e:	4b43      	ldr	r3, [pc, #268]	@ (800058c <main+0x17c>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000484:	635a      	str	r2, [r3, #52]	@ 0x34

	  // Start motor PWM once
	  static bool motor_pwm_started = false;
	  if (!motor_pwm_started) {
 8000486:	4b44      	ldr	r3, [pc, #272]	@ (8000598 <main+0x188>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	2201      	movs	r2, #1
 800048c:	4053      	eors	r3, r2
 800048e:	b2db      	uxtb	r3, r3
 8000490:	2b00      	cmp	r3, #0
 8000492:	d007      	beq.n	80004a4 <main+0x94>
	      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000494:	4b3d      	ldr	r3, [pc, #244]	@ (800058c <main+0x17c>)
 8000496:	2100      	movs	r1, #0
 8000498:	0018      	movs	r0, r3
 800049a:	f002 fd3f 	bl	8002f1c <HAL_TIM_PWM_Start>
	      motor_pwm_started = true;
 800049e:	4b3e      	ldr	r3, [pc, #248]	@ (8000598 <main+0x188>)
 80004a0:	2201      	movs	r2, #1
 80004a2:	701a      	strb	r2, [r3, #0]
	  }

	  // 2. UART Debug
	  snprintf(tx_buffer, sizeof(tx_buffer), "ADC Value: %u\r\n", pot_val);
 80004a4:	2346      	movs	r3, #70	@ 0x46
 80004a6:	18fb      	adds	r3, r7, r3
 80004a8:	881b      	ldrh	r3, [r3, #0]
 80004aa:	4a3c      	ldr	r2, [pc, #240]	@ (800059c <main+0x18c>)
 80004ac:	0038      	movs	r0, r7
 80004ae:	2140      	movs	r1, #64	@ 0x40
 80004b0:	f004 fb72 	bl	8004b98 <sniprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *)tx_buffer, strlen(tx_buffer), HAL_MAX_DELAY);
 80004b4:	003b      	movs	r3, r7
 80004b6:	0018      	movs	r0, r3
 80004b8:	f7ff fe22 	bl	8000100 <strlen>
 80004bc:	0003      	movs	r3, r0
 80004be:	b29a      	uxth	r2, r3
 80004c0:	2301      	movs	r3, #1
 80004c2:	425b      	negs	r3, r3
 80004c4:	0039      	movs	r1, r7
 80004c6:	4836      	ldr	r0, [pc, #216]	@ (80005a0 <main+0x190>)
 80004c8:	f003 fdd0 	bl	800406c <HAL_UART_Transmit>

	  // 3. Button Logic (LED control)
	  if (HAL_GPIO_ReadPin(button_left_GPIO_Port, button_left_Pin) == GPIO_PIN_RESET) {
 80004cc:	4b35      	ldr	r3, [pc, #212]	@ (80005a4 <main+0x194>)
 80004ce:	2180      	movs	r1, #128	@ 0x80
 80004d0:	0018      	movs	r0, r3
 80004d2:	f001 fe1b 	bl	800210c <HAL_GPIO_ReadPin>
 80004d6:	1e03      	subs	r3, r0, #0
 80004d8:	d11c      	bne.n	8000514 <main+0x104>
	      HAL_Delay(10);
 80004da:	200a      	movs	r0, #10
 80004dc:	f000 fdb0 	bl	8001040 <HAL_Delay>
	      if (HAL_GPIO_ReadPin(button_left_GPIO_Port, button_left_Pin) == GPIO_PIN_RESET) {
 80004e0:	4b30      	ldr	r3, [pc, #192]	@ (80005a4 <main+0x194>)
 80004e2:	2180      	movs	r1, #128	@ 0x80
 80004e4:	0018      	movs	r0, r3
 80004e6:	f001 fe11 	bl	800210c <HAL_GPIO_ReadPin>
 80004ea:	1e03      	subs	r3, r0, #0
 80004ec:	d149      	bne.n	8000582 <main+0x172>
	          HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);  // Left LED ON
 80004ee:	4b2e      	ldr	r3, [pc, #184]	@ (80005a8 <main+0x198>)
 80004f0:	2104      	movs	r1, #4
 80004f2:	0018      	movs	r0, r3
 80004f4:	f002 fd12 	bl	8002f1c <HAL_TIM_PWM_Start>
	          HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // Right LED OFF
 80004f8:	4b2b      	ldr	r3, [pc, #172]	@ (80005a8 <main+0x198>)
 80004fa:	2100      	movs	r1, #0
 80004fc:	0018      	movs	r0, r3
 80004fe:	f002 fdf1 	bl	80030e4 <HAL_TIM_PWM_Stop>
	          while (HAL_GPIO_ReadPin(button_left_GPIO_Port, button_left_Pin) == GPIO_PIN_RESET);
 8000502:	46c0      	nop			@ (mov r8, r8)
 8000504:	4b27      	ldr	r3, [pc, #156]	@ (80005a4 <main+0x194>)
 8000506:	2180      	movs	r1, #128	@ 0x80
 8000508:	0018      	movs	r0, r3
 800050a:	f001 fdff 	bl	800210c <HAL_GPIO_ReadPin>
 800050e:	1e03      	subs	r3, r0, #0
 8000510:	d0f8      	beq.n	8000504 <main+0xf4>
 8000512:	e036      	b.n	8000582 <main+0x172>
	      }
	  }
	  else if (HAL_GPIO_ReadPin(button_right_GPIO_Port, button_right_Pin) == GPIO_PIN_RESET) {
 8000514:	2380      	movs	r3, #128	@ 0x80
 8000516:	009a      	lsls	r2, r3, #2
 8000518:	23a0      	movs	r3, #160	@ 0xa0
 800051a:	05db      	lsls	r3, r3, #23
 800051c:	0011      	movs	r1, r2
 800051e:	0018      	movs	r0, r3
 8000520:	f001 fdf4 	bl	800210c <HAL_GPIO_ReadPin>
 8000524:	1e03      	subs	r3, r0, #0
 8000526:	d122      	bne.n	800056e <main+0x15e>
	      HAL_Delay(10);
 8000528:	200a      	movs	r0, #10
 800052a:	f000 fd89 	bl	8001040 <HAL_Delay>
	      if (HAL_GPIO_ReadPin(button_right_GPIO_Port, button_right_Pin) == GPIO_PIN_RESET) {
 800052e:	2380      	movs	r3, #128	@ 0x80
 8000530:	009a      	lsls	r2, r3, #2
 8000532:	23a0      	movs	r3, #160	@ 0xa0
 8000534:	05db      	lsls	r3, r3, #23
 8000536:	0011      	movs	r1, r2
 8000538:	0018      	movs	r0, r3
 800053a:	f001 fde7 	bl	800210c <HAL_GPIO_ReadPin>
 800053e:	1e03      	subs	r3, r0, #0
 8000540:	d11f      	bne.n	8000582 <main+0x172>
	          HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // Right LED ON
 8000542:	4b19      	ldr	r3, [pc, #100]	@ (80005a8 <main+0x198>)
 8000544:	2100      	movs	r1, #0
 8000546:	0018      	movs	r0, r3
 8000548:	f002 fce8 	bl	8002f1c <HAL_TIM_PWM_Start>
	          HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);   // Left LED OFF
 800054c:	4b16      	ldr	r3, [pc, #88]	@ (80005a8 <main+0x198>)
 800054e:	2104      	movs	r1, #4
 8000550:	0018      	movs	r0, r3
 8000552:	f002 fdc7 	bl	80030e4 <HAL_TIM_PWM_Stop>
	          while (HAL_GPIO_ReadPin(button_right_GPIO_Port, button_right_Pin) == GPIO_PIN_RESET);
 8000556:	46c0      	nop			@ (mov r8, r8)
 8000558:	2380      	movs	r3, #128	@ 0x80
 800055a:	009a      	lsls	r2, r3, #2
 800055c:	23a0      	movs	r3, #160	@ 0xa0
 800055e:	05db      	lsls	r3, r3, #23
 8000560:	0011      	movs	r1, r2
 8000562:	0018      	movs	r0, r3
 8000564:	f001 fdd2 	bl	800210c <HAL_GPIO_ReadPin>
 8000568:	1e03      	subs	r3, r0, #0
 800056a:	d0f5      	beq.n	8000558 <main+0x148>
 800056c:	e009      	b.n	8000582 <main+0x172>
	      }
	  }
	  else {
	      HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800056e:	4b0e      	ldr	r3, [pc, #56]	@ (80005a8 <main+0x198>)
 8000570:	2104      	movs	r1, #4
 8000572:	0018      	movs	r0, r3
 8000574:	f002 fdb6 	bl	80030e4 <HAL_TIM_PWM_Stop>
	      HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000578:	4b0b      	ldr	r3, [pc, #44]	@ (80005a8 <main+0x198>)
 800057a:	2100      	movs	r1, #0
 800057c:	0018      	movs	r0, r3
 800057e:	f002 fdb1 	bl	80030e4 <HAL_TIM_PWM_Stop>
	  }

	  HAL_Delay(100);
 8000582:	2064      	movs	r0, #100	@ 0x64
 8000584:	f000 fd5c 	bl	8001040 <HAL_Delay>
  {
 8000588:	e757      	b.n	800043a <main+0x2a>
 800058a:	46c0      	nop			@ (mov r8, r8)
 800058c:	20000128 	.word	0x20000128
 8000590:	20000078 	.word	0x20000078
 8000594:	00000fff 	.word	0x00000fff
 8000598:	20000208 	.word	0x20000208
 800059c:	08005510 	.word	0x08005510
 80005a0:	20000174 	.word	0x20000174
 80005a4:	50000800 	.word	0x50000800
 80005a8:	200000dc 	.word	0x200000dc

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b093      	sub	sp, #76	@ 0x4c
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	2414      	movs	r4, #20
 80005b4:	193b      	adds	r3, r7, r4
 80005b6:	0018      	movs	r0, r3
 80005b8:	2334      	movs	r3, #52	@ 0x34
 80005ba:	001a      	movs	r2, r3
 80005bc:	2100      	movs	r1, #0
 80005be:	f004 fb21 	bl	8004c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	0018      	movs	r0, r3
 80005c6:	2310      	movs	r3, #16
 80005c8:	001a      	movs	r2, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	f004 fb1a 	bl	8004c04 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d0:	2380      	movs	r3, #128	@ 0x80
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	0018      	movs	r0, r3
 80005d6:	f001 fdb7 	bl	8002148 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005da:	193b      	adds	r3, r7, r4
 80005dc:	2202      	movs	r2, #2
 80005de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e0:	193b      	adds	r3, r7, r4
 80005e2:	2280      	movs	r2, #128	@ 0x80
 80005e4:	0052      	lsls	r2, r2, #1
 80005e6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005e8:	193b      	adds	r3, r7, r4
 80005ea:	2200      	movs	r2, #0
 80005ec:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ee:	193b      	adds	r3, r7, r4
 80005f0:	2240      	movs	r2, #64	@ 0x40
 80005f2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f4:	193b      	adds	r3, r7, r4
 80005f6:	2200      	movs	r2, #0
 80005f8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fa:	193b      	adds	r3, r7, r4
 80005fc:	0018      	movs	r0, r3
 80005fe:	f001 fdef 	bl	80021e0 <HAL_RCC_OscConfig>
 8000602:	1e03      	subs	r3, r0, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000606:	f000 fa7d 	bl	8000b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2207      	movs	r2, #7
 800060e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2200      	movs	r2, #0
 8000614:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2100      	movs	r1, #0
 8000626:	0018      	movs	r0, r3
 8000628:	f002 f8ea 	bl	8002800 <HAL_RCC_ClockConfig>
 800062c:	1e03      	subs	r3, r0, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000630:	f000 fa68 	bl	8000b04 <Error_Handler>
  }
}
 8000634:	46c0      	nop			@ (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	b013      	add	sp, #76	@ 0x4c
 800063a:	bd90      	pop	{r4, r7, pc}

0800063c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	0018      	movs	r0, r3
 8000646:	230c      	movs	r3, #12
 8000648:	001a      	movs	r2, r3
 800064a:	2100      	movs	r1, #0
 800064c:	f004 fada 	bl	8004c04 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000650:	4b2d      	ldr	r3, [pc, #180]	@ (8000708 <MX_ADC1_Init+0xcc>)
 8000652:	4a2e      	ldr	r2, [pc, #184]	@ (800070c <MX_ADC1_Init+0xd0>)
 8000654:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000656:	4b2c      	ldr	r3, [pc, #176]	@ (8000708 <MX_ADC1_Init+0xcc>)
 8000658:	2280      	movs	r2, #128	@ 0x80
 800065a:	05d2      	lsls	r2, r2, #23
 800065c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800065e:	4b2a      	ldr	r3, [pc, #168]	@ (8000708 <MX_ADC1_Init+0xcc>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000664:	4b28      	ldr	r3, [pc, #160]	@ (8000708 <MX_ADC1_Init+0xcc>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800066a:	4b27      	ldr	r3, [pc, #156]	@ (8000708 <MX_ADC1_Init+0xcc>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000670:	4b25      	ldr	r3, [pc, #148]	@ (8000708 <MX_ADC1_Init+0xcc>)
 8000672:	2204      	movs	r2, #4
 8000674:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000676:	4b24      	ldr	r3, [pc, #144]	@ (8000708 <MX_ADC1_Init+0xcc>)
 8000678:	2200      	movs	r2, #0
 800067a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800067c:	4b22      	ldr	r3, [pc, #136]	@ (8000708 <MX_ADC1_Init+0xcc>)
 800067e:	2200      	movs	r2, #0
 8000680:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000682:	4b21      	ldr	r3, [pc, #132]	@ (8000708 <MX_ADC1_Init+0xcc>)
 8000684:	2200      	movs	r2, #0
 8000686:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000688:	4b1f      	ldr	r3, [pc, #124]	@ (8000708 <MX_ADC1_Init+0xcc>)
 800068a:	2201      	movs	r2, #1
 800068c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800068e:	4b1e      	ldr	r3, [pc, #120]	@ (8000708 <MX_ADC1_Init+0xcc>)
 8000690:	2220      	movs	r2, #32
 8000692:	2100      	movs	r1, #0
 8000694:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000696:	4b1c      	ldr	r3, [pc, #112]	@ (8000708 <MX_ADC1_Init+0xcc>)
 8000698:	2200      	movs	r2, #0
 800069a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800069c:	4b1a      	ldr	r3, [pc, #104]	@ (8000708 <MX_ADC1_Init+0xcc>)
 800069e:	2200      	movs	r2, #0
 80006a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006a2:	4b19      	ldr	r3, [pc, #100]	@ (8000708 <MX_ADC1_Init+0xcc>)
 80006a4:	222c      	movs	r2, #44	@ 0x2c
 80006a6:	2100      	movs	r1, #0
 80006a8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006aa:	4b17      	ldr	r3, [pc, #92]	@ (8000708 <MX_ADC1_Init+0xcc>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80006b0:	4b15      	ldr	r3, [pc, #84]	@ (8000708 <MX_ADC1_Init+0xcc>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80006b6:	4b14      	ldr	r3, [pc, #80]	@ (8000708 <MX_ADC1_Init+0xcc>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80006bc:	4b12      	ldr	r3, [pc, #72]	@ (8000708 <MX_ADC1_Init+0xcc>)
 80006be:	223c      	movs	r2, #60	@ 0x3c
 80006c0:	2100      	movs	r1, #0
 80006c2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80006c4:	4b10      	ldr	r3, [pc, #64]	@ (8000708 <MX_ADC1_Init+0xcc>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <MX_ADC1_Init+0xcc>)
 80006cc:	0018      	movs	r0, r3
 80006ce:	f000 fe11 	bl	80012f4 <HAL_ADC_Init>
 80006d2:	1e03      	subs	r3, r0, #0
 80006d4:	d001      	beq.n	80006da <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80006d6:	f000 fa15 	bl	8000b04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2201      	movs	r2, #1
 80006de:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2200      	movs	r2, #0
 80006e4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ec:	1d3a      	adds	r2, r7, #4
 80006ee:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <MX_ADC1_Init+0xcc>)
 80006f0:	0011      	movs	r1, r2
 80006f2:	0018      	movs	r0, r3
 80006f4:	f001 f894 	bl	8001820 <HAL_ADC_ConfigChannel>
 80006f8:	1e03      	subs	r3, r0, #0
 80006fa:	d001      	beq.n	8000700 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80006fc:	f000 fa02 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000700:	46c0      	nop			@ (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	b004      	add	sp, #16
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000078 	.word	0x20000078
 800070c:	40012400 	.word	0x40012400

08000710 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b09c      	sub	sp, #112	@ 0x70
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000716:	2360      	movs	r3, #96	@ 0x60
 8000718:	18fb      	adds	r3, r7, r3
 800071a:	0018      	movs	r0, r3
 800071c:	2310      	movs	r3, #16
 800071e:	001a      	movs	r2, r3
 8000720:	2100      	movs	r1, #0
 8000722:	f004 fa6f 	bl	8004c04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000726:	2354      	movs	r3, #84	@ 0x54
 8000728:	18fb      	adds	r3, r7, r3
 800072a:	0018      	movs	r0, r3
 800072c:	230c      	movs	r3, #12
 800072e:	001a      	movs	r2, r3
 8000730:	2100      	movs	r1, #0
 8000732:	f004 fa67 	bl	8004c04 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000736:	2338      	movs	r3, #56	@ 0x38
 8000738:	18fb      	adds	r3, r7, r3
 800073a:	0018      	movs	r0, r3
 800073c:	231c      	movs	r3, #28
 800073e:	001a      	movs	r2, r3
 8000740:	2100      	movs	r1, #0
 8000742:	f004 fa5f 	bl	8004c04 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	0018      	movs	r0, r3
 800074a:	2334      	movs	r3, #52	@ 0x34
 800074c:	001a      	movs	r2, r3
 800074e:	2100      	movs	r1, #0
 8000750:	f004 fa58 	bl	8004c04 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000754:	4b57      	ldr	r3, [pc, #348]	@ (80008b4 <MX_TIM1_Init+0x1a4>)
 8000756:	4a58      	ldr	r2, [pc, #352]	@ (80008b8 <MX_TIM1_Init+0x1a8>)
 8000758:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15999;
 800075a:	4b56      	ldr	r3, [pc, #344]	@ (80008b4 <MX_TIM1_Init+0x1a4>)
 800075c:	4a57      	ldr	r2, [pc, #348]	@ (80008bc <MX_TIM1_Init+0x1ac>)
 800075e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000760:	4b54      	ldr	r3, [pc, #336]	@ (80008b4 <MX_TIM1_Init+0x1a4>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 300;
 8000766:	4b53      	ldr	r3, [pc, #332]	@ (80008b4 <MX_TIM1_Init+0x1a4>)
 8000768:	2296      	movs	r2, #150	@ 0x96
 800076a:	0052      	lsls	r2, r2, #1
 800076c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800076e:	4b51      	ldr	r3, [pc, #324]	@ (80008b4 <MX_TIM1_Init+0x1a4>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000774:	4b4f      	ldr	r3, [pc, #316]	@ (80008b4 <MX_TIM1_Init+0x1a4>)
 8000776:	2200      	movs	r2, #0
 8000778:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077a:	4b4e      	ldr	r3, [pc, #312]	@ (80008b4 <MX_TIM1_Init+0x1a4>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000780:	4b4c      	ldr	r3, [pc, #304]	@ (80008b4 <MX_TIM1_Init+0x1a4>)
 8000782:	0018      	movs	r0, r3
 8000784:	f002 fb1a 	bl	8002dbc <HAL_TIM_Base_Init>
 8000788:	1e03      	subs	r3, r0, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 800078c:	f000 f9ba 	bl	8000b04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000790:	2160      	movs	r1, #96	@ 0x60
 8000792:	187b      	adds	r3, r7, r1
 8000794:	2280      	movs	r2, #128	@ 0x80
 8000796:	0152      	lsls	r2, r2, #5
 8000798:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800079a:	187a      	adds	r2, r7, r1
 800079c:	4b45      	ldr	r3, [pc, #276]	@ (80008b4 <MX_TIM1_Init+0x1a4>)
 800079e:	0011      	movs	r1, r2
 80007a0:	0018      	movs	r0, r3
 80007a2:	f002 fe2b 	bl	80033fc <HAL_TIM_ConfigClockSource>
 80007a6:	1e03      	subs	r3, r0, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80007aa:	f000 f9ab 	bl	8000b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007ae:	4b41      	ldr	r3, [pc, #260]	@ (80008b4 <MX_TIM1_Init+0x1a4>)
 80007b0:	0018      	movs	r0, r3
 80007b2:	f002 fb5b 	bl	8002e6c <HAL_TIM_PWM_Init>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 80007ba:	f000 f9a3 	bl	8000b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007be:	2154      	movs	r1, #84	@ 0x54
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	2200      	movs	r2, #0
 80007ca:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007d2:	187a      	adds	r2, r7, r1
 80007d4:	4b37      	ldr	r3, [pc, #220]	@ (80008b4 <MX_TIM1_Init+0x1a4>)
 80007d6:	0011      	movs	r1, r2
 80007d8:	0018      	movs	r0, r3
 80007da:	f003 faed 	bl	8003db8 <HAL_TIMEx_MasterConfigSynchronization>
 80007de:	1e03      	subs	r3, r0, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80007e2:	f000 f98f 	bl	8000b04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007e6:	2138      	movs	r1, #56	@ 0x38
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	2260      	movs	r2, #96	@ 0x60
 80007ec:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 149;
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	2295      	movs	r2, #149	@ 0x95
 80007f2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2200      	movs	r2, #0
 80007fe:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2200      	movs	r2, #0
 800080a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800080c:	187b      	adds	r3, r7, r1
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000812:	1879      	adds	r1, r7, r1
 8000814:	4b27      	ldr	r3, [pc, #156]	@ (80008b4 <MX_TIM1_Init+0x1a4>)
 8000816:	2200      	movs	r2, #0
 8000818:	0018      	movs	r0, r3
 800081a:	f002 fcef 	bl	80031fc <HAL_TIM_PWM_ConfigChannel>
 800081e:	1e03      	subs	r3, r0, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000822:	f000 f96f 	bl	8000b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000826:	2338      	movs	r3, #56	@ 0x38
 8000828:	18f9      	adds	r1, r7, r3
 800082a:	4b22      	ldr	r3, [pc, #136]	@ (80008b4 <MX_TIM1_Init+0x1a4>)
 800082c:	2204      	movs	r2, #4
 800082e:	0018      	movs	r0, r3
 8000830:	f002 fce4 	bl	80031fc <HAL_TIM_PWM_ConfigChannel>
 8000834:	1e03      	subs	r3, r0, #0
 8000836:	d001      	beq.n	800083c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000838:	f000 f964 	bl	8000b04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2200      	movs	r2, #0
 8000846:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2280      	movs	r2, #128	@ 0x80
 800085e:	0192      	lsls	r2, r2, #6
 8000860:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	2280      	movs	r2, #128	@ 0x80
 8000878:	0492      	lsls	r2, r2, #18
 800087a:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2200      	movs	r2, #0
 8000880:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2200      	movs	r2, #0
 8000886:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2200      	movs	r2, #0
 800088c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800088e:	1d3a      	adds	r2, r7, #4
 8000890:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <MX_TIM1_Init+0x1a4>)
 8000892:	0011      	movs	r1, r2
 8000894:	0018      	movs	r0, r3
 8000896:	f003 faf7 	bl	8003e88 <HAL_TIMEx_ConfigBreakDeadTime>
 800089a:	1e03      	subs	r3, r0, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 800089e:	f000 f931 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008a2:	4b04      	ldr	r3, [pc, #16]	@ (80008b4 <MX_TIM1_Init+0x1a4>)
 80008a4:	0018      	movs	r0, r3
 80008a6:	f000 f9d9 	bl	8000c5c <HAL_TIM_MspPostInit>

}
 80008aa:	46c0      	nop			@ (mov r8, r8)
 80008ac:	46bd      	mov	sp, r7
 80008ae:	b01c      	add	sp, #112	@ 0x70
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	46c0      	nop			@ (mov r8, r8)
 80008b4:	200000dc 	.word	0x200000dc
 80008b8:	40012c00 	.word	0x40012c00
 80008bc:	00003e7f 	.word	0x00003e7f

080008c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	@ 0x28
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c6:	231c      	movs	r3, #28
 80008c8:	18fb      	adds	r3, r7, r3
 80008ca:	0018      	movs	r0, r3
 80008cc:	230c      	movs	r3, #12
 80008ce:	001a      	movs	r2, r3
 80008d0:	2100      	movs	r1, #0
 80008d2:	f004 f997 	bl	8004c04 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d6:	003b      	movs	r3, r7
 80008d8:	0018      	movs	r0, r3
 80008da:	231c      	movs	r3, #28
 80008dc:	001a      	movs	r2, r3
 80008de:	2100      	movs	r1, #0
 80008e0:	f004 f990 	bl	8004c04 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008e4:	4b28      	ldr	r3, [pc, #160]	@ (8000988 <MX_TIM3_Init+0xc8>)
 80008e6:	4a29      	ldr	r2, [pc, #164]	@ (800098c <MX_TIM3_Init+0xcc>)
 80008e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15999;
 80008ea:	4b27      	ldr	r3, [pc, #156]	@ (8000988 <MX_TIM3_Init+0xc8>)
 80008ec:	4a28      	ldr	r2, [pc, #160]	@ (8000990 <MX_TIM3_Init+0xd0>)
 80008ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f0:	4b25      	ldr	r3, [pc, #148]	@ (8000988 <MX_TIM3_Init+0xc8>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 300;
 80008f6:	4b24      	ldr	r3, [pc, #144]	@ (8000988 <MX_TIM3_Init+0xc8>)
 80008f8:	2296      	movs	r2, #150	@ 0x96
 80008fa:	0052      	lsls	r2, r2, #1
 80008fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fe:	4b22      	ldr	r3, [pc, #136]	@ (8000988 <MX_TIM3_Init+0xc8>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000904:	4b20      	ldr	r3, [pc, #128]	@ (8000988 <MX_TIM3_Init+0xc8>)
 8000906:	2200      	movs	r2, #0
 8000908:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800090a:	4b1f      	ldr	r3, [pc, #124]	@ (8000988 <MX_TIM3_Init+0xc8>)
 800090c:	0018      	movs	r0, r3
 800090e:	f002 faad 	bl	8002e6c <HAL_TIM_PWM_Init>
 8000912:	1e03      	subs	r3, r0, #0
 8000914:	d001      	beq.n	800091a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000916:	f000 f8f5 	bl	8000b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091a:	211c      	movs	r1, #28
 800091c:	187b      	adds	r3, r7, r1
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000922:	187b      	adds	r3, r7, r1
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000928:	187a      	adds	r2, r7, r1
 800092a:	4b17      	ldr	r3, [pc, #92]	@ (8000988 <MX_TIM3_Init+0xc8>)
 800092c:	0011      	movs	r1, r2
 800092e:	0018      	movs	r0, r3
 8000930:	f003 fa42 	bl	8003db8 <HAL_TIMEx_MasterConfigSynchronization>
 8000934:	1e03      	subs	r3, r0, #0
 8000936:	d001      	beq.n	800093c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000938:	f000 f8e4 	bl	8000b04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800093c:	003b      	movs	r3, r7
 800093e:	2260      	movs	r2, #96	@ 0x60
 8000940:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 149;
 8000942:	003b      	movs	r3, r7
 8000944:	2295      	movs	r2, #149	@ 0x95
 8000946:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000948:	003b      	movs	r3, r7
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800094e:	003b      	movs	r3, r7
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000954:	0039      	movs	r1, r7
 8000956:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <MX_TIM3_Init+0xc8>)
 8000958:	2200      	movs	r2, #0
 800095a:	0018      	movs	r0, r3
 800095c:	f002 fc4e 	bl	80031fc <HAL_TIM_PWM_ConfigChannel>
 8000960:	1e03      	subs	r3, r0, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 8000964:	f000 f8ce 	bl	8000b04 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8000968:	4b07      	ldr	r3, [pc, #28]	@ (8000988 <MX_TIM3_Init+0xc8>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	699a      	ldr	r2, [r3, #24]
 800096e:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <MX_TIM3_Init+0xc8>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2108      	movs	r1, #8
 8000974:	438a      	bics	r2, r1
 8000976:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000978:	4b03      	ldr	r3, [pc, #12]	@ (8000988 <MX_TIM3_Init+0xc8>)
 800097a:	0018      	movs	r0, r3
 800097c:	f000 f96e 	bl	8000c5c <HAL_TIM_MspPostInit>

}
 8000980:	46c0      	nop			@ (mov r8, r8)
 8000982:	46bd      	mov	sp, r7
 8000984:	b00a      	add	sp, #40	@ 0x28
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000128 	.word	0x20000128
 800098c:	40000400 	.word	0x40000400
 8000990:	00003e7f 	.word	0x00003e7f

08000994 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000998:	4b23      	ldr	r3, [pc, #140]	@ (8000a28 <MX_USART2_UART_Init+0x94>)
 800099a:	4a24      	ldr	r2, [pc, #144]	@ (8000a2c <MX_USART2_UART_Init+0x98>)
 800099c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800099e:	4b22      	ldr	r3, [pc, #136]	@ (8000a28 <MX_USART2_UART_Init+0x94>)
 80009a0:	22e1      	movs	r2, #225	@ 0xe1
 80009a2:	0252      	lsls	r2, r2, #9
 80009a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009a6:	4b20      	ldr	r3, [pc, #128]	@ (8000a28 <MX_USART2_UART_Init+0x94>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000a28 <MX_USART2_UART_Init+0x94>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <MX_USART2_UART_Init+0x94>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a28 <MX_USART2_UART_Init+0x94>)
 80009ba:	220c      	movs	r2, #12
 80009bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009be:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <MX_USART2_UART_Init+0x94>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c4:	4b18      	ldr	r3, [pc, #96]	@ (8000a28 <MX_USART2_UART_Init+0x94>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ca:	4b17      	ldr	r3, [pc, #92]	@ (8000a28 <MX_USART2_UART_Init+0x94>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009d0:	4b15      	ldr	r3, [pc, #84]	@ (8000a28 <MX_USART2_UART_Init+0x94>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d6:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <MX_USART2_UART_Init+0x94>)
 80009d8:	2200      	movs	r2, #0
 80009da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009dc:	4b12      	ldr	r3, [pc, #72]	@ (8000a28 <MX_USART2_UART_Init+0x94>)
 80009de:	0018      	movs	r0, r3
 80009e0:	f003 faee 	bl	8003fc0 <HAL_UART_Init>
 80009e4:	1e03      	subs	r3, r0, #0
 80009e6:	d001      	beq.n	80009ec <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009e8:	f000 f88c 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000a28 <MX_USART2_UART_Init+0x94>)
 80009ee:	2100      	movs	r1, #0
 80009f0:	0018      	movs	r0, r3
 80009f2:	f003 fff1 	bl	80049d8 <HAL_UARTEx_SetTxFifoThreshold>
 80009f6:	1e03      	subs	r3, r0, #0
 80009f8:	d001      	beq.n	80009fe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009fa:	f000 f883 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000a28 <MX_USART2_UART_Init+0x94>)
 8000a00:	2100      	movs	r1, #0
 8000a02:	0018      	movs	r0, r3
 8000a04:	f004 f828 	bl	8004a58 <HAL_UARTEx_SetRxFifoThreshold>
 8000a08:	1e03      	subs	r3, r0, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a0c:	f000 f87a 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a10:	4b05      	ldr	r3, [pc, #20]	@ (8000a28 <MX_USART2_UART_Init+0x94>)
 8000a12:	0018      	movs	r0, r3
 8000a14:	f003 ffa6 	bl	8004964 <HAL_UARTEx_DisableFifoMode>
 8000a18:	1e03      	subs	r3, r0, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a1c:	f000 f872 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a20:	46c0      	nop			@ (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			@ (mov r8, r8)
 8000a28:	20000174 	.word	0x20000174
 8000a2c:	40004400 	.word	0x40004400

08000a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b089      	sub	sp, #36	@ 0x24
 8000a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a36:	240c      	movs	r4, #12
 8000a38:	193b      	adds	r3, r7, r4
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	2314      	movs	r3, #20
 8000a3e:	001a      	movs	r2, r3
 8000a40:	2100      	movs	r1, #0
 8000a42:	f004 f8df 	bl	8004c04 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	4b2d      	ldr	r3, [pc, #180]	@ (8000afc <MX_GPIO_Init+0xcc>)
 8000a48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a4a:	4b2c      	ldr	r3, [pc, #176]	@ (8000afc <MX_GPIO_Init+0xcc>)
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a52:	4b2a      	ldr	r3, [pc, #168]	@ (8000afc <MX_GPIO_Init+0xcc>)
 8000a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a56:	2201      	movs	r2, #1
 8000a58:	4013      	ands	r3, r2
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5e:	4b27      	ldr	r3, [pc, #156]	@ (8000afc <MX_GPIO_Init+0xcc>)
 8000a60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a62:	4b26      	ldr	r3, [pc, #152]	@ (8000afc <MX_GPIO_Init+0xcc>)
 8000a64:	2104      	movs	r1, #4
 8000a66:	430a      	orrs	r2, r1
 8000a68:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a6a:	4b24      	ldr	r3, [pc, #144]	@ (8000afc <MX_GPIO_Init+0xcc>)
 8000a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a6e:	2204      	movs	r2, #4
 8000a70:	4013      	ands	r3, r2
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	4b21      	ldr	r3, [pc, #132]	@ (8000afc <MX_GPIO_Init+0xcc>)
 8000a78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a7a:	4b20      	ldr	r3, [pc, #128]	@ (8000afc <MX_GPIO_Init+0xcc>)
 8000a7c:	2102      	movs	r1, #2
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a82:	4b1e      	ldr	r3, [pc, #120]	@ (8000afc <MX_GPIO_Init+0xcc>)
 8000a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a86:	2202      	movs	r2, #2
 8000a88:	4013      	ands	r3, r2
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : forward_Pin reverse_Pin */
  GPIO_InitStruct.Pin = forward_Pin|reverse_Pin;
 8000a8e:	193b      	adds	r3, r7, r4
 8000a90:	2230      	movs	r2, #48	@ 0x30
 8000a92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a94:	193b      	adds	r3, r7, r4
 8000a96:	2200      	movs	r2, #0
 8000a98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a9a:	193b      	adds	r3, r7, r4
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa0:	193b      	adds	r3, r7, r4
 8000aa2:	4a17      	ldr	r2, [pc, #92]	@ (8000b00 <MX_GPIO_Init+0xd0>)
 8000aa4:	0019      	movs	r1, r3
 8000aa6:	0010      	movs	r0, r2
 8000aa8:	f001 f9cc 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_right_Pin */
  GPIO_InitStruct.Pin = button_right_Pin;
 8000aac:	193b      	adds	r3, r7, r4
 8000aae:	2280      	movs	r2, #128	@ 0x80
 8000ab0:	0092      	lsls	r2, r2, #2
 8000ab2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ab4:	193b      	adds	r3, r7, r4
 8000ab6:	2284      	movs	r2, #132	@ 0x84
 8000ab8:	0392      	lsls	r2, r2, #14
 8000aba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000abc:	193b      	adds	r3, r7, r4
 8000abe:	2201      	movs	r2, #1
 8000ac0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(button_right_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	193a      	adds	r2, r7, r4
 8000ac4:	23a0      	movs	r3, #160	@ 0xa0
 8000ac6:	05db      	lsls	r3, r3, #23
 8000ac8:	0011      	movs	r1, r2
 8000aca:	0018      	movs	r0, r3
 8000acc:	f001 f9ba 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_left_Pin */
  GPIO_InitStruct.Pin = button_left_Pin;
 8000ad0:	0021      	movs	r1, r4
 8000ad2:	187b      	adds	r3, r7, r1
 8000ad4:	2280      	movs	r2, #128	@ 0x80
 8000ad6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	2284      	movs	r2, #132	@ 0x84
 8000adc:	0392      	lsls	r2, r2, #14
 8000ade:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(button_left_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	4a05      	ldr	r2, [pc, #20]	@ (8000b00 <MX_GPIO_Init+0xd0>)
 8000aea:	0019      	movs	r1, r3
 8000aec:	0010      	movs	r0, r2
 8000aee:	f001 f9a9 	bl	8001e44 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000af2:	46c0      	nop			@ (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b009      	add	sp, #36	@ 0x24
 8000af8:	bd90      	pop	{r4, r7, pc}
 8000afa:	46c0      	nop			@ (mov r8, r8)
 8000afc:	40021000 	.word	0x40021000
 8000b00:	50000800 	.word	0x50000800

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0c:	46c0      	nop			@ (mov r8, r8)
 8000b0e:	e7fd      	b.n	8000b0c <Error_Handler+0x8>

08000b10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	430a      	orrs	r2, r1
 8000b20:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b22:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b26:	2201      	movs	r2, #1
 8000b28:	4013      	ands	r3, r2
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b32:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b34:	2180      	movs	r1, #128	@ 0x80
 8000b36:	0549      	lsls	r1, r1, #21
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b3c:	4b05      	ldr	r3, [pc, #20]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b40:	2380      	movs	r3, #128	@ 0x80
 8000b42:	055b      	lsls	r3, r3, #21
 8000b44:	4013      	ands	r3, r2
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4a:	46c0      	nop			@ (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b002      	add	sp, #8
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			@ (mov r8, r8)
 8000b54:	40021000 	.word	0x40021000

08000b58 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b08b      	sub	sp, #44	@ 0x2c
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	2414      	movs	r4, #20
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	0018      	movs	r0, r3
 8000b66:	2314      	movs	r3, #20
 8000b68:	001a      	movs	r2, r3
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	f004 f84a 	bl	8004c04 <memset>
  if(hadc->Instance==ADC1)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a18      	ldr	r2, [pc, #96]	@ (8000bd8 <HAL_ADC_MspInit+0x80>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d129      	bne.n	8000bce <HAL_ADC_MspInit+0x76>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b7a:	4b18      	ldr	r3, [pc, #96]	@ (8000bdc <HAL_ADC_MspInit+0x84>)
 8000b7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b7e:	4b17      	ldr	r3, [pc, #92]	@ (8000bdc <HAL_ADC_MspInit+0x84>)
 8000b80:	2180      	movs	r1, #128	@ 0x80
 8000b82:	0349      	lsls	r1, r1, #13
 8000b84:	430a      	orrs	r2, r1
 8000b86:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b88:	4b14      	ldr	r3, [pc, #80]	@ (8000bdc <HAL_ADC_MspInit+0x84>)
 8000b8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b8c:	2380      	movs	r3, #128	@ 0x80
 8000b8e:	035b      	lsls	r3, r3, #13
 8000b90:	4013      	ands	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <HAL_ADC_MspInit+0x84>)
 8000b98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b9a:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <HAL_ADC_MspInit+0x84>)
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <HAL_ADC_MspInit+0x84>)
 8000ba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = pot_Pin;
 8000bae:	193b      	adds	r3, r7, r4
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bb4:	193b      	adds	r3, r7, r4
 8000bb6:	2203      	movs	r2, #3
 8000bb8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	193b      	adds	r3, r7, r4
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(pot_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	193a      	adds	r2, r7, r4
 8000bc2:	23a0      	movs	r3, #160	@ 0xa0
 8000bc4:	05db      	lsls	r3, r3, #23
 8000bc6:	0011      	movs	r1, r2
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f001 f93b 	bl	8001e44 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000bce:	46c0      	nop			@ (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	b00b      	add	sp, #44	@ 0x2c
 8000bd4:	bd90      	pop	{r4, r7, pc}
 8000bd6:	46c0      	nop			@ (mov r8, r8)
 8000bd8:	40012400 	.word	0x40012400
 8000bdc:	40021000 	.word	0x40021000

08000be0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0a      	ldr	r2, [pc, #40]	@ (8000c18 <HAL_TIM_Base_MspInit+0x38>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d10d      	bne.n	8000c0e <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8000c1c <HAL_TIM_Base_MspInit+0x3c>)
 8000bf4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bf6:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <HAL_TIM_Base_MspInit+0x3c>)
 8000bf8:	2180      	movs	r1, #128	@ 0x80
 8000bfa:	0109      	lsls	r1, r1, #4
 8000bfc:	430a      	orrs	r2, r1
 8000bfe:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c00:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <HAL_TIM_Base_MspInit+0x3c>)
 8000c02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c04:	2380      	movs	r3, #128	@ 0x80
 8000c06:	011b      	lsls	r3, r3, #4
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000c0e:	46c0      	nop			@ (mov r8, r8)
 8000c10:	46bd      	mov	sp, r7
 8000c12:	b004      	add	sp, #16
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	46c0      	nop			@ (mov r8, r8)
 8000c18:	40012c00 	.word	0x40012c00
 8000c1c:	40021000 	.word	0x40021000

08000c20 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a09      	ldr	r2, [pc, #36]	@ (8000c54 <HAL_TIM_PWM_MspInit+0x34>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d10b      	bne.n	8000c4a <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c32:	4b09      	ldr	r3, [pc, #36]	@ (8000c58 <HAL_TIM_PWM_MspInit+0x38>)
 8000c34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c36:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <HAL_TIM_PWM_MspInit+0x38>)
 8000c38:	2102      	movs	r1, #2
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c3e:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <HAL_TIM_PWM_MspInit+0x38>)
 8000c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c42:	2202      	movs	r2, #2
 8000c44:	4013      	ands	r3, r2
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000c4a:	46c0      	nop			@ (mov r8, r8)
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	b004      	add	sp, #16
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	46c0      	nop			@ (mov r8, r8)
 8000c54:	40000400 	.word	0x40000400
 8000c58:	40021000 	.word	0x40021000

08000c5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c5c:	b590      	push	{r4, r7, lr}
 8000c5e:	b08b      	sub	sp, #44	@ 0x2c
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	2414      	movs	r4, #20
 8000c66:	193b      	adds	r3, r7, r4
 8000c68:	0018      	movs	r0, r3
 8000c6a:	2314      	movs	r3, #20
 8000c6c:	001a      	movs	r2, r3
 8000c6e:	2100      	movs	r1, #0
 8000c70:	f003 ffc8 	bl	8004c04 <memset>
  if(htim->Instance==TIM1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a3a      	ldr	r2, [pc, #232]	@ (8000d64 <HAL_TIM_MspPostInit+0x108>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d145      	bne.n	8000d0a <HAL_TIM_MspPostInit+0xae>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	4b3a      	ldr	r3, [pc, #232]	@ (8000d68 <HAL_TIM_MspPostInit+0x10c>)
 8000c80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c82:	4b39      	ldr	r3, [pc, #228]	@ (8000d68 <HAL_TIM_MspPostInit+0x10c>)
 8000c84:	2101      	movs	r1, #1
 8000c86:	430a      	orrs	r2, r1
 8000c88:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c8a:	4b37      	ldr	r3, [pc, #220]	@ (8000d68 <HAL_TIM_MspPostInit+0x10c>)
 8000c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c8e:	2201      	movs	r2, #1
 8000c90:	4013      	ands	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	4b34      	ldr	r3, [pc, #208]	@ (8000d68 <HAL_TIM_MspPostInit+0x10c>)
 8000c98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c9a:	4b33      	ldr	r3, [pc, #204]	@ (8000d68 <HAL_TIM_MspPostInit+0x10c>)
 8000c9c:	2102      	movs	r1, #2
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ca2:	4b31      	ldr	r3, [pc, #196]	@ (8000d68 <HAL_TIM_MspPostInit+0x10c>)
 8000ca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ca6:	2202      	movs	r2, #2
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cae:	193b      	adds	r3, r7, r4
 8000cb0:	2280      	movs	r2, #128	@ 0x80
 8000cb2:	0052      	lsls	r2, r2, #1
 8000cb4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	193b      	adds	r3, r7, r4
 8000cb8:	2202      	movs	r2, #2
 8000cba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	193b      	adds	r3, r7, r4
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	193b      	adds	r3, r7, r4
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000cc8:	193b      	adds	r3, r7, r4
 8000cca:	2202      	movs	r2, #2
 8000ccc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cce:	193a      	adds	r2, r7, r4
 8000cd0:	23a0      	movs	r3, #160	@ 0xa0
 8000cd2:	05db      	lsls	r3, r3, #23
 8000cd4:	0011      	movs	r1, r2
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f001 f8b4 	bl	8001e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cdc:	0021      	movs	r1, r4
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	2208      	movs	r2, #8
 8000ce2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	187b      	adds	r3, r7, r1
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	187b      	adds	r3, r7, r1
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cf6:	187b      	adds	r3, r7, r1
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	4a1b      	ldr	r2, [pc, #108]	@ (8000d6c <HAL_TIM_MspPostInit+0x110>)
 8000d00:	0019      	movs	r1, r3
 8000d02:	0010      	movs	r0, r2
 8000d04:	f001 f89e 	bl	8001e44 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d08:	e027      	b.n	8000d5a <HAL_TIM_MspPostInit+0xfe>
  else if(htim->Instance==TIM3)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a18      	ldr	r2, [pc, #96]	@ (8000d70 <HAL_TIM_MspPostInit+0x114>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d122      	bne.n	8000d5a <HAL_TIM_MspPostInit+0xfe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d14:	4b14      	ldr	r3, [pc, #80]	@ (8000d68 <HAL_TIM_MspPostInit+0x10c>)
 8000d16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d18:	4b13      	ldr	r3, [pc, #76]	@ (8000d68 <HAL_TIM_MspPostInit+0x10c>)
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d20:	4b11      	ldr	r3, [pc, #68]	@ (8000d68 <HAL_TIM_MspPostInit+0x10c>)
 8000d22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d24:	2201      	movs	r2, #1
 8000d26:	4013      	ands	r3, r2
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d2c:	2114      	movs	r1, #20
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	2240      	movs	r2, #64	@ 0x40
 8000d32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	2202      	movs	r2, #2
 8000d38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000d46:	187b      	adds	r3, r7, r1
 8000d48:	2201      	movs	r2, #1
 8000d4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4c:	187a      	adds	r2, r7, r1
 8000d4e:	23a0      	movs	r3, #160	@ 0xa0
 8000d50:	05db      	lsls	r3, r3, #23
 8000d52:	0011      	movs	r1, r2
 8000d54:	0018      	movs	r0, r3
 8000d56:	f001 f875 	bl	8001e44 <HAL_GPIO_Init>
}
 8000d5a:	46c0      	nop			@ (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b00b      	add	sp, #44	@ 0x2c
 8000d60:	bd90      	pop	{r4, r7, pc}
 8000d62:	46c0      	nop			@ (mov r8, r8)
 8000d64:	40012c00 	.word	0x40012c00
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	50000400 	.word	0x50000400
 8000d70:	40000400 	.word	0x40000400

08000d74 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d74:	b590      	push	{r4, r7, lr}
 8000d76:	b091      	sub	sp, #68	@ 0x44
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	232c      	movs	r3, #44	@ 0x2c
 8000d7e:	18fb      	adds	r3, r7, r3
 8000d80:	0018      	movs	r0, r3
 8000d82:	2314      	movs	r3, #20
 8000d84:	001a      	movs	r2, r3
 8000d86:	2100      	movs	r1, #0
 8000d88:	f003 ff3c 	bl	8004c04 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d8c:	2410      	movs	r4, #16
 8000d8e:	193b      	adds	r3, r7, r4
 8000d90:	0018      	movs	r0, r3
 8000d92:	231c      	movs	r3, #28
 8000d94:	001a      	movs	r2, r3
 8000d96:	2100      	movs	r1, #0
 8000d98:	f003 ff34 	bl	8004c04 <memset>
  if(huart->Instance==USART2)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a22      	ldr	r2, [pc, #136]	@ (8000e2c <HAL_UART_MspInit+0xb8>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d13e      	bne.n	8000e24 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000da6:	193b      	adds	r3, r7, r4
 8000da8:	2202      	movs	r2, #2
 8000daa:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dac:	193b      	adds	r3, r7, r4
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db2:	193b      	adds	r3, r7, r4
 8000db4:	0018      	movs	r0, r3
 8000db6:	f001 fecd 	bl	8002b54 <HAL_RCCEx_PeriphCLKConfig>
 8000dba:	1e03      	subs	r3, r0, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dbe:	f7ff fea1 	bl	8000b04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dc2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e30 <HAL_UART_MspInit+0xbc>)
 8000dc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e30 <HAL_UART_MspInit+0xbc>)
 8000dc8:	2180      	movs	r1, #128	@ 0x80
 8000dca:	0289      	lsls	r1, r1, #10
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000dd0:	4b17      	ldr	r3, [pc, #92]	@ (8000e30 <HAL_UART_MspInit+0xbc>)
 8000dd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000dd4:	2380      	movs	r3, #128	@ 0x80
 8000dd6:	029b      	lsls	r3, r3, #10
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	4b14      	ldr	r3, [pc, #80]	@ (8000e30 <HAL_UART_MspInit+0xbc>)
 8000de0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000de2:	4b13      	ldr	r3, [pc, #76]	@ (8000e30 <HAL_UART_MspInit+0xbc>)
 8000de4:	2101      	movs	r1, #1
 8000de6:	430a      	orrs	r2, r1
 8000de8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dea:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <HAL_UART_MspInit+0xbc>)
 8000dec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dee:	2201      	movs	r2, #1
 8000df0:	4013      	ands	r3, r2
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000df6:	212c      	movs	r1, #44	@ 0x2c
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	187b      	adds	r3, r7, r1
 8000e00:	2202      	movs	r2, #2
 8000e02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	187b      	adds	r3, r7, r1
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000e10:	187b      	adds	r3, r7, r1
 8000e12:	2201      	movs	r2, #1
 8000e14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e16:	187a      	adds	r2, r7, r1
 8000e18:	23a0      	movs	r3, #160	@ 0xa0
 8000e1a:	05db      	lsls	r3, r3, #23
 8000e1c:	0011      	movs	r1, r2
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f001 f810 	bl	8001e44 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e24:	46c0      	nop			@ (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b011      	add	sp, #68	@ 0x44
 8000e2a:	bd90      	pop	{r4, r7, pc}
 8000e2c:	40004400 	.word	0x40004400
 8000e30:	40021000 	.word	0x40021000

08000e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e38:	46c0      	nop			@ (mov r8, r8)
 8000e3a:	e7fd      	b.n	8000e38 <NMI_Handler+0x4>

08000e3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e40:	46c0      	nop			@ (mov r8, r8)
 8000e42:	e7fd      	b.n	8000e40 <HardFault_Handler+0x4>

08000e44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e48:	46c0      	nop			@ (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e52:	46c0      	nop			@ (mov r8, r8)
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e5c:	f000 f8d4 	bl	8001008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e60:	46c0      	nop			@ (mov r8, r8)
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e70:	4a14      	ldr	r2, [pc, #80]	@ (8000ec4 <_sbrk+0x5c>)
 8000e72:	4b15      	ldr	r3, [pc, #84]	@ (8000ec8 <_sbrk+0x60>)
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e7c:	4b13      	ldr	r3, [pc, #76]	@ (8000ecc <_sbrk+0x64>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d102      	bne.n	8000e8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e84:	4b11      	ldr	r3, [pc, #68]	@ (8000ecc <_sbrk+0x64>)
 8000e86:	4a12      	ldr	r2, [pc, #72]	@ (8000ed0 <_sbrk+0x68>)
 8000e88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ecc <_sbrk+0x64>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	18d3      	adds	r3, r2, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d207      	bcs.n	8000ea8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e98:	f003 febc 	bl	8004c14 <__errno>
 8000e9c:	0003      	movs	r3, r0
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	425b      	negs	r3, r3
 8000ea6:	e009      	b.n	8000ebc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea8:	4b08      	ldr	r3, [pc, #32]	@ (8000ecc <_sbrk+0x64>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eae:	4b07      	ldr	r3, [pc, #28]	@ (8000ecc <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	18d2      	adds	r2, r2, r3
 8000eb6:	4b05      	ldr	r3, [pc, #20]	@ (8000ecc <_sbrk+0x64>)
 8000eb8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000eba:	68fb      	ldr	r3, [r7, #12]
}
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	b006      	add	sp, #24
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20009000 	.word	0x20009000
 8000ec8:	00000400 	.word	0x00000400
 8000ecc:	2000020c 	.word	0x2000020c
 8000ed0:	20000360 	.word	0x20000360

08000ed4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed8:	46c0      	nop			@ (mov r8, r8)
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ee0:	480d      	ldr	r0, [pc, #52]	@ (8000f18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ee2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ee4:	f7ff fff6 	bl	8000ed4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee8:	480c      	ldr	r0, [pc, #48]	@ (8000f1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000eea:	490d      	ldr	r1, [pc, #52]	@ (8000f20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000eec:	4a0d      	ldr	r2, [pc, #52]	@ (8000f24 <LoopForever+0xe>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef0:	e002      	b.n	8000ef8 <LoopCopyDataInit>

08000ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef6:	3304      	adds	r3, #4

08000ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000efc:	d3f9      	bcc.n	8000ef2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efe:	4a0a      	ldr	r2, [pc, #40]	@ (8000f28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f00:	4c0a      	ldr	r4, [pc, #40]	@ (8000f2c <LoopForever+0x16>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f04:	e001      	b.n	8000f0a <LoopFillZerobss>

08000f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f08:	3204      	adds	r2, #4

08000f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f0c:	d3fb      	bcc.n	8000f06 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f0e:	f003 fe87 	bl	8004c20 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f12:	f7ff fa7d 	bl	8000410 <main>

08000f16 <LoopForever>:

LoopForever:
  b LoopForever
 8000f16:	e7fe      	b.n	8000f16 <LoopForever>
  ldr   r0, =_estack
 8000f18:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f20:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f24:	08005638 	.word	0x08005638
  ldr r2, =_sbss
 8000f28:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f2c:	2000035c 	.word	0x2000035c

08000f30 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f30:	e7fe      	b.n	8000f30 <ADC1_IRQHandler>
	...

08000f34 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f3a:	1dfb      	adds	r3, r7, #7
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f40:	4b0b      	ldr	r3, [pc, #44]	@ (8000f70 <HAL_Init+0x3c>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b0a      	ldr	r3, [pc, #40]	@ (8000f70 <HAL_Init+0x3c>)
 8000f46:	2180      	movs	r1, #128	@ 0x80
 8000f48:	0049      	lsls	r1, r1, #1
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f4e:	2003      	movs	r0, #3
 8000f50:	f000 f810 	bl	8000f74 <HAL_InitTick>
 8000f54:	1e03      	subs	r3, r0, #0
 8000f56:	d003      	beq.n	8000f60 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000f58:	1dfb      	adds	r3, r7, #7
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	701a      	strb	r2, [r3, #0]
 8000f5e:	e001      	b.n	8000f64 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000f60:	f7ff fdd6 	bl	8000b10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f64:	1dfb      	adds	r3, r7, #7
 8000f66:	781b      	ldrb	r3, [r3, #0]
}
 8000f68:	0018      	movs	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	b002      	add	sp, #8
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40022000 	.word	0x40022000

08000f74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f7c:	230f      	movs	r3, #15
 8000f7e:	18fb      	adds	r3, r7, r3
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000f84:	4b1d      	ldr	r3, [pc, #116]	@ (8000ffc <HAL_InitTick+0x88>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d02b      	beq.n	8000fe4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	@ (8001000 <HAL_InitTick+0x8c>)
 8000f8e:	681c      	ldr	r4, [r3, #0]
 8000f90:	4b1a      	ldr	r3, [pc, #104]	@ (8000ffc <HAL_InitTick+0x88>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	0019      	movs	r1, r3
 8000f96:	23fa      	movs	r3, #250	@ 0xfa
 8000f98:	0098      	lsls	r0, r3, #2
 8000f9a:	f7ff f8c3 	bl	8000124 <__udivsi3>
 8000f9e:	0003      	movs	r3, r0
 8000fa0:	0019      	movs	r1, r3
 8000fa2:	0020      	movs	r0, r4
 8000fa4:	f7ff f8be 	bl	8000124 <__udivsi3>
 8000fa8:	0003      	movs	r3, r0
 8000faa:	0018      	movs	r0, r3
 8000fac:	f000 ff3d 	bl	8001e2a <HAL_SYSTICK_Config>
 8000fb0:	1e03      	subs	r3, r0, #0
 8000fb2:	d112      	bne.n	8000fda <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b03      	cmp	r3, #3
 8000fb8:	d80a      	bhi.n	8000fd0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	425b      	negs	r3, r3
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	f000 ff1c 	bl	8001e00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001004 <HAL_InitTick+0x90>)
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	e00d      	b.n	8000fec <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000fd0:	230f      	movs	r3, #15
 8000fd2:	18fb      	adds	r3, r7, r3
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	701a      	strb	r2, [r3, #0]
 8000fd8:	e008      	b.n	8000fec <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fda:	230f      	movs	r3, #15
 8000fdc:	18fb      	adds	r3, r7, r3
 8000fde:	2201      	movs	r2, #1
 8000fe0:	701a      	strb	r2, [r3, #0]
 8000fe2:	e003      	b.n	8000fec <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	18fb      	adds	r3, r7, r3
 8000fe8:	2201      	movs	r2, #1
 8000fea:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000fec:	230f      	movs	r3, #15
 8000fee:	18fb      	adds	r3, r7, r3
 8000ff0:	781b      	ldrb	r3, [r3, #0]
}
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b005      	add	sp, #20
 8000ff8:	bd90      	pop	{r4, r7, pc}
 8000ffa:	46c0      	nop			@ (mov r8, r8)
 8000ffc:	20000008 	.word	0x20000008
 8001000:	20000000 	.word	0x20000000
 8001004:	20000004 	.word	0x20000004

08001008 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800100c:	4b05      	ldr	r3, [pc, #20]	@ (8001024 <HAL_IncTick+0x1c>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	001a      	movs	r2, r3
 8001012:	4b05      	ldr	r3, [pc, #20]	@ (8001028 <HAL_IncTick+0x20>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	18d2      	adds	r2, r2, r3
 8001018:	4b03      	ldr	r3, [pc, #12]	@ (8001028 <HAL_IncTick+0x20>)
 800101a:	601a      	str	r2, [r3, #0]
}
 800101c:	46c0      	nop			@ (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	46c0      	nop			@ (mov r8, r8)
 8001024:	20000008 	.word	0x20000008
 8001028:	20000210 	.word	0x20000210

0800102c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  return uwTick;
 8001030:	4b02      	ldr	r3, [pc, #8]	@ (800103c <HAL_GetTick+0x10>)
 8001032:	681b      	ldr	r3, [r3, #0]
}
 8001034:	0018      	movs	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	46c0      	nop			@ (mov r8, r8)
 800103c:	20000210 	.word	0x20000210

08001040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001048:	f7ff fff0 	bl	800102c <HAL_GetTick>
 800104c:	0003      	movs	r3, r0
 800104e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	3301      	adds	r3, #1
 8001058:	d005      	beq.n	8001066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800105a:	4b0a      	ldr	r3, [pc, #40]	@ (8001084 <HAL_Delay+0x44>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	001a      	movs	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	189b      	adds	r3, r3, r2
 8001064:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001066:	46c0      	nop			@ (mov r8, r8)
 8001068:	f7ff ffe0 	bl	800102c <HAL_GetTick>
 800106c:	0002      	movs	r2, r0
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	429a      	cmp	r2, r3
 8001076:	d8f7      	bhi.n	8001068 <HAL_Delay+0x28>
  {
  }
}
 8001078:	46c0      	nop			@ (mov r8, r8)
 800107a:	46c0      	nop			@ (mov r8, r8)
 800107c:	46bd      	mov	sp, r7
 800107e:	b004      	add	sp, #16
 8001080:	bd80      	pop	{r7, pc}
 8001082:	46c0      	nop			@ (mov r8, r8)
 8001084:	20000008 	.word	0x20000008

08001088 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a05      	ldr	r2, [pc, #20]	@ (80010ac <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001098:	401a      	ands	r2, r3
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	431a      	orrs	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	601a      	str	r2, [r3, #0]
}
 80010a2:	46c0      	nop			@ (mov r8, r8)
 80010a4:	46bd      	mov	sp, r7
 80010a6:	b002      	add	sp, #8
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	46c0      	nop			@ (mov r8, r8)
 80010ac:	fe3fffff 	.word	0xfe3fffff

080010b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	23e0      	movs	r3, #224	@ 0xe0
 80010be:	045b      	lsls	r3, r3, #17
 80010c0:	4013      	ands	r3, r2
}
 80010c2:	0018      	movs	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	b002      	add	sp, #8
 80010c8:	bd80      	pop	{r7, pc}

080010ca <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b084      	sub	sp, #16
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	60f8      	str	r0, [r7, #12]
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	2104      	movs	r1, #4
 80010de:	400a      	ands	r2, r1
 80010e0:	2107      	movs	r1, #7
 80010e2:	4091      	lsls	r1, r2
 80010e4:	000a      	movs	r2, r1
 80010e6:	43d2      	mvns	r2, r2
 80010e8:	401a      	ands	r2, r3
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	2104      	movs	r1, #4
 80010ee:	400b      	ands	r3, r1
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	4099      	lsls	r1, r3
 80010f4:	000b      	movs	r3, r1
 80010f6:	431a      	orrs	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80010fc:	46c0      	nop			@ (mov r8, r8)
 80010fe:	46bd      	mov	sp, r7
 8001100:	b004      	add	sp, #16
 8001102:	bd80      	pop	{r7, pc}

08001104 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	683a      	ldr	r2, [r7, #0]
 8001114:	2104      	movs	r1, #4
 8001116:	400a      	ands	r2, r1
 8001118:	2107      	movs	r1, #7
 800111a:	4091      	lsls	r1, r2
 800111c:	000a      	movs	r2, r1
 800111e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	2104      	movs	r1, #4
 8001124:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001126:	40da      	lsrs	r2, r3
 8001128:	0013      	movs	r3, r2
}
 800112a:	0018      	movs	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	b002      	add	sp, #8
 8001130:	bd80      	pop	{r7, pc}

08001132 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	68da      	ldr	r2, [r3, #12]
 800113e:	23c0      	movs	r3, #192	@ 0xc0
 8001140:	011b      	lsls	r3, r3, #4
 8001142:	4013      	ands	r3, r2
 8001144:	d101      	bne.n	800114a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800114a:	2300      	movs	r3, #0
}
 800114c:	0018      	movs	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	b002      	add	sp, #8
 8001152:	bd80      	pop	{r7, pc}

08001154 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001164:	68ba      	ldr	r2, [r7, #8]
 8001166:	211f      	movs	r1, #31
 8001168:	400a      	ands	r2, r1
 800116a:	210f      	movs	r1, #15
 800116c:	4091      	lsls	r1, r2
 800116e:	000a      	movs	r2, r1
 8001170:	43d2      	mvns	r2, r2
 8001172:	401a      	ands	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	0e9b      	lsrs	r3, r3, #26
 8001178:	210f      	movs	r1, #15
 800117a:	4019      	ands	r1, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	201f      	movs	r0, #31
 8001180:	4003      	ands	r3, r0
 8001182:	4099      	lsls	r1, r3
 8001184:	000b      	movs	r3, r1
 8001186:	431a      	orrs	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800118c:	46c0      	nop			@ (mov r8, r8)
 800118e:	46bd      	mov	sp, r7
 8001190:	b004      	add	sp, #16
 8001192:	bd80      	pop	{r7, pc}

08001194 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	035b      	lsls	r3, r3, #13
 80011a6:	0b5b      	lsrs	r3, r3, #13
 80011a8:	431a      	orrs	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011ae:	46c0      	nop			@ (mov r8, r8)
 80011b0:	46bd      	mov	sp, r7
 80011b2:	b002      	add	sp, #8
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
 80011be:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011c4:	683a      	ldr	r2, [r7, #0]
 80011c6:	0352      	lsls	r2, r2, #13
 80011c8:	0b52      	lsrs	r2, r2, #13
 80011ca:	43d2      	mvns	r2, r2
 80011cc:	401a      	ands	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011d2:	46c0      	nop			@ (mov r8, r8)
 80011d4:	46bd      	mov	sp, r7
 80011d6:	b002      	add	sp, #8
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	695b      	ldr	r3, [r3, #20]
 80011ec:	68ba      	ldr	r2, [r7, #8]
 80011ee:	0212      	lsls	r2, r2, #8
 80011f0:	43d2      	mvns	r2, r2
 80011f2:	401a      	ands	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	021b      	lsls	r3, r3, #8
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	400b      	ands	r3, r1
 80011fc:	4904      	ldr	r1, [pc, #16]	@ (8001210 <LL_ADC_SetChannelSamplingTime+0x34>)
 80011fe:	400b      	ands	r3, r1
 8001200:	431a      	orrs	r2, r3
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001206:	46c0      	nop			@ (mov r8, r8)
 8001208:	46bd      	mov	sp, r7
 800120a:	b004      	add	sp, #16
 800120c:	bd80      	pop	{r7, pc}
 800120e:	46c0      	nop			@ (mov r8, r8)
 8001210:	07ffff00 	.word	0x07ffff00

08001214 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	4a05      	ldr	r2, [pc, #20]	@ (8001238 <LL_ADC_EnableInternalRegulator+0x24>)
 8001222:	4013      	ands	r3, r2
 8001224:	2280      	movs	r2, #128	@ 0x80
 8001226:	0552      	lsls	r2, r2, #21
 8001228:	431a      	orrs	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800122e:	46c0      	nop			@ (mov r8, r8)
 8001230:	46bd      	mov	sp, r7
 8001232:	b002      	add	sp, #8
 8001234:	bd80      	pop	{r7, pc}
 8001236:	46c0      	nop			@ (mov r8, r8)
 8001238:	6fffffe8 	.word	0x6fffffe8

0800123c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	2380      	movs	r3, #128	@ 0x80
 800124a:	055b      	lsls	r3, r3, #21
 800124c:	401a      	ands	r2, r3
 800124e:	2380      	movs	r3, #128	@ 0x80
 8001250:	055b      	lsls	r3, r3, #21
 8001252:	429a      	cmp	r2, r3
 8001254:	d101      	bne.n	800125a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001256:	2301      	movs	r3, #1
 8001258:	e000      	b.n	800125c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800125a:	2300      	movs	r3, #0
}
 800125c:	0018      	movs	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	b002      	add	sp, #8
 8001262:	bd80      	pop	{r7, pc}

08001264 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	4a04      	ldr	r2, [pc, #16]	@ (8001284 <LL_ADC_Enable+0x20>)
 8001272:	4013      	ands	r3, r2
 8001274:	2201      	movs	r2, #1
 8001276:	431a      	orrs	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800127c:	46c0      	nop			@ (mov r8, r8)
 800127e:	46bd      	mov	sp, r7
 8001280:	b002      	add	sp, #8
 8001282:	bd80      	pop	{r7, pc}
 8001284:	7fffffe8 	.word	0x7fffffe8

08001288 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	2201      	movs	r2, #1
 8001296:	4013      	ands	r3, r2
 8001298:	2b01      	cmp	r3, #1
 800129a:	d101      	bne.n	80012a0 <LL_ADC_IsEnabled+0x18>
 800129c:	2301      	movs	r3, #1
 800129e:	e000      	b.n	80012a2 <LL_ADC_IsEnabled+0x1a>
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	0018      	movs	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b002      	add	sp, #8
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	4a04      	ldr	r2, [pc, #16]	@ (80012cc <LL_ADC_REG_StartConversion+0x20>)
 80012ba:	4013      	ands	r3, r2
 80012bc:	2204      	movs	r2, #4
 80012be:	431a      	orrs	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80012c4:	46c0      	nop			@ (mov r8, r8)
 80012c6:	46bd      	mov	sp, r7
 80012c8:	b002      	add	sp, #8
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	7fffffe8 	.word	0x7fffffe8

080012d0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	2204      	movs	r2, #4
 80012de:	4013      	ands	r3, r2
 80012e0:	2b04      	cmp	r3, #4
 80012e2:	d101      	bne.n	80012e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80012e4:	2301      	movs	r3, #1
 80012e6:	e000      	b.n	80012ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	0018      	movs	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	b002      	add	sp, #8
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012fc:	231f      	movs	r3, #31
 80012fe:	18fb      	adds	r3, r7, r3
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001304:	2300      	movs	r3, #0
 8001306:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e17f      	b.n	800161a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10a      	bne.n	8001338 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	0018      	movs	r0, r3
 8001326:	f7ff fc17 	bl	8000b58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2254      	movs	r2, #84	@ 0x54
 8001334:	2100      	movs	r1, #0
 8001336:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	0018      	movs	r0, r3
 800133e:	f7ff ff7d 	bl	800123c <LL_ADC_IsInternalRegulatorEnabled>
 8001342:	1e03      	subs	r3, r0, #0
 8001344:	d115      	bne.n	8001372 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	0018      	movs	r0, r3
 800134c:	f7ff ff62 	bl	8001214 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001350:	4bb4      	ldr	r3, [pc, #720]	@ (8001624 <HAL_ADC_Init+0x330>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	49b4      	ldr	r1, [pc, #720]	@ (8001628 <HAL_ADC_Init+0x334>)
 8001356:	0018      	movs	r0, r3
 8001358:	f7fe fee4 	bl	8000124 <__udivsi3>
 800135c:	0003      	movs	r3, r0
 800135e:	3301      	adds	r3, #1
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001364:	e002      	b.n	800136c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	3b01      	subs	r3, #1
 800136a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f9      	bne.n	8001366 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	0018      	movs	r0, r3
 8001378:	f7ff ff60 	bl	800123c <LL_ADC_IsInternalRegulatorEnabled>
 800137c:	1e03      	subs	r3, r0, #0
 800137e:	d10f      	bne.n	80013a0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001384:	2210      	movs	r2, #16
 8001386:	431a      	orrs	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001390:	2201      	movs	r2, #1
 8001392:	431a      	orrs	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001398:	231f      	movs	r3, #31
 800139a:	18fb      	adds	r3, r7, r3
 800139c:	2201      	movs	r2, #1
 800139e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	0018      	movs	r0, r3
 80013a6:	f7ff ff93 	bl	80012d0 <LL_ADC_REG_IsConversionOngoing>
 80013aa:	0003      	movs	r3, r0
 80013ac:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b2:	2210      	movs	r2, #16
 80013b4:	4013      	ands	r3, r2
 80013b6:	d000      	beq.n	80013ba <HAL_ADC_Init+0xc6>
 80013b8:	e122      	b.n	8001600 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d000      	beq.n	80013c2 <HAL_ADC_Init+0xce>
 80013c0:	e11e      	b.n	8001600 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c6:	4a99      	ldr	r2, [pc, #612]	@ (800162c <HAL_ADC_Init+0x338>)
 80013c8:	4013      	ands	r3, r2
 80013ca:	2202      	movs	r2, #2
 80013cc:	431a      	orrs	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	0018      	movs	r0, r3
 80013d8:	f7ff ff56 	bl	8001288 <LL_ADC_IsEnabled>
 80013dc:	1e03      	subs	r3, r0, #0
 80013de:	d000      	beq.n	80013e2 <HAL_ADC_Init+0xee>
 80013e0:	e0ad      	b.n	800153e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	7e1b      	ldrb	r3, [r3, #24]
 80013ea:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80013ec:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	7e5b      	ldrb	r3, [r3, #25]
 80013f2:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80013f4:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	7e9b      	ldrb	r3, [r3, #26]
 80013fa:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80013fc:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	2b00      	cmp	r3, #0
 8001404:	d002      	beq.n	800140c <HAL_ADC_Init+0x118>
 8001406:	2380      	movs	r3, #128	@ 0x80
 8001408:	015b      	lsls	r3, r3, #5
 800140a:	e000      	b.n	800140e <HAL_ADC_Init+0x11a>
 800140c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800140e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001414:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	2b00      	cmp	r3, #0
 800141c:	da04      	bge.n	8001428 <HAL_ADC_Init+0x134>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	085b      	lsrs	r3, r3, #1
 8001426:	e001      	b.n	800142c <HAL_ADC_Init+0x138>
 8001428:	2380      	movs	r3, #128	@ 0x80
 800142a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 800142c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	212c      	movs	r1, #44	@ 0x2c
 8001432:	5c5b      	ldrb	r3, [r3, r1]
 8001434:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001436:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2220      	movs	r2, #32
 8001442:	5c9b      	ldrb	r3, [r3, r2]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d115      	bne.n	8001474 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	7e9b      	ldrb	r3, [r3, #26]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d105      	bne.n	800145c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	2280      	movs	r2, #128	@ 0x80
 8001454:	0252      	lsls	r2, r2, #9
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
 800145a:	e00b      	b.n	8001474 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001460:	2220      	movs	r2, #32
 8001462:	431a      	orrs	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800146c:	2201      	movs	r2, #1
 800146e:	431a      	orrs	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001478:	2b00      	cmp	r3, #0
 800147a:	d00a      	beq.n	8001492 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001480:	23e0      	movs	r3, #224	@ 0xe0
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800148a:	4313      	orrs	r3, r2
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	4a65      	ldr	r2, [pc, #404]	@ (8001630 <HAL_ADC_Init+0x33c>)
 800149a:	4013      	ands	r3, r2
 800149c:	0019      	movs	r1, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	0f9b      	lsrs	r3, r3, #30
 80014ae:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80014b4:	4313      	orrs	r3, r2
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	223c      	movs	r2, #60	@ 0x3c
 80014c0:	5c9b      	ldrb	r3, [r3, r2]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d111      	bne.n	80014ea <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	0f9b      	lsrs	r3, r3, #30
 80014cc:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80014d2:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80014d8:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80014de:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	2201      	movs	r2, #1
 80014e6:	4313      	orrs	r3, r2
 80014e8:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	4a50      	ldr	r2, [pc, #320]	@ (8001634 <HAL_ADC_Init+0x340>)
 80014f2:	4013      	ands	r3, r2
 80014f4:	0019      	movs	r1, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	23c0      	movs	r3, #192	@ 0xc0
 8001506:	061b      	lsls	r3, r3, #24
 8001508:	429a      	cmp	r2, r3
 800150a:	d018      	beq.n	800153e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001510:	2380      	movs	r3, #128	@ 0x80
 8001512:	05db      	lsls	r3, r3, #23
 8001514:	429a      	cmp	r2, r3
 8001516:	d012      	beq.n	800153e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800151c:	2380      	movs	r3, #128	@ 0x80
 800151e:	061b      	lsls	r3, r3, #24
 8001520:	429a      	cmp	r2, r3
 8001522:	d00c      	beq.n	800153e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001524:	4b44      	ldr	r3, [pc, #272]	@ (8001638 <HAL_ADC_Init+0x344>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a44      	ldr	r2, [pc, #272]	@ (800163c <HAL_ADC_Init+0x348>)
 800152a:	4013      	ands	r3, r2
 800152c:	0019      	movs	r1, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685a      	ldr	r2, [r3, #4]
 8001532:	23f0      	movs	r3, #240	@ 0xf0
 8001534:	039b      	lsls	r3, r3, #14
 8001536:	401a      	ands	r2, r3
 8001538:	4b3f      	ldr	r3, [pc, #252]	@ (8001638 <HAL_ADC_Init+0x344>)
 800153a:	430a      	orrs	r2, r1
 800153c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6818      	ldr	r0, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001546:	001a      	movs	r2, r3
 8001548:	2100      	movs	r1, #0
 800154a:	f7ff fdbe 	bl	80010ca <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6818      	ldr	r0, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001556:	493a      	ldr	r1, [pc, #232]	@ (8001640 <HAL_ADC_Init+0x34c>)
 8001558:	001a      	movs	r2, r3
 800155a:	f7ff fdb6 	bl	80010ca <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d109      	bne.n	800157a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2110      	movs	r1, #16
 8001572:	4249      	negs	r1, r1
 8001574:	430a      	orrs	r2, r1
 8001576:	629a      	str	r2, [r3, #40]	@ 0x28
 8001578:	e018      	b.n	80015ac <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	691a      	ldr	r2, [r3, #16]
 800157e:	2380      	movs	r3, #128	@ 0x80
 8001580:	039b      	lsls	r3, r3, #14
 8001582:	429a      	cmp	r2, r3
 8001584:	d112      	bne.n	80015ac <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	3b01      	subs	r3, #1
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	221c      	movs	r2, #28
 8001596:	4013      	ands	r3, r2
 8001598:	2210      	movs	r2, #16
 800159a:	4252      	negs	r2, r2
 800159c:	409a      	lsls	r2, r3
 800159e:	0011      	movs	r1, r2
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2100      	movs	r1, #0
 80015b2:	0018      	movs	r0, r3
 80015b4:	f7ff fda6 	bl	8001104 <LL_ADC_GetSamplingTimeCommonChannels>
 80015b8:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80015be:	429a      	cmp	r2, r3
 80015c0:	d10b      	bne.n	80015da <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015cc:	2203      	movs	r2, #3
 80015ce:	4393      	bics	r3, r2
 80015d0:	2201      	movs	r2, #1
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80015d8:	e01c      	b.n	8001614 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015de:	2212      	movs	r2, #18
 80015e0:	4393      	bics	r3, r2
 80015e2:	2210      	movs	r2, #16
 80015e4:	431a      	orrs	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ee:	2201      	movs	r2, #1
 80015f0:	431a      	orrs	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80015f6:	231f      	movs	r3, #31
 80015f8:	18fb      	adds	r3, r7, r3
 80015fa:	2201      	movs	r2, #1
 80015fc:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80015fe:	e009      	b.n	8001614 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001604:	2210      	movs	r2, #16
 8001606:	431a      	orrs	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800160c:	231f      	movs	r3, #31
 800160e:	18fb      	adds	r3, r7, r3
 8001610:	2201      	movs	r2, #1
 8001612:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001614:	231f      	movs	r3, #31
 8001616:	18fb      	adds	r3, r7, r3
 8001618:	781b      	ldrb	r3, [r3, #0]
}
 800161a:	0018      	movs	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	b008      	add	sp, #32
 8001620:	bd80      	pop	{r7, pc}
 8001622:	46c0      	nop			@ (mov r8, r8)
 8001624:	20000000 	.word	0x20000000
 8001628:	00030d40 	.word	0x00030d40
 800162c:	fffffefd 	.word	0xfffffefd
 8001630:	ffde0201 	.word	0xffde0201
 8001634:	1ffffc02 	.word	0x1ffffc02
 8001638:	40012708 	.word	0x40012708
 800163c:	ffc3ffff 	.word	0xffc3ffff
 8001640:	07ffff04 	.word	0x07ffff04

08001644 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001644:	b5b0      	push	{r4, r5, r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	0018      	movs	r0, r3
 8001652:	f7ff fe3d 	bl	80012d0 <LL_ADC_REG_IsConversionOngoing>
 8001656:	1e03      	subs	r3, r0, #0
 8001658:	d135      	bne.n	80016c6 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2254      	movs	r2, #84	@ 0x54
 800165e:	5c9b      	ldrb	r3, [r3, r2]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d101      	bne.n	8001668 <HAL_ADC_Start+0x24>
 8001664:	2302      	movs	r3, #2
 8001666:	e035      	b.n	80016d4 <HAL_ADC_Start+0x90>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2254      	movs	r2, #84	@ 0x54
 800166c:	2101      	movs	r1, #1
 800166e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001670:	250f      	movs	r5, #15
 8001672:	197c      	adds	r4, r7, r5
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	0018      	movs	r0, r3
 8001678:	f000 faaa 	bl	8001bd0 <ADC_Enable>
 800167c:	0003      	movs	r3, r0
 800167e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001680:	197b      	adds	r3, r7, r5
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d119      	bne.n	80016bc <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168c:	4a13      	ldr	r2, [pc, #76]	@ (80016dc <HAL_ADC_Start+0x98>)
 800168e:	4013      	ands	r3, r2
 8001690:	2280      	movs	r2, #128	@ 0x80
 8001692:	0052      	lsls	r2, r2, #1
 8001694:	431a      	orrs	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	221c      	movs	r2, #28
 80016a6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2254      	movs	r2, #84	@ 0x54
 80016ac:	2100      	movs	r1, #0
 80016ae:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	0018      	movs	r0, r3
 80016b6:	f7ff fdf9 	bl	80012ac <LL_ADC_REG_StartConversion>
 80016ba:	e008      	b.n	80016ce <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2254      	movs	r2, #84	@ 0x54
 80016c0:	2100      	movs	r1, #0
 80016c2:	5499      	strb	r1, [r3, r2]
 80016c4:	e003      	b.n	80016ce <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016c6:	230f      	movs	r3, #15
 80016c8:	18fb      	adds	r3, r7, r3
 80016ca:	2202      	movs	r2, #2
 80016cc:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80016ce:	230f      	movs	r3, #15
 80016d0:	18fb      	adds	r3, r7, r3
 80016d2:	781b      	ldrb	r3, [r3, #0]
}
 80016d4:	0018      	movs	r0, r3
 80016d6:	46bd      	mov	sp, r7
 80016d8:	b004      	add	sp, #16
 80016da:	bdb0      	pop	{r4, r5, r7, pc}
 80016dc:	fffff0fe 	.word	0xfffff0fe

080016e0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	2b08      	cmp	r3, #8
 80016f0:	d102      	bne.n	80016f8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80016f2:	2308      	movs	r3, #8
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	e00f      	b.n	8001718 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	2201      	movs	r2, #1
 8001700:	4013      	ands	r3, r2
 8001702:	d007      	beq.n	8001714 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001708:	2220      	movs	r2, #32
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e072      	b.n	80017fa <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8001714:	2304      	movs	r3, #4
 8001716:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001718:	f7ff fc88 	bl	800102c <HAL_GetTick>
 800171c:	0003      	movs	r3, r0
 800171e:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001720:	e01f      	b.n	8001762 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	3301      	adds	r3, #1
 8001726:	d01c      	beq.n	8001762 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001728:	f7ff fc80 	bl	800102c <HAL_GetTick>
 800172c:	0002      	movs	r2, r0
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	429a      	cmp	r2, r3
 8001736:	d302      	bcc.n	800173e <HAL_ADC_PollForConversion+0x5e>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d111      	bne.n	8001762 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	4013      	ands	r3, r2
 8001748:	d10b      	bne.n	8001762 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174e:	2204      	movs	r2, #4
 8001750:	431a      	orrs	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2254      	movs	r2, #84	@ 0x54
 800175a:	2100      	movs	r1, #0
 800175c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e04b      	b.n	80017fa <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	4013      	ands	r3, r2
 800176c:	d0d9      	beq.n	8001722 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001772:	2280      	movs	r2, #128	@ 0x80
 8001774:	0092      	lsls	r2, r2, #2
 8001776:	431a      	orrs	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	0018      	movs	r0, r3
 8001782:	f7ff fcd6 	bl	8001132 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001786:	1e03      	subs	r3, r0, #0
 8001788:	d02e      	beq.n	80017e8 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	7e9b      	ldrb	r3, [r3, #26]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d12a      	bne.n	80017e8 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2208      	movs	r2, #8
 800179a:	4013      	ands	r3, r2
 800179c:	2b08      	cmp	r3, #8
 800179e:	d123      	bne.n	80017e8 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	0018      	movs	r0, r3
 80017a6:	f7ff fd93 	bl	80012d0 <LL_ADC_REG_IsConversionOngoing>
 80017aa:	1e03      	subs	r3, r0, #0
 80017ac:	d110      	bne.n	80017d0 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	210c      	movs	r1, #12
 80017ba:	438a      	bics	r2, r1
 80017bc:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c2:	4a10      	ldr	r2, [pc, #64]	@ (8001804 <HAL_ADC_PollForConversion+0x124>)
 80017c4:	4013      	ands	r3, r2
 80017c6:	2201      	movs	r2, #1
 80017c8:	431a      	orrs	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	659a      	str	r2, [r3, #88]	@ 0x58
 80017ce:	e00b      	b.n	80017e8 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d4:	2220      	movs	r2, #32
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017e0:	2201      	movs	r2, #1
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	7e1b      	ldrb	r3, [r3, #24]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d103      	bne.n	80017f8 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	220c      	movs	r2, #12
 80017f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	0018      	movs	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	b004      	add	sp, #16
 8001800:	bd80      	pop	{r7, pc}
 8001802:	46c0      	nop			@ (mov r8, r8)
 8001804:	fffffefe 	.word	0xfffffefe

08001808 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001816:	0018      	movs	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	b002      	add	sp, #8
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800182a:	2317      	movs	r3, #23
 800182c:	18fb      	adds	r3, r7, r3
 800182e:	2200      	movs	r2, #0
 8001830:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2254      	movs	r2, #84	@ 0x54
 800183a:	5c9b      	ldrb	r3, [r3, r2]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d101      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x24>
 8001840:	2302      	movs	r3, #2
 8001842:	e1c0      	b.n	8001bc6 <HAL_ADC_ConfigChannel+0x3a6>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2254      	movs	r2, #84	@ 0x54
 8001848:	2101      	movs	r1, #1
 800184a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	0018      	movs	r0, r3
 8001852:	f7ff fd3d 	bl	80012d0 <LL_ADC_REG_IsConversionOngoing>
 8001856:	1e03      	subs	r3, r0, #0
 8001858:	d000      	beq.n	800185c <HAL_ADC_ConfigChannel+0x3c>
 800185a:	e1a3      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b02      	cmp	r3, #2
 8001862:	d100      	bne.n	8001866 <HAL_ADC_ConfigChannel+0x46>
 8001864:	e143      	b.n	8001aee <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691a      	ldr	r2, [r3, #16]
 800186a:	2380      	movs	r3, #128	@ 0x80
 800186c:	061b      	lsls	r3, r3, #24
 800186e:	429a      	cmp	r2, r3
 8001870:	d004      	beq.n	800187c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001876:	4ac1      	ldr	r2, [pc, #772]	@ (8001b7c <HAL_ADC_ConfigChannel+0x35c>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d108      	bne.n	800188e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	0019      	movs	r1, r3
 8001886:	0010      	movs	r0, r2
 8001888:	f7ff fc84 	bl	8001194 <LL_ADC_REG_SetSequencerChAdd>
 800188c:	e0c9      	b.n	8001a22 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	211f      	movs	r1, #31
 8001898:	400b      	ands	r3, r1
 800189a:	210f      	movs	r1, #15
 800189c:	4099      	lsls	r1, r3
 800189e:	000b      	movs	r3, r1
 80018a0:	43db      	mvns	r3, r3
 80018a2:	4013      	ands	r3, r2
 80018a4:	0019      	movs	r1, r3
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	035b      	lsls	r3, r3, #13
 80018ac:	0b5b      	lsrs	r3, r3, #13
 80018ae:	d105      	bne.n	80018bc <HAL_ADC_ConfigChannel+0x9c>
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	0e9b      	lsrs	r3, r3, #26
 80018b6:	221f      	movs	r2, #31
 80018b8:	4013      	ands	r3, r2
 80018ba:	e098      	b.n	80019ee <HAL_ADC_ConfigChannel+0x1ce>
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2201      	movs	r2, #1
 80018c2:	4013      	ands	r3, r2
 80018c4:	d000      	beq.n	80018c8 <HAL_ADC_ConfigChannel+0xa8>
 80018c6:	e091      	b.n	80019ec <HAL_ADC_ConfigChannel+0x1cc>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2202      	movs	r2, #2
 80018ce:	4013      	ands	r3, r2
 80018d0:	d000      	beq.n	80018d4 <HAL_ADC_ConfigChannel+0xb4>
 80018d2:	e089      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x1c8>
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2204      	movs	r2, #4
 80018da:	4013      	ands	r3, r2
 80018dc:	d000      	beq.n	80018e0 <HAL_ADC_ConfigChannel+0xc0>
 80018de:	e081      	b.n	80019e4 <HAL_ADC_ConfigChannel+0x1c4>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2208      	movs	r2, #8
 80018e6:	4013      	ands	r3, r2
 80018e8:	d000      	beq.n	80018ec <HAL_ADC_ConfigChannel+0xcc>
 80018ea:	e079      	b.n	80019e0 <HAL_ADC_ConfigChannel+0x1c0>
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2210      	movs	r2, #16
 80018f2:	4013      	ands	r3, r2
 80018f4:	d000      	beq.n	80018f8 <HAL_ADC_ConfigChannel+0xd8>
 80018f6:	e071      	b.n	80019dc <HAL_ADC_ConfigChannel+0x1bc>
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2220      	movs	r2, #32
 80018fe:	4013      	ands	r3, r2
 8001900:	d000      	beq.n	8001904 <HAL_ADC_ConfigChannel+0xe4>
 8001902:	e069      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x1b8>
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2240      	movs	r2, #64	@ 0x40
 800190a:	4013      	ands	r3, r2
 800190c:	d000      	beq.n	8001910 <HAL_ADC_ConfigChannel+0xf0>
 800190e:	e061      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x1b4>
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2280      	movs	r2, #128	@ 0x80
 8001916:	4013      	ands	r3, r2
 8001918:	d000      	beq.n	800191c <HAL_ADC_ConfigChannel+0xfc>
 800191a:	e059      	b.n	80019d0 <HAL_ADC_ConfigChannel+0x1b0>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	2380      	movs	r3, #128	@ 0x80
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	4013      	ands	r3, r2
 8001926:	d151      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x1ac>
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	2380      	movs	r3, #128	@ 0x80
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4013      	ands	r3, r2
 8001932:	d149      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x1a8>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	2380      	movs	r3, #128	@ 0x80
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	4013      	ands	r3, r2
 800193e:	d141      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x1a4>
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	2380      	movs	r3, #128	@ 0x80
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	4013      	ands	r3, r2
 800194a:	d139      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x1a0>
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	2380      	movs	r3, #128	@ 0x80
 8001952:	015b      	lsls	r3, r3, #5
 8001954:	4013      	ands	r3, r2
 8001956:	d131      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x19c>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	2380      	movs	r3, #128	@ 0x80
 800195e:	019b      	lsls	r3, r3, #6
 8001960:	4013      	ands	r3, r2
 8001962:	d129      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x198>
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	2380      	movs	r3, #128	@ 0x80
 800196a:	01db      	lsls	r3, r3, #7
 800196c:	4013      	ands	r3, r2
 800196e:	d121      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x194>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	2380      	movs	r3, #128	@ 0x80
 8001976:	021b      	lsls	r3, r3, #8
 8001978:	4013      	ands	r3, r2
 800197a:	d119      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x190>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	2380      	movs	r3, #128	@ 0x80
 8001982:	025b      	lsls	r3, r3, #9
 8001984:	4013      	ands	r3, r2
 8001986:	d111      	bne.n	80019ac <HAL_ADC_ConfigChannel+0x18c>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	2380      	movs	r3, #128	@ 0x80
 800198e:	029b      	lsls	r3, r3, #10
 8001990:	4013      	ands	r3, r2
 8001992:	d109      	bne.n	80019a8 <HAL_ADC_ConfigChannel+0x188>
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	2380      	movs	r3, #128	@ 0x80
 800199a:	02db      	lsls	r3, r3, #11
 800199c:	4013      	ands	r3, r2
 800199e:	d001      	beq.n	80019a4 <HAL_ADC_ConfigChannel+0x184>
 80019a0:	2312      	movs	r3, #18
 80019a2:	e024      	b.n	80019ee <HAL_ADC_ConfigChannel+0x1ce>
 80019a4:	2300      	movs	r3, #0
 80019a6:	e022      	b.n	80019ee <HAL_ADC_ConfigChannel+0x1ce>
 80019a8:	2311      	movs	r3, #17
 80019aa:	e020      	b.n	80019ee <HAL_ADC_ConfigChannel+0x1ce>
 80019ac:	2310      	movs	r3, #16
 80019ae:	e01e      	b.n	80019ee <HAL_ADC_ConfigChannel+0x1ce>
 80019b0:	230f      	movs	r3, #15
 80019b2:	e01c      	b.n	80019ee <HAL_ADC_ConfigChannel+0x1ce>
 80019b4:	230e      	movs	r3, #14
 80019b6:	e01a      	b.n	80019ee <HAL_ADC_ConfigChannel+0x1ce>
 80019b8:	230d      	movs	r3, #13
 80019ba:	e018      	b.n	80019ee <HAL_ADC_ConfigChannel+0x1ce>
 80019bc:	230c      	movs	r3, #12
 80019be:	e016      	b.n	80019ee <HAL_ADC_ConfigChannel+0x1ce>
 80019c0:	230b      	movs	r3, #11
 80019c2:	e014      	b.n	80019ee <HAL_ADC_ConfigChannel+0x1ce>
 80019c4:	230a      	movs	r3, #10
 80019c6:	e012      	b.n	80019ee <HAL_ADC_ConfigChannel+0x1ce>
 80019c8:	2309      	movs	r3, #9
 80019ca:	e010      	b.n	80019ee <HAL_ADC_ConfigChannel+0x1ce>
 80019cc:	2308      	movs	r3, #8
 80019ce:	e00e      	b.n	80019ee <HAL_ADC_ConfigChannel+0x1ce>
 80019d0:	2307      	movs	r3, #7
 80019d2:	e00c      	b.n	80019ee <HAL_ADC_ConfigChannel+0x1ce>
 80019d4:	2306      	movs	r3, #6
 80019d6:	e00a      	b.n	80019ee <HAL_ADC_ConfigChannel+0x1ce>
 80019d8:	2305      	movs	r3, #5
 80019da:	e008      	b.n	80019ee <HAL_ADC_ConfigChannel+0x1ce>
 80019dc:	2304      	movs	r3, #4
 80019de:	e006      	b.n	80019ee <HAL_ADC_ConfigChannel+0x1ce>
 80019e0:	2303      	movs	r3, #3
 80019e2:	e004      	b.n	80019ee <HAL_ADC_ConfigChannel+0x1ce>
 80019e4:	2302      	movs	r3, #2
 80019e6:	e002      	b.n	80019ee <HAL_ADC_ConfigChannel+0x1ce>
 80019e8:	2301      	movs	r3, #1
 80019ea:	e000      	b.n	80019ee <HAL_ADC_ConfigChannel+0x1ce>
 80019ec:	2300      	movs	r3, #0
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	6852      	ldr	r2, [r2, #4]
 80019f2:	201f      	movs	r0, #31
 80019f4:	4002      	ands	r2, r0
 80019f6:	4093      	lsls	r3, r2
 80019f8:	000a      	movs	r2, r1
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	089b      	lsrs	r3, r3, #2
 8001a06:	1c5a      	adds	r2, r3, #1
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d808      	bhi.n	8001a22 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6818      	ldr	r0, [r3, #0]
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	6859      	ldr	r1, [r3, #4]
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	001a      	movs	r2, r3
 8001a1e:	f7ff fb99 	bl	8001154 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6818      	ldr	r0, [r3, #0]
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	6819      	ldr	r1, [r3, #0]
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	001a      	movs	r2, r3
 8001a30:	f7ff fbd4 	bl	80011dc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	db00      	blt.n	8001a3e <HAL_ADC_ConfigChannel+0x21e>
 8001a3c:	e0bc      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a3e:	4b50      	ldr	r3, [pc, #320]	@ (8001b80 <HAL_ADC_ConfigChannel+0x360>)
 8001a40:	0018      	movs	r0, r3
 8001a42:	f7ff fb35 	bl	80010b0 <LL_ADC_GetCommonPathInternalCh>
 8001a46:	0003      	movs	r3, r0
 8001a48:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a4d      	ldr	r2, [pc, #308]	@ (8001b84 <HAL_ADC_ConfigChannel+0x364>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d122      	bne.n	8001a9a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	2380      	movs	r3, #128	@ 0x80
 8001a58:	041b      	lsls	r3, r3, #16
 8001a5a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a5c:	d11d      	bne.n	8001a9a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	2280      	movs	r2, #128	@ 0x80
 8001a62:	0412      	lsls	r2, r2, #16
 8001a64:	4313      	orrs	r3, r2
 8001a66:	4a46      	ldr	r2, [pc, #280]	@ (8001b80 <HAL_ADC_ConfigChannel+0x360>)
 8001a68:	0019      	movs	r1, r3
 8001a6a:	0010      	movs	r0, r2
 8001a6c:	f7ff fb0c 	bl	8001088 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a70:	4b45      	ldr	r3, [pc, #276]	@ (8001b88 <HAL_ADC_ConfigChannel+0x368>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4945      	ldr	r1, [pc, #276]	@ (8001b8c <HAL_ADC_ConfigChannel+0x36c>)
 8001a76:	0018      	movs	r0, r3
 8001a78:	f7fe fb54 	bl	8000124 <__udivsi3>
 8001a7c:	0003      	movs	r3, r0
 8001a7e:	1c5a      	adds	r2, r3, #1
 8001a80:	0013      	movs	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	189b      	adds	r3, r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001a8a:	e002      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1f9      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a98:	e08e      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a3c      	ldr	r2, [pc, #240]	@ (8001b90 <HAL_ADC_ConfigChannel+0x370>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d10e      	bne.n	8001ac2 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	2380      	movs	r3, #128	@ 0x80
 8001aa8:	045b      	lsls	r3, r3, #17
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d109      	bne.n	8001ac2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	2280      	movs	r2, #128	@ 0x80
 8001ab2:	0452      	lsls	r2, r2, #17
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	4a32      	ldr	r2, [pc, #200]	@ (8001b80 <HAL_ADC_ConfigChannel+0x360>)
 8001ab8:	0019      	movs	r1, r3
 8001aba:	0010      	movs	r0, r2
 8001abc:	f7ff fae4 	bl	8001088 <LL_ADC_SetCommonPathInternalCh>
 8001ac0:	e07a      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a33      	ldr	r2, [pc, #204]	@ (8001b94 <HAL_ADC_ConfigChannel+0x374>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d000      	beq.n	8001ace <HAL_ADC_ConfigChannel+0x2ae>
 8001acc:	e074      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	2380      	movs	r3, #128	@ 0x80
 8001ad2:	03db      	lsls	r3, r3, #15
 8001ad4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001ad6:	d000      	beq.n	8001ada <HAL_ADC_ConfigChannel+0x2ba>
 8001ad8:	e06e      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	2280      	movs	r2, #128	@ 0x80
 8001ade:	03d2      	lsls	r2, r2, #15
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	4a27      	ldr	r2, [pc, #156]	@ (8001b80 <HAL_ADC_ConfigChannel+0x360>)
 8001ae4:	0019      	movs	r1, r3
 8001ae6:	0010      	movs	r0, r2
 8001ae8:	f7ff face 	bl	8001088 <LL_ADC_SetCommonPathInternalCh>
 8001aec:	e064      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	691a      	ldr	r2, [r3, #16]
 8001af2:	2380      	movs	r3, #128	@ 0x80
 8001af4:	061b      	lsls	r3, r3, #24
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d004      	beq.n	8001b04 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001afe:	4a1f      	ldr	r2, [pc, #124]	@ (8001b7c <HAL_ADC_ConfigChannel+0x35c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d107      	bne.n	8001b14 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	0019      	movs	r1, r3
 8001b0e:	0010      	movs	r0, r2
 8001b10:	f7ff fb51 	bl	80011b6 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	da4d      	bge.n	8001bb8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b1c:	4b18      	ldr	r3, [pc, #96]	@ (8001b80 <HAL_ADC_ConfigChannel+0x360>)
 8001b1e:	0018      	movs	r0, r3
 8001b20:	f7ff fac6 	bl	80010b0 <LL_ADC_GetCommonPathInternalCh>
 8001b24:	0003      	movs	r3, r0
 8001b26:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a15      	ldr	r2, [pc, #84]	@ (8001b84 <HAL_ADC_ConfigChannel+0x364>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d108      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	4a18      	ldr	r2, [pc, #96]	@ (8001b98 <HAL_ADC_ConfigChannel+0x378>)
 8001b36:	4013      	ands	r3, r2
 8001b38:	4a11      	ldr	r2, [pc, #68]	@ (8001b80 <HAL_ADC_ConfigChannel+0x360>)
 8001b3a:	0019      	movs	r1, r3
 8001b3c:	0010      	movs	r0, r2
 8001b3e:	f7ff faa3 	bl	8001088 <LL_ADC_SetCommonPathInternalCh>
 8001b42:	e039      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a11      	ldr	r2, [pc, #68]	@ (8001b90 <HAL_ADC_ConfigChannel+0x370>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d108      	bne.n	8001b60 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4a12      	ldr	r2, [pc, #72]	@ (8001b9c <HAL_ADC_ConfigChannel+0x37c>)
 8001b52:	4013      	ands	r3, r2
 8001b54:	4a0a      	ldr	r2, [pc, #40]	@ (8001b80 <HAL_ADC_ConfigChannel+0x360>)
 8001b56:	0019      	movs	r1, r3
 8001b58:	0010      	movs	r0, r2
 8001b5a:	f7ff fa95 	bl	8001088 <LL_ADC_SetCommonPathInternalCh>
 8001b5e:	e02b      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0b      	ldr	r2, [pc, #44]	@ (8001b94 <HAL_ADC_ConfigChannel+0x374>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d126      	bne.n	8001bb8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	4a0c      	ldr	r2, [pc, #48]	@ (8001ba0 <HAL_ADC_ConfigChannel+0x380>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	4a03      	ldr	r2, [pc, #12]	@ (8001b80 <HAL_ADC_ConfigChannel+0x360>)
 8001b72:	0019      	movs	r1, r3
 8001b74:	0010      	movs	r0, r2
 8001b76:	f7ff fa87 	bl	8001088 <LL_ADC_SetCommonPathInternalCh>
 8001b7a:	e01d      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x398>
 8001b7c:	80000004 	.word	0x80000004
 8001b80:	40012708 	.word	0x40012708
 8001b84:	b0001000 	.word	0xb0001000
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	00030d40 	.word	0x00030d40
 8001b90:	b8004000 	.word	0xb8004000
 8001b94:	b4002000 	.word	0xb4002000
 8001b98:	ff7fffff 	.word	0xff7fffff
 8001b9c:	feffffff 	.word	0xfeffffff
 8001ba0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba8:	2220      	movs	r2, #32
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001bb0:	2317      	movs	r3, #23
 8001bb2:	18fb      	adds	r3, r7, r3
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2254      	movs	r2, #84	@ 0x54
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001bc0:	2317      	movs	r3, #23
 8001bc2:	18fb      	adds	r3, r7, r3
 8001bc4:	781b      	ldrb	r3, [r3, #0]
}
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b006      	add	sp, #24
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	46c0      	nop			@ (mov r8, r8)

08001bd0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	0018      	movs	r0, r3
 8001be2:	f7ff fb51 	bl	8001288 <LL_ADC_IsEnabled>
 8001be6:	1e03      	subs	r3, r0, #0
 8001be8:	d000      	beq.n	8001bec <ADC_Enable+0x1c>
 8001bea:	e069      	b.n	8001cc0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	4a36      	ldr	r2, [pc, #216]	@ (8001ccc <ADC_Enable+0xfc>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d00d      	beq.n	8001c14 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bfc:	2210      	movs	r2, #16
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c08:	2201      	movs	r2, #1
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e056      	b.n	8001cc2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f7ff fb23 	bl	8001264 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001c1e:	4b2c      	ldr	r3, [pc, #176]	@ (8001cd0 <ADC_Enable+0x100>)
 8001c20:	0018      	movs	r0, r3
 8001c22:	f7ff fa45 	bl	80010b0 <LL_ADC_GetCommonPathInternalCh>
 8001c26:	0002      	movs	r2, r0
 8001c28:	2380      	movs	r3, #128	@ 0x80
 8001c2a:	041b      	lsls	r3, r3, #16
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d00f      	beq.n	8001c50 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c30:	4b28      	ldr	r3, [pc, #160]	@ (8001cd4 <ADC_Enable+0x104>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4928      	ldr	r1, [pc, #160]	@ (8001cd8 <ADC_Enable+0x108>)
 8001c36:	0018      	movs	r0, r3
 8001c38:	f7fe fa74 	bl	8000124 <__udivsi3>
 8001c3c:	0003      	movs	r3, r0
 8001c3e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001c40:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001c42:	e002      	b.n	8001c4a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1f9      	bne.n	8001c44 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	7e5b      	ldrb	r3, [r3, #25]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d033      	beq.n	8001cc0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001c58:	f7ff f9e8 	bl	800102c <HAL_GetTick>
 8001c5c:	0003      	movs	r3, r0
 8001c5e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c60:	e027      	b.n	8001cb2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	0018      	movs	r0, r3
 8001c68:	f7ff fb0e 	bl	8001288 <LL_ADC_IsEnabled>
 8001c6c:	1e03      	subs	r3, r0, #0
 8001c6e:	d104      	bne.n	8001c7a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	0018      	movs	r0, r3
 8001c76:	f7ff faf5 	bl	8001264 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c7a:	f7ff f9d7 	bl	800102c <HAL_GetTick>
 8001c7e:	0002      	movs	r2, r0
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d914      	bls.n	8001cb2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d00d      	beq.n	8001cb2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c9a:	2210      	movs	r2, #16
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e007      	b.n	8001cc2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	4013      	ands	r3, r2
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d1d0      	bne.n	8001c62 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	b004      	add	sp, #16
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	46c0      	nop			@ (mov r8, r8)
 8001ccc:	80000017 	.word	0x80000017
 8001cd0:	40012708 	.word	0x40012708
 8001cd4:	20000000 	.word	0x20000000
 8001cd8:	00030d40 	.word	0x00030d40

08001cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cdc:	b590      	push	{r4, r7, lr}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	0002      	movs	r2, r0
 8001ce4:	6039      	str	r1, [r7, #0]
 8001ce6:	1dfb      	adds	r3, r7, #7
 8001ce8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001cea:	1dfb      	adds	r3, r7, #7
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b7f      	cmp	r3, #127	@ 0x7f
 8001cf0:	d828      	bhi.n	8001d44 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cf2:	4a2f      	ldr	r2, [pc, #188]	@ (8001db0 <__NVIC_SetPriority+0xd4>)
 8001cf4:	1dfb      	adds	r3, r7, #7
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	b25b      	sxtb	r3, r3
 8001cfa:	089b      	lsrs	r3, r3, #2
 8001cfc:	33c0      	adds	r3, #192	@ 0xc0
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	589b      	ldr	r3, [r3, r2]
 8001d02:	1dfa      	adds	r2, r7, #7
 8001d04:	7812      	ldrb	r2, [r2, #0]
 8001d06:	0011      	movs	r1, r2
 8001d08:	2203      	movs	r2, #3
 8001d0a:	400a      	ands	r2, r1
 8001d0c:	00d2      	lsls	r2, r2, #3
 8001d0e:	21ff      	movs	r1, #255	@ 0xff
 8001d10:	4091      	lsls	r1, r2
 8001d12:	000a      	movs	r2, r1
 8001d14:	43d2      	mvns	r2, r2
 8001d16:	401a      	ands	r2, r3
 8001d18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	019b      	lsls	r3, r3, #6
 8001d1e:	22ff      	movs	r2, #255	@ 0xff
 8001d20:	401a      	ands	r2, r3
 8001d22:	1dfb      	adds	r3, r7, #7
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	0018      	movs	r0, r3
 8001d28:	2303      	movs	r3, #3
 8001d2a:	4003      	ands	r3, r0
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d30:	481f      	ldr	r0, [pc, #124]	@ (8001db0 <__NVIC_SetPriority+0xd4>)
 8001d32:	1dfb      	adds	r3, r7, #7
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	b25b      	sxtb	r3, r3
 8001d38:	089b      	lsrs	r3, r3, #2
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	33c0      	adds	r3, #192	@ 0xc0
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d42:	e031      	b.n	8001da8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d44:	4a1b      	ldr	r2, [pc, #108]	@ (8001db4 <__NVIC_SetPriority+0xd8>)
 8001d46:	1dfb      	adds	r3, r7, #7
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	0019      	movs	r1, r3
 8001d4c:	230f      	movs	r3, #15
 8001d4e:	400b      	ands	r3, r1
 8001d50:	3b08      	subs	r3, #8
 8001d52:	089b      	lsrs	r3, r3, #2
 8001d54:	3306      	adds	r3, #6
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	18d3      	adds	r3, r2, r3
 8001d5a:	3304      	adds	r3, #4
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	1dfa      	adds	r2, r7, #7
 8001d60:	7812      	ldrb	r2, [r2, #0]
 8001d62:	0011      	movs	r1, r2
 8001d64:	2203      	movs	r2, #3
 8001d66:	400a      	ands	r2, r1
 8001d68:	00d2      	lsls	r2, r2, #3
 8001d6a:	21ff      	movs	r1, #255	@ 0xff
 8001d6c:	4091      	lsls	r1, r2
 8001d6e:	000a      	movs	r2, r1
 8001d70:	43d2      	mvns	r2, r2
 8001d72:	401a      	ands	r2, r3
 8001d74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	019b      	lsls	r3, r3, #6
 8001d7a:	22ff      	movs	r2, #255	@ 0xff
 8001d7c:	401a      	ands	r2, r3
 8001d7e:	1dfb      	adds	r3, r7, #7
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	0018      	movs	r0, r3
 8001d84:	2303      	movs	r3, #3
 8001d86:	4003      	ands	r3, r0
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d8c:	4809      	ldr	r0, [pc, #36]	@ (8001db4 <__NVIC_SetPriority+0xd8>)
 8001d8e:	1dfb      	adds	r3, r7, #7
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	001c      	movs	r4, r3
 8001d94:	230f      	movs	r3, #15
 8001d96:	4023      	ands	r3, r4
 8001d98:	3b08      	subs	r3, #8
 8001d9a:	089b      	lsrs	r3, r3, #2
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	3306      	adds	r3, #6
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	18c3      	adds	r3, r0, r3
 8001da4:	3304      	adds	r3, #4
 8001da6:	601a      	str	r2, [r3, #0]
}
 8001da8:	46c0      	nop			@ (mov r8, r8)
 8001daa:	46bd      	mov	sp, r7
 8001dac:	b003      	add	sp, #12
 8001dae:	bd90      	pop	{r4, r7, pc}
 8001db0:	e000e100 	.word	0xe000e100
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	1e5a      	subs	r2, r3, #1
 8001dc4:	2380      	movs	r3, #128	@ 0x80
 8001dc6:	045b      	lsls	r3, r3, #17
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d301      	bcc.n	8001dd0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e010      	b.n	8001df2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8001dfc <SysTick_Config+0x44>)
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	3a01      	subs	r2, #1
 8001dd6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dd8:	2301      	movs	r3, #1
 8001dda:	425b      	negs	r3, r3
 8001ddc:	2103      	movs	r1, #3
 8001dde:	0018      	movs	r0, r3
 8001de0:	f7ff ff7c 	bl	8001cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de4:	4b05      	ldr	r3, [pc, #20]	@ (8001dfc <SysTick_Config+0x44>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dea:	4b04      	ldr	r3, [pc, #16]	@ (8001dfc <SysTick_Config+0x44>)
 8001dec:	2207      	movs	r2, #7
 8001dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	0018      	movs	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	b002      	add	sp, #8
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	46c0      	nop			@ (mov r8, r8)
 8001dfc:	e000e010 	.word	0xe000e010

08001e00 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	210f      	movs	r1, #15
 8001e0c:	187b      	adds	r3, r7, r1
 8001e0e:	1c02      	adds	r2, r0, #0
 8001e10:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	187b      	adds	r3, r7, r1
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	b25b      	sxtb	r3, r3
 8001e1a:	0011      	movs	r1, r2
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f7ff ff5d 	bl	8001cdc <__NVIC_SetPriority>
}
 8001e22:	46c0      	nop			@ (mov r8, r8)
 8001e24:	46bd      	mov	sp, r7
 8001e26:	b004      	add	sp, #16
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	0018      	movs	r0, r3
 8001e36:	f7ff ffbf 	bl	8001db8 <SysTick_Config>
 8001e3a:	0003      	movs	r3, r0
}
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	b002      	add	sp, #8
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e52:	e147      	b.n	80020e4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2101      	movs	r1, #1
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	4091      	lsls	r1, r2
 8001e5e:	000a      	movs	r2, r1
 8001e60:	4013      	ands	r3, r2
 8001e62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d100      	bne.n	8001e6c <HAL_GPIO_Init+0x28>
 8001e6a:	e138      	b.n	80020de <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2203      	movs	r2, #3
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d005      	beq.n	8001e84 <HAL_GPIO_Init+0x40>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	4013      	ands	r3, r2
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d130      	bne.n	8001ee6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	2203      	movs	r2, #3
 8001e90:	409a      	lsls	r2, r3
 8001e92:	0013      	movs	r3, r2
 8001e94:	43da      	mvns	r2, r3
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	68da      	ldr	r2, [r3, #12]
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	409a      	lsls	r2, r3
 8001ea6:	0013      	movs	r3, r2
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eba:	2201      	movs	r2, #1
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	409a      	lsls	r2, r3
 8001ec0:	0013      	movs	r3, r2
 8001ec2:	43da      	mvns	r2, r3
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	091b      	lsrs	r3, r3, #4
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	0013      	movs	r3, r2
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2203      	movs	r2, #3
 8001eec:	4013      	ands	r3, r2
 8001eee:	2b03      	cmp	r3, #3
 8001ef0:	d017      	beq.n	8001f22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	2203      	movs	r2, #3
 8001efe:	409a      	lsls	r2, r3
 8001f00:	0013      	movs	r3, r2
 8001f02:	43da      	mvns	r2, r3
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4013      	ands	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	409a      	lsls	r2, r3
 8001f14:	0013      	movs	r3, r2
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2203      	movs	r2, #3
 8001f28:	4013      	ands	r3, r2
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d123      	bne.n	8001f76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	08da      	lsrs	r2, r3, #3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3208      	adds	r2, #8
 8001f36:	0092      	lsls	r2, r2, #2
 8001f38:	58d3      	ldr	r3, [r2, r3]
 8001f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	2207      	movs	r2, #7
 8001f40:	4013      	ands	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	220f      	movs	r2, #15
 8001f46:	409a      	lsls	r2, r3
 8001f48:	0013      	movs	r3, r2
 8001f4a:	43da      	mvns	r2, r3
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	691a      	ldr	r2, [r3, #16]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	2107      	movs	r1, #7
 8001f5a:	400b      	ands	r3, r1
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	409a      	lsls	r2, r3
 8001f60:	0013      	movs	r3, r2
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	08da      	lsrs	r2, r3, #3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3208      	adds	r2, #8
 8001f70:	0092      	lsls	r2, r2, #2
 8001f72:	6939      	ldr	r1, [r7, #16]
 8001f74:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	2203      	movs	r2, #3
 8001f82:	409a      	lsls	r2, r3
 8001f84:	0013      	movs	r3, r2
 8001f86:	43da      	mvns	r2, r3
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2203      	movs	r2, #3
 8001f94:	401a      	ands	r2, r3
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	409a      	lsls	r2, r3
 8001f9c:	0013      	movs	r3, r2
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	23c0      	movs	r3, #192	@ 0xc0
 8001fb0:	029b      	lsls	r3, r3, #10
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d100      	bne.n	8001fb8 <HAL_GPIO_Init+0x174>
 8001fb6:	e092      	b.n	80020de <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001fb8:	4a50      	ldr	r2, [pc, #320]	@ (80020fc <HAL_GPIO_Init+0x2b8>)
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	089b      	lsrs	r3, r3, #2
 8001fbe:	3318      	adds	r3, #24
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	589b      	ldr	r3, [r3, r2]
 8001fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	2203      	movs	r2, #3
 8001fca:	4013      	ands	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	220f      	movs	r2, #15
 8001fd0:	409a      	lsls	r2, r3
 8001fd2:	0013      	movs	r3, r2
 8001fd4:	43da      	mvns	r2, r3
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	23a0      	movs	r3, #160	@ 0xa0
 8001fe0:	05db      	lsls	r3, r3, #23
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d013      	beq.n	800200e <HAL_GPIO_Init+0x1ca>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a45      	ldr	r2, [pc, #276]	@ (8002100 <HAL_GPIO_Init+0x2bc>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d00d      	beq.n	800200a <HAL_GPIO_Init+0x1c6>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a44      	ldr	r2, [pc, #272]	@ (8002104 <HAL_GPIO_Init+0x2c0>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d007      	beq.n	8002006 <HAL_GPIO_Init+0x1c2>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a43      	ldr	r2, [pc, #268]	@ (8002108 <HAL_GPIO_Init+0x2c4>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d101      	bne.n	8002002 <HAL_GPIO_Init+0x1be>
 8001ffe:	2303      	movs	r3, #3
 8002000:	e006      	b.n	8002010 <HAL_GPIO_Init+0x1cc>
 8002002:	2305      	movs	r3, #5
 8002004:	e004      	b.n	8002010 <HAL_GPIO_Init+0x1cc>
 8002006:	2302      	movs	r3, #2
 8002008:	e002      	b.n	8002010 <HAL_GPIO_Init+0x1cc>
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <HAL_GPIO_Init+0x1cc>
 800200e:	2300      	movs	r3, #0
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	2103      	movs	r1, #3
 8002014:	400a      	ands	r2, r1
 8002016:	00d2      	lsls	r2, r2, #3
 8002018:	4093      	lsls	r3, r2
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4313      	orrs	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002020:	4936      	ldr	r1, [pc, #216]	@ (80020fc <HAL_GPIO_Init+0x2b8>)
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	089b      	lsrs	r3, r3, #2
 8002026:	3318      	adds	r3, #24
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800202e:	4b33      	ldr	r3, [pc, #204]	@ (80020fc <HAL_GPIO_Init+0x2b8>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	43da      	mvns	r2, r3
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	4013      	ands	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	2380      	movs	r3, #128	@ 0x80
 8002044:	035b      	lsls	r3, r3, #13
 8002046:	4013      	ands	r3, r2
 8002048:	d003      	beq.n	8002052 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4313      	orrs	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002052:	4b2a      	ldr	r3, [pc, #168]	@ (80020fc <HAL_GPIO_Init+0x2b8>)
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002058:	4b28      	ldr	r3, [pc, #160]	@ (80020fc <HAL_GPIO_Init+0x2b8>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	43da      	mvns	r2, r3
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	4013      	ands	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	2380      	movs	r3, #128	@ 0x80
 800206e:	039b      	lsls	r3, r3, #14
 8002070:	4013      	ands	r3, r2
 8002072:	d003      	beq.n	800207c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4313      	orrs	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800207c:	4b1f      	ldr	r3, [pc, #124]	@ (80020fc <HAL_GPIO_Init+0x2b8>)
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002082:	4a1e      	ldr	r2, [pc, #120]	@ (80020fc <HAL_GPIO_Init+0x2b8>)
 8002084:	2384      	movs	r3, #132	@ 0x84
 8002086:	58d3      	ldr	r3, [r2, r3]
 8002088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	43da      	mvns	r2, r3
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	2380      	movs	r3, #128	@ 0x80
 800209a:	029b      	lsls	r3, r3, #10
 800209c:	4013      	ands	r3, r2
 800209e:	d003      	beq.n	80020a8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020a8:	4914      	ldr	r1, [pc, #80]	@ (80020fc <HAL_GPIO_Init+0x2b8>)
 80020aa:	2284      	movs	r2, #132	@ 0x84
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80020b0:	4a12      	ldr	r2, [pc, #72]	@ (80020fc <HAL_GPIO_Init+0x2b8>)
 80020b2:	2380      	movs	r3, #128	@ 0x80
 80020b4:	58d3      	ldr	r3, [r2, r3]
 80020b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	43da      	mvns	r2, r3
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4013      	ands	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	2380      	movs	r3, #128	@ 0x80
 80020c8:	025b      	lsls	r3, r3, #9
 80020ca:	4013      	ands	r3, r2
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020d6:	4909      	ldr	r1, [pc, #36]	@ (80020fc <HAL_GPIO_Init+0x2b8>)
 80020d8:	2280      	movs	r2, #128	@ 0x80
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	3301      	adds	r3, #1
 80020e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	40da      	lsrs	r2, r3
 80020ec:	1e13      	subs	r3, r2, #0
 80020ee:	d000      	beq.n	80020f2 <HAL_GPIO_Init+0x2ae>
 80020f0:	e6b0      	b.n	8001e54 <HAL_GPIO_Init+0x10>
  }
}
 80020f2:	46c0      	nop			@ (mov r8, r8)
 80020f4:	46c0      	nop			@ (mov r8, r8)
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b006      	add	sp, #24
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40021800 	.word	0x40021800
 8002100:	50000400 	.word	0x50000400
 8002104:	50000800 	.word	0x50000800
 8002108:	50000c00 	.word	0x50000c00

0800210c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	000a      	movs	r2, r1
 8002116:	1cbb      	adds	r3, r7, #2
 8002118:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	1cba      	adds	r2, r7, #2
 8002120:	8812      	ldrh	r2, [r2, #0]
 8002122:	4013      	ands	r3, r2
 8002124:	d004      	beq.n	8002130 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002126:	230f      	movs	r3, #15
 8002128:	18fb      	adds	r3, r7, r3
 800212a:	2201      	movs	r2, #1
 800212c:	701a      	strb	r2, [r3, #0]
 800212e:	e003      	b.n	8002138 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002130:	230f      	movs	r3, #15
 8002132:	18fb      	adds	r3, r7, r3
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002138:	230f      	movs	r3, #15
 800213a:	18fb      	adds	r3, r7, r3
 800213c:	781b      	ldrb	r3, [r3, #0]
}
 800213e:	0018      	movs	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	b004      	add	sp, #16
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002150:	4b19      	ldr	r3, [pc, #100]	@ (80021b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a19      	ldr	r2, [pc, #100]	@ (80021bc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002156:	4013      	ands	r3, r2
 8002158:	0019      	movs	r1, r3
 800215a:	4b17      	ldr	r3, [pc, #92]	@ (80021b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	430a      	orrs	r2, r1
 8002160:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	2380      	movs	r3, #128	@ 0x80
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	429a      	cmp	r2, r3
 800216a:	d11f      	bne.n	80021ac <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800216c:	4b14      	ldr	r3, [pc, #80]	@ (80021c0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	0013      	movs	r3, r2
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	189b      	adds	r3, r3, r2
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	4912      	ldr	r1, [pc, #72]	@ (80021c4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800217a:	0018      	movs	r0, r3
 800217c:	f7fd ffd2 	bl	8000124 <__udivsi3>
 8002180:	0003      	movs	r3, r0
 8002182:	3301      	adds	r3, #1
 8002184:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002186:	e008      	b.n	800219a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	3b01      	subs	r3, #1
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	e001      	b.n	800219a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e009      	b.n	80021ae <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800219a:	4b07      	ldr	r3, [pc, #28]	@ (80021b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800219c:	695a      	ldr	r2, [r3, #20]
 800219e:	2380      	movs	r3, #128	@ 0x80
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	401a      	ands	r2, r3
 80021a4:	2380      	movs	r3, #128	@ 0x80
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d0ed      	beq.n	8002188 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	0018      	movs	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	b004      	add	sp, #16
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	46c0      	nop			@ (mov r8, r8)
 80021b8:	40007000 	.word	0x40007000
 80021bc:	fffff9ff 	.word	0xfffff9ff
 80021c0:	20000000 	.word	0x20000000
 80021c4:	000f4240 	.word	0x000f4240

080021c8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80021cc:	4b03      	ldr	r3, [pc, #12]	@ (80021dc <LL_RCC_GetAPB1Prescaler+0x14>)
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	23e0      	movs	r3, #224	@ 0xe0
 80021d2:	01db      	lsls	r3, r3, #7
 80021d4:	4013      	ands	r3, r2
}
 80021d6:	0018      	movs	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40021000 	.word	0x40021000

080021e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b088      	sub	sp, #32
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e2f3      	b.n	80027da <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2201      	movs	r2, #1
 80021f8:	4013      	ands	r3, r2
 80021fa:	d100      	bne.n	80021fe <HAL_RCC_OscConfig+0x1e>
 80021fc:	e07c      	b.n	80022f8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021fe:	4bc3      	ldr	r3, [pc, #780]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	2238      	movs	r2, #56	@ 0x38
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002208:	4bc0      	ldr	r3, [pc, #768]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	2203      	movs	r2, #3
 800220e:	4013      	ands	r3, r2
 8002210:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	2b10      	cmp	r3, #16
 8002216:	d102      	bne.n	800221e <HAL_RCC_OscConfig+0x3e>
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	2b03      	cmp	r3, #3
 800221c:	d002      	beq.n	8002224 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	2b08      	cmp	r3, #8
 8002222:	d10b      	bne.n	800223c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002224:	4bb9      	ldr	r3, [pc, #740]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	2380      	movs	r3, #128	@ 0x80
 800222a:	029b      	lsls	r3, r3, #10
 800222c:	4013      	ands	r3, r2
 800222e:	d062      	beq.n	80022f6 <HAL_RCC_OscConfig+0x116>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d15e      	bne.n	80022f6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e2ce      	b.n	80027da <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	2380      	movs	r3, #128	@ 0x80
 8002242:	025b      	lsls	r3, r3, #9
 8002244:	429a      	cmp	r2, r3
 8002246:	d107      	bne.n	8002258 <HAL_RCC_OscConfig+0x78>
 8002248:	4bb0      	ldr	r3, [pc, #704]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4baf      	ldr	r3, [pc, #700]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 800224e:	2180      	movs	r1, #128	@ 0x80
 8002250:	0249      	lsls	r1, r1, #9
 8002252:	430a      	orrs	r2, r1
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	e020      	b.n	800229a <HAL_RCC_OscConfig+0xba>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	23a0      	movs	r3, #160	@ 0xa0
 800225e:	02db      	lsls	r3, r3, #11
 8002260:	429a      	cmp	r2, r3
 8002262:	d10e      	bne.n	8002282 <HAL_RCC_OscConfig+0xa2>
 8002264:	4ba9      	ldr	r3, [pc, #676]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	4ba8      	ldr	r3, [pc, #672]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 800226a:	2180      	movs	r1, #128	@ 0x80
 800226c:	02c9      	lsls	r1, r1, #11
 800226e:	430a      	orrs	r2, r1
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	4ba6      	ldr	r3, [pc, #664]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	4ba5      	ldr	r3, [pc, #660]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 8002278:	2180      	movs	r1, #128	@ 0x80
 800227a:	0249      	lsls	r1, r1, #9
 800227c:	430a      	orrs	r2, r1
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	e00b      	b.n	800229a <HAL_RCC_OscConfig+0xba>
 8002282:	4ba2      	ldr	r3, [pc, #648]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	4ba1      	ldr	r3, [pc, #644]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 8002288:	49a1      	ldr	r1, [pc, #644]	@ (8002510 <HAL_RCC_OscConfig+0x330>)
 800228a:	400a      	ands	r2, r1
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	4b9f      	ldr	r3, [pc, #636]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	4b9e      	ldr	r3, [pc, #632]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 8002294:	499f      	ldr	r1, [pc, #636]	@ (8002514 <HAL_RCC_OscConfig+0x334>)
 8002296:	400a      	ands	r2, r1
 8002298:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d014      	beq.n	80022cc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a2:	f7fe fec3 	bl	800102c <HAL_GetTick>
 80022a6:	0003      	movs	r3, r0
 80022a8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022ac:	f7fe febe 	bl	800102c <HAL_GetTick>
 80022b0:	0002      	movs	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b64      	cmp	r3, #100	@ 0x64
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e28d      	b.n	80027da <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022be:	4b93      	ldr	r3, [pc, #588]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	2380      	movs	r3, #128	@ 0x80
 80022c4:	029b      	lsls	r3, r3, #10
 80022c6:	4013      	ands	r3, r2
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0xcc>
 80022ca:	e015      	b.n	80022f8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022cc:	f7fe feae 	bl	800102c <HAL_GetTick>
 80022d0:	0003      	movs	r3, r0
 80022d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d6:	f7fe fea9 	bl	800102c <HAL_GetTick>
 80022da:	0002      	movs	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b64      	cmp	r3, #100	@ 0x64
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e278      	b.n	80027da <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022e8:	4b88      	ldr	r3, [pc, #544]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	2380      	movs	r3, #128	@ 0x80
 80022ee:	029b      	lsls	r3, r3, #10
 80022f0:	4013      	ands	r3, r2
 80022f2:	d1f0      	bne.n	80022d6 <HAL_RCC_OscConfig+0xf6>
 80022f4:	e000      	b.n	80022f8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2202      	movs	r2, #2
 80022fe:	4013      	ands	r3, r2
 8002300:	d100      	bne.n	8002304 <HAL_RCC_OscConfig+0x124>
 8002302:	e099      	b.n	8002438 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002304:	4b81      	ldr	r3, [pc, #516]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	2238      	movs	r2, #56	@ 0x38
 800230a:	4013      	ands	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800230e:	4b7f      	ldr	r3, [pc, #508]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	2203      	movs	r2, #3
 8002314:	4013      	ands	r3, r2
 8002316:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	2b10      	cmp	r3, #16
 800231c:	d102      	bne.n	8002324 <HAL_RCC_OscConfig+0x144>
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2b02      	cmp	r3, #2
 8002322:	d002      	beq.n	800232a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d135      	bne.n	8002396 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800232a:	4b78      	ldr	r3, [pc, #480]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	2380      	movs	r3, #128	@ 0x80
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	4013      	ands	r3, r2
 8002334:	d005      	beq.n	8002342 <HAL_RCC_OscConfig+0x162>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e24b      	b.n	80027da <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002342:	4b72      	ldr	r3, [pc, #456]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	4a74      	ldr	r2, [pc, #464]	@ (8002518 <HAL_RCC_OscConfig+0x338>)
 8002348:	4013      	ands	r3, r2
 800234a:	0019      	movs	r1, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	021a      	lsls	r2, r3, #8
 8002352:	4b6e      	ldr	r3, [pc, #440]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 8002354:	430a      	orrs	r2, r1
 8002356:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d112      	bne.n	8002384 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800235e:	4b6b      	ldr	r3, [pc, #428]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a6e      	ldr	r2, [pc, #440]	@ (800251c <HAL_RCC_OscConfig+0x33c>)
 8002364:	4013      	ands	r3, r2
 8002366:	0019      	movs	r1, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	4b67      	ldr	r3, [pc, #412]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 800236e:	430a      	orrs	r2, r1
 8002370:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002372:	4b66      	ldr	r3, [pc, #408]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	0adb      	lsrs	r3, r3, #11
 8002378:	2207      	movs	r2, #7
 800237a:	4013      	ands	r3, r2
 800237c:	4a68      	ldr	r2, [pc, #416]	@ (8002520 <HAL_RCC_OscConfig+0x340>)
 800237e:	40da      	lsrs	r2, r3
 8002380:	4b68      	ldr	r3, [pc, #416]	@ (8002524 <HAL_RCC_OscConfig+0x344>)
 8002382:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002384:	4b68      	ldr	r3, [pc, #416]	@ (8002528 <HAL_RCC_OscConfig+0x348>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	0018      	movs	r0, r3
 800238a:	f7fe fdf3 	bl	8000f74 <HAL_InitTick>
 800238e:	1e03      	subs	r3, r0, #0
 8002390:	d051      	beq.n	8002436 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e221      	b.n	80027da <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d030      	beq.n	8002400 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800239e:	4b5b      	ldr	r3, [pc, #364]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a5e      	ldr	r2, [pc, #376]	@ (800251c <HAL_RCC_OscConfig+0x33c>)
 80023a4:	4013      	ands	r3, r2
 80023a6:	0019      	movs	r1, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	4b57      	ldr	r3, [pc, #348]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 80023ae:	430a      	orrs	r2, r1
 80023b0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80023b2:	4b56      	ldr	r3, [pc, #344]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	4b55      	ldr	r3, [pc, #340]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 80023b8:	2180      	movs	r1, #128	@ 0x80
 80023ba:	0049      	lsls	r1, r1, #1
 80023bc:	430a      	orrs	r2, r1
 80023be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7fe fe34 	bl	800102c <HAL_GetTick>
 80023c4:	0003      	movs	r3, r0
 80023c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ca:	f7fe fe2f 	bl	800102c <HAL_GetTick>
 80023ce:	0002      	movs	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e1fe      	b.n	80027da <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023dc:	4b4b      	ldr	r3, [pc, #300]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	2380      	movs	r3, #128	@ 0x80
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	4013      	ands	r3, r2
 80023e6:	d0f0      	beq.n	80023ca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e8:	4b48      	ldr	r3, [pc, #288]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	4a4a      	ldr	r2, [pc, #296]	@ (8002518 <HAL_RCC_OscConfig+0x338>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	0019      	movs	r1, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	021a      	lsls	r2, r3, #8
 80023f8:	4b44      	ldr	r3, [pc, #272]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 80023fa:	430a      	orrs	r2, r1
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	e01b      	b.n	8002438 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002400:	4b42      	ldr	r3, [pc, #264]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4b41      	ldr	r3, [pc, #260]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 8002406:	4949      	ldr	r1, [pc, #292]	@ (800252c <HAL_RCC_OscConfig+0x34c>)
 8002408:	400a      	ands	r2, r1
 800240a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240c:	f7fe fe0e 	bl	800102c <HAL_GetTick>
 8002410:	0003      	movs	r3, r0
 8002412:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002416:	f7fe fe09 	bl	800102c <HAL_GetTick>
 800241a:	0002      	movs	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e1d8      	b.n	80027da <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002428:	4b38      	ldr	r3, [pc, #224]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	2380      	movs	r3, #128	@ 0x80
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	4013      	ands	r3, r2
 8002432:	d1f0      	bne.n	8002416 <HAL_RCC_OscConfig+0x236>
 8002434:	e000      	b.n	8002438 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002436:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2208      	movs	r2, #8
 800243e:	4013      	ands	r3, r2
 8002440:	d047      	beq.n	80024d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002442:	4b32      	ldr	r3, [pc, #200]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2238      	movs	r2, #56	@ 0x38
 8002448:	4013      	ands	r3, r2
 800244a:	2b18      	cmp	r3, #24
 800244c:	d10a      	bne.n	8002464 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800244e:	4b2f      	ldr	r3, [pc, #188]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 8002450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002452:	2202      	movs	r2, #2
 8002454:	4013      	ands	r3, r2
 8002456:	d03c      	beq.n	80024d2 <HAL_RCC_OscConfig+0x2f2>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d138      	bne.n	80024d2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e1ba      	b.n	80027da <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d019      	beq.n	80024a0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800246c:	4b27      	ldr	r3, [pc, #156]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 800246e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002470:	4b26      	ldr	r3, [pc, #152]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 8002472:	2101      	movs	r1, #1
 8002474:	430a      	orrs	r2, r1
 8002476:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002478:	f7fe fdd8 	bl	800102c <HAL_GetTick>
 800247c:	0003      	movs	r3, r0
 800247e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002482:	f7fe fdd3 	bl	800102c <HAL_GetTick>
 8002486:	0002      	movs	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e1a2      	b.n	80027da <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002494:	4b1d      	ldr	r3, [pc, #116]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 8002496:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002498:	2202      	movs	r2, #2
 800249a:	4013      	ands	r3, r2
 800249c:	d0f1      	beq.n	8002482 <HAL_RCC_OscConfig+0x2a2>
 800249e:	e018      	b.n	80024d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80024a0:	4b1a      	ldr	r3, [pc, #104]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 80024a2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80024a4:	4b19      	ldr	r3, [pc, #100]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 80024a6:	2101      	movs	r1, #1
 80024a8:	438a      	bics	r2, r1
 80024aa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ac:	f7fe fdbe 	bl	800102c <HAL_GetTick>
 80024b0:	0003      	movs	r3, r0
 80024b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024b6:	f7fe fdb9 	bl	800102c <HAL_GetTick>
 80024ba:	0002      	movs	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e188      	b.n	80027da <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024c8:	4b10      	ldr	r3, [pc, #64]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 80024ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024cc:	2202      	movs	r2, #2
 80024ce:	4013      	ands	r3, r2
 80024d0:	d1f1      	bne.n	80024b6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2204      	movs	r2, #4
 80024d8:	4013      	ands	r3, r2
 80024da:	d100      	bne.n	80024de <HAL_RCC_OscConfig+0x2fe>
 80024dc:	e0c6      	b.n	800266c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024de:	231f      	movs	r3, #31
 80024e0:	18fb      	adds	r3, r7, r3
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80024e6:	4b09      	ldr	r3, [pc, #36]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2238      	movs	r2, #56	@ 0x38
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b20      	cmp	r3, #32
 80024f0:	d11e      	bne.n	8002530 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80024f2:	4b06      	ldr	r3, [pc, #24]	@ (800250c <HAL_RCC_OscConfig+0x32c>)
 80024f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f6:	2202      	movs	r2, #2
 80024f8:	4013      	ands	r3, r2
 80024fa:	d100      	bne.n	80024fe <HAL_RCC_OscConfig+0x31e>
 80024fc:	e0b6      	b.n	800266c <HAL_RCC_OscConfig+0x48c>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d000      	beq.n	8002508 <HAL_RCC_OscConfig+0x328>
 8002506:	e0b1      	b.n	800266c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e166      	b.n	80027da <HAL_RCC_OscConfig+0x5fa>
 800250c:	40021000 	.word	0x40021000
 8002510:	fffeffff 	.word	0xfffeffff
 8002514:	fffbffff 	.word	0xfffbffff
 8002518:	ffff80ff 	.word	0xffff80ff
 800251c:	ffffc7ff 	.word	0xffffc7ff
 8002520:	00f42400 	.word	0x00f42400
 8002524:	20000000 	.word	0x20000000
 8002528:	20000004 	.word	0x20000004
 800252c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002530:	4bac      	ldr	r3, [pc, #688]	@ (80027e4 <HAL_RCC_OscConfig+0x604>)
 8002532:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002534:	2380      	movs	r3, #128	@ 0x80
 8002536:	055b      	lsls	r3, r3, #21
 8002538:	4013      	ands	r3, r2
 800253a:	d101      	bne.n	8002540 <HAL_RCC_OscConfig+0x360>
 800253c:	2301      	movs	r3, #1
 800253e:	e000      	b.n	8002542 <HAL_RCC_OscConfig+0x362>
 8002540:	2300      	movs	r3, #0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d011      	beq.n	800256a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002546:	4ba7      	ldr	r3, [pc, #668]	@ (80027e4 <HAL_RCC_OscConfig+0x604>)
 8002548:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800254a:	4ba6      	ldr	r3, [pc, #664]	@ (80027e4 <HAL_RCC_OscConfig+0x604>)
 800254c:	2180      	movs	r1, #128	@ 0x80
 800254e:	0549      	lsls	r1, r1, #21
 8002550:	430a      	orrs	r2, r1
 8002552:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002554:	4ba3      	ldr	r3, [pc, #652]	@ (80027e4 <HAL_RCC_OscConfig+0x604>)
 8002556:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002558:	2380      	movs	r3, #128	@ 0x80
 800255a:	055b      	lsls	r3, r3, #21
 800255c:	4013      	ands	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002562:	231f      	movs	r3, #31
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	2201      	movs	r2, #1
 8002568:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800256a:	4b9f      	ldr	r3, [pc, #636]	@ (80027e8 <HAL_RCC_OscConfig+0x608>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	2380      	movs	r3, #128	@ 0x80
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	4013      	ands	r3, r2
 8002574:	d11a      	bne.n	80025ac <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002576:	4b9c      	ldr	r3, [pc, #624]	@ (80027e8 <HAL_RCC_OscConfig+0x608>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	4b9b      	ldr	r3, [pc, #620]	@ (80027e8 <HAL_RCC_OscConfig+0x608>)
 800257c:	2180      	movs	r1, #128	@ 0x80
 800257e:	0049      	lsls	r1, r1, #1
 8002580:	430a      	orrs	r2, r1
 8002582:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002584:	f7fe fd52 	bl	800102c <HAL_GetTick>
 8002588:	0003      	movs	r3, r0
 800258a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800258e:	f7fe fd4d 	bl	800102c <HAL_GetTick>
 8002592:	0002      	movs	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e11c      	b.n	80027da <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025a0:	4b91      	ldr	r3, [pc, #580]	@ (80027e8 <HAL_RCC_OscConfig+0x608>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	2380      	movs	r3, #128	@ 0x80
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	4013      	ands	r3, r2
 80025aa:	d0f0      	beq.n	800258e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d106      	bne.n	80025c2 <HAL_RCC_OscConfig+0x3e2>
 80025b4:	4b8b      	ldr	r3, [pc, #556]	@ (80027e4 <HAL_RCC_OscConfig+0x604>)
 80025b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025b8:	4b8a      	ldr	r3, [pc, #552]	@ (80027e4 <HAL_RCC_OscConfig+0x604>)
 80025ba:	2101      	movs	r1, #1
 80025bc:	430a      	orrs	r2, r1
 80025be:	65da      	str	r2, [r3, #92]	@ 0x5c
 80025c0:	e01c      	b.n	80025fc <HAL_RCC_OscConfig+0x41c>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b05      	cmp	r3, #5
 80025c8:	d10c      	bne.n	80025e4 <HAL_RCC_OscConfig+0x404>
 80025ca:	4b86      	ldr	r3, [pc, #536]	@ (80027e4 <HAL_RCC_OscConfig+0x604>)
 80025cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025ce:	4b85      	ldr	r3, [pc, #532]	@ (80027e4 <HAL_RCC_OscConfig+0x604>)
 80025d0:	2104      	movs	r1, #4
 80025d2:	430a      	orrs	r2, r1
 80025d4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80025d6:	4b83      	ldr	r3, [pc, #524]	@ (80027e4 <HAL_RCC_OscConfig+0x604>)
 80025d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025da:	4b82      	ldr	r3, [pc, #520]	@ (80027e4 <HAL_RCC_OscConfig+0x604>)
 80025dc:	2101      	movs	r1, #1
 80025de:	430a      	orrs	r2, r1
 80025e0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80025e2:	e00b      	b.n	80025fc <HAL_RCC_OscConfig+0x41c>
 80025e4:	4b7f      	ldr	r3, [pc, #508]	@ (80027e4 <HAL_RCC_OscConfig+0x604>)
 80025e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025e8:	4b7e      	ldr	r3, [pc, #504]	@ (80027e4 <HAL_RCC_OscConfig+0x604>)
 80025ea:	2101      	movs	r1, #1
 80025ec:	438a      	bics	r2, r1
 80025ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 80025f0:	4b7c      	ldr	r3, [pc, #496]	@ (80027e4 <HAL_RCC_OscConfig+0x604>)
 80025f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025f4:	4b7b      	ldr	r3, [pc, #492]	@ (80027e4 <HAL_RCC_OscConfig+0x604>)
 80025f6:	2104      	movs	r1, #4
 80025f8:	438a      	bics	r2, r1
 80025fa:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d014      	beq.n	800262e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002604:	f7fe fd12 	bl	800102c <HAL_GetTick>
 8002608:	0003      	movs	r3, r0
 800260a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800260c:	e009      	b.n	8002622 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800260e:	f7fe fd0d 	bl	800102c <HAL_GetTick>
 8002612:	0002      	movs	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	4a74      	ldr	r2, [pc, #464]	@ (80027ec <HAL_RCC_OscConfig+0x60c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e0db      	b.n	80027da <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002622:	4b70      	ldr	r3, [pc, #448]	@ (80027e4 <HAL_RCC_OscConfig+0x604>)
 8002624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002626:	2202      	movs	r2, #2
 8002628:	4013      	ands	r3, r2
 800262a:	d0f0      	beq.n	800260e <HAL_RCC_OscConfig+0x42e>
 800262c:	e013      	b.n	8002656 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262e:	f7fe fcfd 	bl	800102c <HAL_GetTick>
 8002632:	0003      	movs	r3, r0
 8002634:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002636:	e009      	b.n	800264c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002638:	f7fe fcf8 	bl	800102c <HAL_GetTick>
 800263c:	0002      	movs	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	4a6a      	ldr	r2, [pc, #424]	@ (80027ec <HAL_RCC_OscConfig+0x60c>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e0c6      	b.n	80027da <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800264c:	4b65      	ldr	r3, [pc, #404]	@ (80027e4 <HAL_RCC_OscConfig+0x604>)
 800264e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002650:	2202      	movs	r2, #2
 8002652:	4013      	ands	r3, r2
 8002654:	d1f0      	bne.n	8002638 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002656:	231f      	movs	r3, #31
 8002658:	18fb      	adds	r3, r7, r3
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d105      	bne.n	800266c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002660:	4b60      	ldr	r3, [pc, #384]	@ (80027e4 <HAL_RCC_OscConfig+0x604>)
 8002662:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002664:	4b5f      	ldr	r3, [pc, #380]	@ (80027e4 <HAL_RCC_OscConfig+0x604>)
 8002666:	4962      	ldr	r1, [pc, #392]	@ (80027f0 <HAL_RCC_OscConfig+0x610>)
 8002668:	400a      	ands	r2, r1
 800266a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d100      	bne.n	8002676 <HAL_RCC_OscConfig+0x496>
 8002674:	e0b0      	b.n	80027d8 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002676:	4b5b      	ldr	r3, [pc, #364]	@ (80027e4 <HAL_RCC_OscConfig+0x604>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2238      	movs	r2, #56	@ 0x38
 800267c:	4013      	ands	r3, r2
 800267e:	2b10      	cmp	r3, #16
 8002680:	d100      	bne.n	8002684 <HAL_RCC_OscConfig+0x4a4>
 8002682:	e078      	b.n	8002776 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	2b02      	cmp	r3, #2
 800268a:	d153      	bne.n	8002734 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800268c:	4b55      	ldr	r3, [pc, #340]	@ (80027e4 <HAL_RCC_OscConfig+0x604>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4b54      	ldr	r3, [pc, #336]	@ (80027e4 <HAL_RCC_OscConfig+0x604>)
 8002692:	4958      	ldr	r1, [pc, #352]	@ (80027f4 <HAL_RCC_OscConfig+0x614>)
 8002694:	400a      	ands	r2, r1
 8002696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002698:	f7fe fcc8 	bl	800102c <HAL_GetTick>
 800269c:	0003      	movs	r3, r0
 800269e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a2:	f7fe fcc3 	bl	800102c <HAL_GetTick>
 80026a6:	0002      	movs	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e092      	b.n	80027da <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026b4:	4b4b      	ldr	r3, [pc, #300]	@ (80027e4 <HAL_RCC_OscConfig+0x604>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	2380      	movs	r3, #128	@ 0x80
 80026ba:	049b      	lsls	r3, r3, #18
 80026bc:	4013      	ands	r3, r2
 80026be:	d1f0      	bne.n	80026a2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026c0:	4b48      	ldr	r3, [pc, #288]	@ (80027e4 <HAL_RCC_OscConfig+0x604>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	4a4c      	ldr	r2, [pc, #304]	@ (80027f8 <HAL_RCC_OscConfig+0x618>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	0019      	movs	r1, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1a      	ldr	r2, [r3, #32]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d8:	021b      	lsls	r3, r3, #8
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e0:	431a      	orrs	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e6:	431a      	orrs	r2, r3
 80026e8:	4b3e      	ldr	r3, [pc, #248]	@ (80027e4 <HAL_RCC_OscConfig+0x604>)
 80026ea:	430a      	orrs	r2, r1
 80026ec:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026ee:	4b3d      	ldr	r3, [pc, #244]	@ (80027e4 <HAL_RCC_OscConfig+0x604>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	4b3c      	ldr	r3, [pc, #240]	@ (80027e4 <HAL_RCC_OscConfig+0x604>)
 80026f4:	2180      	movs	r1, #128	@ 0x80
 80026f6:	0449      	lsls	r1, r1, #17
 80026f8:	430a      	orrs	r2, r1
 80026fa:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80026fc:	4b39      	ldr	r3, [pc, #228]	@ (80027e4 <HAL_RCC_OscConfig+0x604>)
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	4b38      	ldr	r3, [pc, #224]	@ (80027e4 <HAL_RCC_OscConfig+0x604>)
 8002702:	2180      	movs	r1, #128	@ 0x80
 8002704:	0549      	lsls	r1, r1, #21
 8002706:	430a      	orrs	r2, r1
 8002708:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270a:	f7fe fc8f 	bl	800102c <HAL_GetTick>
 800270e:	0003      	movs	r3, r0
 8002710:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002714:	f7fe fc8a 	bl	800102c <HAL_GetTick>
 8002718:	0002      	movs	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e059      	b.n	80027da <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002726:	4b2f      	ldr	r3, [pc, #188]	@ (80027e4 <HAL_RCC_OscConfig+0x604>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	2380      	movs	r3, #128	@ 0x80
 800272c:	049b      	lsls	r3, r3, #18
 800272e:	4013      	ands	r3, r2
 8002730:	d0f0      	beq.n	8002714 <HAL_RCC_OscConfig+0x534>
 8002732:	e051      	b.n	80027d8 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002734:	4b2b      	ldr	r3, [pc, #172]	@ (80027e4 <HAL_RCC_OscConfig+0x604>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	4b2a      	ldr	r3, [pc, #168]	@ (80027e4 <HAL_RCC_OscConfig+0x604>)
 800273a:	492e      	ldr	r1, [pc, #184]	@ (80027f4 <HAL_RCC_OscConfig+0x614>)
 800273c:	400a      	ands	r2, r1
 800273e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002740:	f7fe fc74 	bl	800102c <HAL_GetTick>
 8002744:	0003      	movs	r3, r0
 8002746:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800274a:	f7fe fc6f 	bl	800102c <HAL_GetTick>
 800274e:	0002      	movs	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e03e      	b.n	80027da <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800275c:	4b21      	ldr	r3, [pc, #132]	@ (80027e4 <HAL_RCC_OscConfig+0x604>)
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	2380      	movs	r3, #128	@ 0x80
 8002762:	049b      	lsls	r3, r3, #18
 8002764:	4013      	ands	r3, r2
 8002766:	d1f0      	bne.n	800274a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002768:	4b1e      	ldr	r3, [pc, #120]	@ (80027e4 <HAL_RCC_OscConfig+0x604>)
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	4b1d      	ldr	r3, [pc, #116]	@ (80027e4 <HAL_RCC_OscConfig+0x604>)
 800276e:	4923      	ldr	r1, [pc, #140]	@ (80027fc <HAL_RCC_OscConfig+0x61c>)
 8002770:	400a      	ands	r2, r1
 8002772:	60da      	str	r2, [r3, #12]
 8002774:	e030      	b.n	80027d8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d101      	bne.n	8002782 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e02b      	b.n	80027da <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002782:	4b18      	ldr	r3, [pc, #96]	@ (80027e4 <HAL_RCC_OscConfig+0x604>)
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	2203      	movs	r2, #3
 800278c:	401a      	ands	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	429a      	cmp	r2, r3
 8002794:	d11e      	bne.n	80027d4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	2270      	movs	r2, #112	@ 0x70
 800279a:	401a      	ands	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d117      	bne.n	80027d4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	23fe      	movs	r3, #254	@ 0xfe
 80027a8:	01db      	lsls	r3, r3, #7
 80027aa:	401a      	ands	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d10e      	bne.n	80027d4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	23f8      	movs	r3, #248	@ 0xf8
 80027ba:	039b      	lsls	r3, r3, #14
 80027bc:	401a      	ands	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d106      	bne.n	80027d4 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	0f5b      	lsrs	r3, r3, #29
 80027ca:	075a      	lsls	r2, r3, #29
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d001      	beq.n	80027d8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e000      	b.n	80027da <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	0018      	movs	r0, r3
 80027dc:	46bd      	mov	sp, r7
 80027de:	b008      	add	sp, #32
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	46c0      	nop			@ (mov r8, r8)
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40007000 	.word	0x40007000
 80027ec:	00001388 	.word	0x00001388
 80027f0:	efffffff 	.word	0xefffffff
 80027f4:	feffffff 	.word	0xfeffffff
 80027f8:	1fc1808c 	.word	0x1fc1808c
 80027fc:	effefffc 	.word	0xeffefffc

08002800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0e9      	b.n	80029e8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002814:	4b76      	ldr	r3, [pc, #472]	@ (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2207      	movs	r2, #7
 800281a:	4013      	ands	r3, r2
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d91e      	bls.n	8002860 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002822:	4b73      	ldr	r3, [pc, #460]	@ (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2207      	movs	r2, #7
 8002828:	4393      	bics	r3, r2
 800282a:	0019      	movs	r1, r3
 800282c:	4b70      	ldr	r3, [pc, #448]	@ (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002834:	f7fe fbfa 	bl	800102c <HAL_GetTick>
 8002838:	0003      	movs	r3, r0
 800283a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800283c:	e009      	b.n	8002852 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800283e:	f7fe fbf5 	bl	800102c <HAL_GetTick>
 8002842:	0002      	movs	r2, r0
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	4a6a      	ldr	r2, [pc, #424]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f4>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e0ca      	b.n	80029e8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002852:	4b67      	ldr	r3, [pc, #412]	@ (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2207      	movs	r2, #7
 8002858:	4013      	ands	r3, r2
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d1ee      	bne.n	800283e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2202      	movs	r2, #2
 8002866:	4013      	ands	r3, r2
 8002868:	d015      	beq.n	8002896 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2204      	movs	r2, #4
 8002870:	4013      	ands	r3, r2
 8002872:	d006      	beq.n	8002882 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002874:	4b60      	ldr	r3, [pc, #384]	@ (80029f8 <HAL_RCC_ClockConfig+0x1f8>)
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	4b5f      	ldr	r3, [pc, #380]	@ (80029f8 <HAL_RCC_ClockConfig+0x1f8>)
 800287a:	21e0      	movs	r1, #224	@ 0xe0
 800287c:	01c9      	lsls	r1, r1, #7
 800287e:	430a      	orrs	r2, r1
 8002880:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002882:	4b5d      	ldr	r3, [pc, #372]	@ (80029f8 <HAL_RCC_ClockConfig+0x1f8>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	4a5d      	ldr	r2, [pc, #372]	@ (80029fc <HAL_RCC_ClockConfig+0x1fc>)
 8002888:	4013      	ands	r3, r2
 800288a:	0019      	movs	r1, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	4b59      	ldr	r3, [pc, #356]	@ (80029f8 <HAL_RCC_ClockConfig+0x1f8>)
 8002892:	430a      	orrs	r2, r1
 8002894:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2201      	movs	r2, #1
 800289c:	4013      	ands	r3, r2
 800289e:	d057      	beq.n	8002950 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d107      	bne.n	80028b8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028a8:	4b53      	ldr	r3, [pc, #332]	@ (80029f8 <HAL_RCC_ClockConfig+0x1f8>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	2380      	movs	r3, #128	@ 0x80
 80028ae:	029b      	lsls	r3, r3, #10
 80028b0:	4013      	ands	r3, r2
 80028b2:	d12b      	bne.n	800290c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e097      	b.n	80029e8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d107      	bne.n	80028d0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028c0:	4b4d      	ldr	r3, [pc, #308]	@ (80029f8 <HAL_RCC_ClockConfig+0x1f8>)
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	2380      	movs	r3, #128	@ 0x80
 80028c6:	049b      	lsls	r3, r3, #18
 80028c8:	4013      	ands	r3, r2
 80028ca:	d11f      	bne.n	800290c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e08b      	b.n	80029e8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d107      	bne.n	80028e8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028d8:	4b47      	ldr	r3, [pc, #284]	@ (80029f8 <HAL_RCC_ClockConfig+0x1f8>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	2380      	movs	r3, #128	@ 0x80
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	4013      	ands	r3, r2
 80028e2:	d113      	bne.n	800290c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e07f      	b.n	80029e8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b03      	cmp	r3, #3
 80028ee:	d106      	bne.n	80028fe <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028f0:	4b41      	ldr	r3, [pc, #260]	@ (80029f8 <HAL_RCC_ClockConfig+0x1f8>)
 80028f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028f4:	2202      	movs	r2, #2
 80028f6:	4013      	ands	r3, r2
 80028f8:	d108      	bne.n	800290c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e074      	b.n	80029e8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028fe:	4b3e      	ldr	r3, [pc, #248]	@ (80029f8 <HAL_RCC_ClockConfig+0x1f8>)
 8002900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002902:	2202      	movs	r2, #2
 8002904:	4013      	ands	r3, r2
 8002906:	d101      	bne.n	800290c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e06d      	b.n	80029e8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800290c:	4b3a      	ldr	r3, [pc, #232]	@ (80029f8 <HAL_RCC_ClockConfig+0x1f8>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	2207      	movs	r2, #7
 8002912:	4393      	bics	r3, r2
 8002914:	0019      	movs	r1, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	4b37      	ldr	r3, [pc, #220]	@ (80029f8 <HAL_RCC_ClockConfig+0x1f8>)
 800291c:	430a      	orrs	r2, r1
 800291e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002920:	f7fe fb84 	bl	800102c <HAL_GetTick>
 8002924:	0003      	movs	r3, r0
 8002926:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002928:	e009      	b.n	800293e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800292a:	f7fe fb7f 	bl	800102c <HAL_GetTick>
 800292e:	0002      	movs	r2, r0
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	4a2f      	ldr	r2, [pc, #188]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f4>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d901      	bls.n	800293e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e054      	b.n	80029e8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293e:	4b2e      	ldr	r3, [pc, #184]	@ (80029f8 <HAL_RCC_ClockConfig+0x1f8>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2238      	movs	r2, #56	@ 0x38
 8002944:	401a      	ands	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	429a      	cmp	r2, r3
 800294e:	d1ec      	bne.n	800292a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002950:	4b27      	ldr	r3, [pc, #156]	@ (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2207      	movs	r2, #7
 8002956:	4013      	ands	r3, r2
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	429a      	cmp	r2, r3
 800295c:	d21e      	bcs.n	800299c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295e:	4b24      	ldr	r3, [pc, #144]	@ (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2207      	movs	r2, #7
 8002964:	4393      	bics	r3, r2
 8002966:	0019      	movs	r1, r3
 8002968:	4b21      	ldr	r3, [pc, #132]	@ (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002970:	f7fe fb5c 	bl	800102c <HAL_GetTick>
 8002974:	0003      	movs	r3, r0
 8002976:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002978:	e009      	b.n	800298e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800297a:	f7fe fb57 	bl	800102c <HAL_GetTick>
 800297e:	0002      	movs	r2, r0
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	4a1b      	ldr	r2, [pc, #108]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f4>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d901      	bls.n	800298e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e02c      	b.n	80029e8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800298e:	4b18      	ldr	r3, [pc, #96]	@ (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2207      	movs	r2, #7
 8002994:	4013      	ands	r3, r2
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	429a      	cmp	r2, r3
 800299a:	d1ee      	bne.n	800297a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2204      	movs	r2, #4
 80029a2:	4013      	ands	r3, r2
 80029a4:	d009      	beq.n	80029ba <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80029a6:	4b14      	ldr	r3, [pc, #80]	@ (80029f8 <HAL_RCC_ClockConfig+0x1f8>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	4a15      	ldr	r2, [pc, #84]	@ (8002a00 <HAL_RCC_ClockConfig+0x200>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	0019      	movs	r1, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68da      	ldr	r2, [r3, #12]
 80029b4:	4b10      	ldr	r3, [pc, #64]	@ (80029f8 <HAL_RCC_ClockConfig+0x1f8>)
 80029b6:	430a      	orrs	r2, r1
 80029b8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80029ba:	f000 f829 	bl	8002a10 <HAL_RCC_GetSysClockFreq>
 80029be:	0001      	movs	r1, r0
 80029c0:	4b0d      	ldr	r3, [pc, #52]	@ (80029f8 <HAL_RCC_ClockConfig+0x1f8>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	0a1b      	lsrs	r3, r3, #8
 80029c6:	220f      	movs	r2, #15
 80029c8:	401a      	ands	r2, r3
 80029ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002a04 <HAL_RCC_ClockConfig+0x204>)
 80029cc:	0092      	lsls	r2, r2, #2
 80029ce:	58d3      	ldr	r3, [r2, r3]
 80029d0:	221f      	movs	r2, #31
 80029d2:	4013      	ands	r3, r2
 80029d4:	000a      	movs	r2, r1
 80029d6:	40da      	lsrs	r2, r3
 80029d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002a08 <HAL_RCC_ClockConfig+0x208>)
 80029da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80029dc:	4b0b      	ldr	r3, [pc, #44]	@ (8002a0c <HAL_RCC_ClockConfig+0x20c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	0018      	movs	r0, r3
 80029e2:	f7fe fac7 	bl	8000f74 <HAL_InitTick>
 80029e6:	0003      	movs	r3, r0
}
 80029e8:	0018      	movs	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	b004      	add	sp, #16
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40022000 	.word	0x40022000
 80029f4:	00001388 	.word	0x00001388
 80029f8:	40021000 	.word	0x40021000
 80029fc:	fffff0ff 	.word	0xfffff0ff
 8002a00:	ffff8fff 	.word	0xffff8fff
 8002a04:	08005520 	.word	0x08005520
 8002a08:	20000000 	.word	0x20000000
 8002a0c:	20000004 	.word	0x20000004

08002a10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a16:	4b3c      	ldr	r3, [pc, #240]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	2238      	movs	r2, #56	@ 0x38
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	d10f      	bne.n	8002a40 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002a20:	4b39      	ldr	r3, [pc, #228]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	0adb      	lsrs	r3, r3, #11
 8002a26:	2207      	movs	r2, #7
 8002a28:	4013      	ands	r3, r2
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	409a      	lsls	r2, r3
 8002a2e:	0013      	movs	r3, r2
 8002a30:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002a32:	6839      	ldr	r1, [r7, #0]
 8002a34:	4835      	ldr	r0, [pc, #212]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002a36:	f7fd fb75 	bl	8000124 <__udivsi3>
 8002a3a:	0003      	movs	r3, r0
 8002a3c:	613b      	str	r3, [r7, #16]
 8002a3e:	e05d      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a40:	4b31      	ldr	r3, [pc, #196]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	2238      	movs	r2, #56	@ 0x38
 8002a46:	4013      	ands	r3, r2
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d102      	bne.n	8002a52 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a4c:	4b30      	ldr	r3, [pc, #192]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0x100>)
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	e054      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a52:	4b2d      	ldr	r3, [pc, #180]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2238      	movs	r2, #56	@ 0x38
 8002a58:	4013      	ands	r3, r2
 8002a5a:	2b10      	cmp	r3, #16
 8002a5c:	d138      	bne.n	8002ad0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002a5e:	4b2a      	ldr	r3, [pc, #168]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	2203      	movs	r2, #3
 8002a64:	4013      	ands	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a68:	4b27      	ldr	r3, [pc, #156]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	091b      	lsrs	r3, r3, #4
 8002a6e:	2207      	movs	r2, #7
 8002a70:	4013      	ands	r3, r2
 8002a72:	3301      	adds	r3, #1
 8002a74:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2b03      	cmp	r3, #3
 8002a7a:	d10d      	bne.n	8002a98 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a7c:	68b9      	ldr	r1, [r7, #8]
 8002a7e:	4824      	ldr	r0, [pc, #144]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0x100>)
 8002a80:	f7fd fb50 	bl	8000124 <__udivsi3>
 8002a84:	0003      	movs	r3, r0
 8002a86:	0019      	movs	r1, r3
 8002a88:	4b1f      	ldr	r3, [pc, #124]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	0a1b      	lsrs	r3, r3, #8
 8002a8e:	227f      	movs	r2, #127	@ 0x7f
 8002a90:	4013      	ands	r3, r2
 8002a92:	434b      	muls	r3, r1
 8002a94:	617b      	str	r3, [r7, #20]
        break;
 8002a96:	e00d      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002a98:	68b9      	ldr	r1, [r7, #8]
 8002a9a:	481c      	ldr	r0, [pc, #112]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002a9c:	f7fd fb42 	bl	8000124 <__udivsi3>
 8002aa0:	0003      	movs	r3, r0
 8002aa2:	0019      	movs	r1, r3
 8002aa4:	4b18      	ldr	r3, [pc, #96]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	0a1b      	lsrs	r3, r3, #8
 8002aaa:	227f      	movs	r2, #127	@ 0x7f
 8002aac:	4013      	ands	r3, r2
 8002aae:	434b      	muls	r3, r1
 8002ab0:	617b      	str	r3, [r7, #20]
        break;
 8002ab2:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002ab4:	4b14      	ldr	r3, [pc, #80]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	0f5b      	lsrs	r3, r3, #29
 8002aba:	2207      	movs	r2, #7
 8002abc:	4013      	ands	r3, r2
 8002abe:	3301      	adds	r3, #1
 8002ac0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	6978      	ldr	r0, [r7, #20]
 8002ac6:	f7fd fb2d 	bl	8000124 <__udivsi3>
 8002aca:	0003      	movs	r3, r0
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	e015      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002ad0:	4b0d      	ldr	r3, [pc, #52]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	2238      	movs	r2, #56	@ 0x38
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	2b20      	cmp	r3, #32
 8002ada:	d103      	bne.n	8002ae4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002adc:	2380      	movs	r3, #128	@ 0x80
 8002ade:	021b      	lsls	r3, r3, #8
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	e00b      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002ae4:	4b08      	ldr	r3, [pc, #32]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2238      	movs	r2, #56	@ 0x38
 8002aea:	4013      	ands	r3, r2
 8002aec:	2b18      	cmp	r3, #24
 8002aee:	d103      	bne.n	8002af8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002af0:	23fa      	movs	r3, #250	@ 0xfa
 8002af2:	01db      	lsls	r3, r3, #7
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	e001      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002afc:	693b      	ldr	r3, [r7, #16]
}
 8002afe:	0018      	movs	r0, r3
 8002b00:	46bd      	mov	sp, r7
 8002b02:	b006      	add	sp, #24
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	46c0      	nop			@ (mov r8, r8)
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	00f42400 	.word	0x00f42400
 8002b10:	007a1200 	.word	0x007a1200

08002b14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b18:	4b02      	ldr	r3, [pc, #8]	@ (8002b24 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
}
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	46c0      	nop			@ (mov r8, r8)
 8002b24:	20000000 	.word	0x20000000

08002b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b28:	b5b0      	push	{r4, r5, r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002b2c:	f7ff fff2 	bl	8002b14 <HAL_RCC_GetHCLKFreq>
 8002b30:	0004      	movs	r4, r0
 8002b32:	f7ff fb49 	bl	80021c8 <LL_RCC_GetAPB1Prescaler>
 8002b36:	0003      	movs	r3, r0
 8002b38:	0b1a      	lsrs	r2, r3, #12
 8002b3a:	4b05      	ldr	r3, [pc, #20]	@ (8002b50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b3c:	0092      	lsls	r2, r2, #2
 8002b3e:	58d3      	ldr	r3, [r2, r3]
 8002b40:	221f      	movs	r2, #31
 8002b42:	4013      	ands	r3, r2
 8002b44:	40dc      	lsrs	r4, r3
 8002b46:	0023      	movs	r3, r4
}
 8002b48:	0018      	movs	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b4e:	46c0      	nop			@ (mov r8, r8)
 8002b50:	08005560 	.word	0x08005560

08002b54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002b5c:	2313      	movs	r3, #19
 8002b5e:	18fb      	adds	r3, r7, r3
 8002b60:	2200      	movs	r2, #0
 8002b62:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b64:	2312      	movs	r3, #18
 8002b66:	18fb      	adds	r3, r7, r3
 8002b68:	2200      	movs	r2, #0
 8002b6a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	2380      	movs	r3, #128	@ 0x80
 8002b72:	029b      	lsls	r3, r3, #10
 8002b74:	4013      	ands	r3, r2
 8002b76:	d100      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002b78:	e0a3      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b7a:	2011      	movs	r0, #17
 8002b7c:	183b      	adds	r3, r7, r0
 8002b7e:	2200      	movs	r2, #0
 8002b80:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b82:	4b86      	ldr	r3, [pc, #536]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b86:	2380      	movs	r3, #128	@ 0x80
 8002b88:	055b      	lsls	r3, r3, #21
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d110      	bne.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b8e:	4b83      	ldr	r3, [pc, #524]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b92:	4b82      	ldr	r3, [pc, #520]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b94:	2180      	movs	r1, #128	@ 0x80
 8002b96:	0549      	lsls	r1, r1, #21
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002b9c:	4b7f      	ldr	r3, [pc, #508]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ba0:	2380      	movs	r3, #128	@ 0x80
 8002ba2:	055b      	lsls	r3, r3, #21
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	60bb      	str	r3, [r7, #8]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002baa:	183b      	adds	r3, r7, r0
 8002bac:	2201      	movs	r2, #1
 8002bae:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bb0:	4b7b      	ldr	r3, [pc, #492]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4b7a      	ldr	r3, [pc, #488]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002bb6:	2180      	movs	r1, #128	@ 0x80
 8002bb8:	0049      	lsls	r1, r1, #1
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bbe:	f7fe fa35 	bl	800102c <HAL_GetTick>
 8002bc2:	0003      	movs	r3, r0
 8002bc4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bc6:	e00b      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc8:	f7fe fa30 	bl	800102c <HAL_GetTick>
 8002bcc:	0002      	movs	r2, r0
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d904      	bls.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002bd6:	2313      	movs	r3, #19
 8002bd8:	18fb      	adds	r3, r7, r3
 8002bda:	2203      	movs	r2, #3
 8002bdc:	701a      	strb	r2, [r3, #0]
        break;
 8002bde:	e005      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002be0:	4b6f      	ldr	r3, [pc, #444]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	2380      	movs	r3, #128	@ 0x80
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	4013      	ands	r3, r2
 8002bea:	d0ed      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002bec:	2313      	movs	r3, #19
 8002bee:	18fb      	adds	r3, r7, r3
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d154      	bne.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bf6:	4b69      	ldr	r3, [pc, #420]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002bf8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002bfa:	23c0      	movs	r3, #192	@ 0xc0
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4013      	ands	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d019      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d014      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c12:	4b62      	ldr	r3, [pc, #392]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c16:	4a63      	ldr	r2, [pc, #396]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002c18:	4013      	ands	r3, r2
 8002c1a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c1c:	4b5f      	ldr	r3, [pc, #380]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c1e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c20:	4b5e      	ldr	r3, [pc, #376]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c22:	2180      	movs	r1, #128	@ 0x80
 8002c24:	0249      	lsls	r1, r1, #9
 8002c26:	430a      	orrs	r2, r1
 8002c28:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c2a:	4b5c      	ldr	r3, [pc, #368]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c2c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c2e:	4b5b      	ldr	r3, [pc, #364]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c30:	495d      	ldr	r1, [pc, #372]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c32:	400a      	ands	r2, r1
 8002c34:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c36:	4b59      	ldr	r3, [pc, #356]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	4013      	ands	r3, r2
 8002c42:	d016      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c44:	f7fe f9f2 	bl	800102c <HAL_GetTick>
 8002c48:	0003      	movs	r3, r0
 8002c4a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c4c:	e00c      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c4e:	f7fe f9ed 	bl	800102c <HAL_GetTick>
 8002c52:	0002      	movs	r2, r0
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	4a54      	ldr	r2, [pc, #336]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d904      	bls.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002c5e:	2313      	movs	r3, #19
 8002c60:	18fb      	adds	r3, r7, r3
 8002c62:	2203      	movs	r2, #3
 8002c64:	701a      	strb	r2, [r3, #0]
            break;
 8002c66:	e004      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c68:	4b4c      	ldr	r3, [pc, #304]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d0ed      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002c72:	2313      	movs	r3, #19
 8002c74:	18fb      	adds	r3, r7, r3
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10a      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c7c:	4b47      	ldr	r3, [pc, #284]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c80:	4a48      	ldr	r2, [pc, #288]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002c82:	4013      	ands	r3, r2
 8002c84:	0019      	movs	r1, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699a      	ldr	r2, [r3, #24]
 8002c8a:	4b44      	ldr	r3, [pc, #272]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c90:	e00c      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c92:	2312      	movs	r3, #18
 8002c94:	18fb      	adds	r3, r7, r3
 8002c96:	2213      	movs	r2, #19
 8002c98:	18ba      	adds	r2, r7, r2
 8002c9a:	7812      	ldrb	r2, [r2, #0]
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	e005      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca0:	2312      	movs	r3, #18
 8002ca2:	18fb      	adds	r3, r7, r3
 8002ca4:	2213      	movs	r2, #19
 8002ca6:	18ba      	adds	r2, r7, r2
 8002ca8:	7812      	ldrb	r2, [r2, #0]
 8002caa:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cac:	2311      	movs	r3, #17
 8002cae:	18fb      	adds	r3, r7, r3
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d105      	bne.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb6:	4b39      	ldr	r3, [pc, #228]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002cb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002cba:	4b38      	ldr	r3, [pc, #224]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002cbc:	493c      	ldr	r1, [pc, #240]	@ (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002cbe:	400a      	ands	r2, r1
 8002cc0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d009      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ccc:	4b33      	ldr	r3, [pc, #204]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd0:	2203      	movs	r2, #3
 8002cd2:	4393      	bics	r3, r2
 8002cd4:	0019      	movs	r1, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	4b30      	ldr	r3, [pc, #192]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	d009      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cea:	4b2c      	ldr	r3, [pc, #176]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cee:	220c      	movs	r2, #12
 8002cf0:	4393      	bics	r3, r2
 8002cf2:	0019      	movs	r1, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	4b28      	ldr	r3, [pc, #160]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2220      	movs	r2, #32
 8002d04:	4013      	ands	r3, r2
 8002d06:	d009      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d08:	4b24      	ldr	r3, [pc, #144]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d0c:	4a29      	ldr	r2, [pc, #164]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	0019      	movs	r1, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	4b21      	ldr	r3, [pc, #132]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	2380      	movs	r3, #128	@ 0x80
 8002d22:	01db      	lsls	r3, r3, #7
 8002d24:	4013      	ands	r3, r2
 8002d26:	d015      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d28:	4b1c      	ldr	r3, [pc, #112]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	0899      	lsrs	r1, r3, #2
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	695a      	ldr	r2, [r3, #20]
 8002d34:	4b19      	ldr	r3, [pc, #100]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d36:	430a      	orrs	r2, r1
 8002d38:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695a      	ldr	r2, [r3, #20]
 8002d3e:	2380      	movs	r3, #128	@ 0x80
 8002d40:	05db      	lsls	r3, r3, #23
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d106      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002d46:	4b15      	ldr	r3, [pc, #84]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	4b14      	ldr	r3, [pc, #80]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d4c:	2180      	movs	r1, #128	@ 0x80
 8002d4e:	0249      	lsls	r1, r1, #9
 8002d50:	430a      	orrs	r2, r1
 8002d52:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	2380      	movs	r3, #128	@ 0x80
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	d016      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002d60:	4b0e      	ldr	r3, [pc, #56]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d64:	4a14      	ldr	r2, [pc, #80]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d66:	4013      	ands	r3, r2
 8002d68:	0019      	movs	r1, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691a      	ldr	r2, [r3, #16]
 8002d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d70:	430a      	orrs	r2, r1
 8002d72:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	2380      	movs	r3, #128	@ 0x80
 8002d7a:	01db      	lsls	r3, r3, #7
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d106      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002d80:	4b06      	ldr	r3, [pc, #24]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	4b05      	ldr	r3, [pc, #20]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d86:	2180      	movs	r1, #128	@ 0x80
 8002d88:	0249      	lsls	r1, r1, #9
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002d8e:	2312      	movs	r3, #18
 8002d90:	18fb      	adds	r3, r7, r3
 8002d92:	781b      	ldrb	r3, [r3, #0]
}
 8002d94:	0018      	movs	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	b006      	add	sp, #24
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	40007000 	.word	0x40007000
 8002da4:	fffffcff 	.word	0xfffffcff
 8002da8:	fffeffff 	.word	0xfffeffff
 8002dac:	00001388 	.word	0x00001388
 8002db0:	efffffff 	.word	0xefffffff
 8002db4:	ffffcfff 	.word	0xffffcfff
 8002db8:	ffff3fff 	.word	0xffff3fff

08002dbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e04a      	b.n	8002e64 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	223d      	movs	r2, #61	@ 0x3d
 8002dd2:	5c9b      	ldrb	r3, [r3, r2]
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d107      	bne.n	8002dea <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	223c      	movs	r2, #60	@ 0x3c
 8002dde:	2100      	movs	r1, #0
 8002de0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	0018      	movs	r0, r3
 8002de6:	f7fd fefb 	bl	8000be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	223d      	movs	r2, #61	@ 0x3d
 8002dee:	2102      	movs	r1, #2
 8002df0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	0019      	movs	r1, r3
 8002dfc:	0010      	movs	r0, r2
 8002dfe:	f000 fbd3 	bl	80035a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2248      	movs	r2, #72	@ 0x48
 8002e06:	2101      	movs	r1, #1
 8002e08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	223e      	movs	r2, #62	@ 0x3e
 8002e0e:	2101      	movs	r1, #1
 8002e10:	5499      	strb	r1, [r3, r2]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	223f      	movs	r2, #63	@ 0x3f
 8002e16:	2101      	movs	r1, #1
 8002e18:	5499      	strb	r1, [r3, r2]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2240      	movs	r2, #64	@ 0x40
 8002e1e:	2101      	movs	r1, #1
 8002e20:	5499      	strb	r1, [r3, r2]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2241      	movs	r2, #65	@ 0x41
 8002e26:	2101      	movs	r1, #1
 8002e28:	5499      	strb	r1, [r3, r2]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2242      	movs	r2, #66	@ 0x42
 8002e2e:	2101      	movs	r1, #1
 8002e30:	5499      	strb	r1, [r3, r2]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2243      	movs	r2, #67	@ 0x43
 8002e36:	2101      	movs	r1, #1
 8002e38:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2244      	movs	r2, #68	@ 0x44
 8002e3e:	2101      	movs	r1, #1
 8002e40:	5499      	strb	r1, [r3, r2]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2245      	movs	r2, #69	@ 0x45
 8002e46:	2101      	movs	r1, #1
 8002e48:	5499      	strb	r1, [r3, r2]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2246      	movs	r2, #70	@ 0x46
 8002e4e:	2101      	movs	r1, #1
 8002e50:	5499      	strb	r1, [r3, r2]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2247      	movs	r2, #71	@ 0x47
 8002e56:	2101      	movs	r1, #1
 8002e58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	223d      	movs	r2, #61	@ 0x3d
 8002e5e:	2101      	movs	r1, #1
 8002e60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	0018      	movs	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	b002      	add	sp, #8
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e04a      	b.n	8002f14 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	223d      	movs	r2, #61	@ 0x3d
 8002e82:	5c9b      	ldrb	r3, [r3, r2]
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d107      	bne.n	8002e9a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	223c      	movs	r2, #60	@ 0x3c
 8002e8e:	2100      	movs	r1, #0
 8002e90:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	0018      	movs	r0, r3
 8002e96:	f7fd fec3 	bl	8000c20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	223d      	movs	r2, #61	@ 0x3d
 8002e9e:	2102      	movs	r1, #2
 8002ea0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	0019      	movs	r1, r3
 8002eac:	0010      	movs	r0, r2
 8002eae:	f000 fb7b 	bl	80035a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2248      	movs	r2, #72	@ 0x48
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	223e      	movs	r2, #62	@ 0x3e
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	5499      	strb	r1, [r3, r2]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	223f      	movs	r2, #63	@ 0x3f
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	5499      	strb	r1, [r3, r2]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2240      	movs	r2, #64	@ 0x40
 8002ece:	2101      	movs	r1, #1
 8002ed0:	5499      	strb	r1, [r3, r2]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2241      	movs	r2, #65	@ 0x41
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	5499      	strb	r1, [r3, r2]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2242      	movs	r2, #66	@ 0x42
 8002ede:	2101      	movs	r1, #1
 8002ee0:	5499      	strb	r1, [r3, r2]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2243      	movs	r2, #67	@ 0x43
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2244      	movs	r2, #68	@ 0x44
 8002eee:	2101      	movs	r1, #1
 8002ef0:	5499      	strb	r1, [r3, r2]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2245      	movs	r2, #69	@ 0x45
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	5499      	strb	r1, [r3, r2]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2246      	movs	r2, #70	@ 0x46
 8002efe:	2101      	movs	r1, #1
 8002f00:	5499      	strb	r1, [r3, r2]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2247      	movs	r2, #71	@ 0x47
 8002f06:	2101      	movs	r1, #1
 8002f08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	223d      	movs	r2, #61	@ 0x3d
 8002f0e:	2101      	movs	r1, #1
 8002f10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	0018      	movs	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b002      	add	sp, #8
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d108      	bne.n	8002f3e <HAL_TIM_PWM_Start+0x22>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	223e      	movs	r2, #62	@ 0x3e
 8002f30:	5c9b      	ldrb	r3, [r3, r2]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	3b01      	subs	r3, #1
 8002f36:	1e5a      	subs	r2, r3, #1
 8002f38:	4193      	sbcs	r3, r2
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	e037      	b.n	8002fae <HAL_TIM_PWM_Start+0x92>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2b04      	cmp	r3, #4
 8002f42:	d108      	bne.n	8002f56 <HAL_TIM_PWM_Start+0x3a>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	223f      	movs	r2, #63	@ 0x3f
 8002f48:	5c9b      	ldrb	r3, [r3, r2]
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	1e5a      	subs	r2, r3, #1
 8002f50:	4193      	sbcs	r3, r2
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	e02b      	b.n	8002fae <HAL_TIM_PWM_Start+0x92>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d108      	bne.n	8002f6e <HAL_TIM_PWM_Start+0x52>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2240      	movs	r2, #64	@ 0x40
 8002f60:	5c9b      	ldrb	r3, [r3, r2]
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	3b01      	subs	r3, #1
 8002f66:	1e5a      	subs	r2, r3, #1
 8002f68:	4193      	sbcs	r3, r2
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	e01f      	b.n	8002fae <HAL_TIM_PWM_Start+0x92>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b0c      	cmp	r3, #12
 8002f72:	d108      	bne.n	8002f86 <HAL_TIM_PWM_Start+0x6a>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2241      	movs	r2, #65	@ 0x41
 8002f78:	5c9b      	ldrb	r3, [r3, r2]
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	1e5a      	subs	r2, r3, #1
 8002f80:	4193      	sbcs	r3, r2
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	e013      	b.n	8002fae <HAL_TIM_PWM_Start+0x92>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b10      	cmp	r3, #16
 8002f8a:	d108      	bne.n	8002f9e <HAL_TIM_PWM_Start+0x82>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2242      	movs	r2, #66	@ 0x42
 8002f90:	5c9b      	ldrb	r3, [r3, r2]
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	3b01      	subs	r3, #1
 8002f96:	1e5a      	subs	r2, r3, #1
 8002f98:	4193      	sbcs	r3, r2
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	e007      	b.n	8002fae <HAL_TIM_PWM_Start+0x92>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2243      	movs	r2, #67	@ 0x43
 8002fa2:	5c9b      	ldrb	r3, [r3, r2]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	1e5a      	subs	r2, r3, #1
 8002faa:	4193      	sbcs	r3, r2
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e085      	b.n	80030c2 <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d104      	bne.n	8002fc6 <HAL_TIM_PWM_Start+0xaa>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	223e      	movs	r2, #62	@ 0x3e
 8002fc0:	2102      	movs	r1, #2
 8002fc2:	5499      	strb	r1, [r3, r2]
 8002fc4:	e023      	b.n	800300e <HAL_TIM_PWM_Start+0xf2>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d104      	bne.n	8002fd6 <HAL_TIM_PWM_Start+0xba>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	223f      	movs	r2, #63	@ 0x3f
 8002fd0:	2102      	movs	r1, #2
 8002fd2:	5499      	strb	r1, [r3, r2]
 8002fd4:	e01b      	b.n	800300e <HAL_TIM_PWM_Start+0xf2>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d104      	bne.n	8002fe6 <HAL_TIM_PWM_Start+0xca>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2240      	movs	r2, #64	@ 0x40
 8002fe0:	2102      	movs	r1, #2
 8002fe2:	5499      	strb	r1, [r3, r2]
 8002fe4:	e013      	b.n	800300e <HAL_TIM_PWM_Start+0xf2>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2b0c      	cmp	r3, #12
 8002fea:	d104      	bne.n	8002ff6 <HAL_TIM_PWM_Start+0xda>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2241      	movs	r2, #65	@ 0x41
 8002ff0:	2102      	movs	r1, #2
 8002ff2:	5499      	strb	r1, [r3, r2]
 8002ff4:	e00b      	b.n	800300e <HAL_TIM_PWM_Start+0xf2>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b10      	cmp	r3, #16
 8002ffa:	d104      	bne.n	8003006 <HAL_TIM_PWM_Start+0xea>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2242      	movs	r2, #66	@ 0x42
 8003000:	2102      	movs	r1, #2
 8003002:	5499      	strb	r1, [r3, r2]
 8003004:	e003      	b.n	800300e <HAL_TIM_PWM_Start+0xf2>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2243      	movs	r2, #67	@ 0x43
 800300a:	2102      	movs	r1, #2
 800300c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6839      	ldr	r1, [r7, #0]
 8003014:	2201      	movs	r2, #1
 8003016:	0018      	movs	r0, r3
 8003018:	f000 feaa 	bl	8003d70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a2a      	ldr	r2, [pc, #168]	@ (80030cc <HAL_TIM_PWM_Start+0x1b0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d00e      	beq.n	8003044 <HAL_TIM_PWM_Start+0x128>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a29      	ldr	r2, [pc, #164]	@ (80030d0 <HAL_TIM_PWM_Start+0x1b4>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d009      	beq.n	8003044 <HAL_TIM_PWM_Start+0x128>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a27      	ldr	r2, [pc, #156]	@ (80030d4 <HAL_TIM_PWM_Start+0x1b8>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d004      	beq.n	8003044 <HAL_TIM_PWM_Start+0x128>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a26      	ldr	r2, [pc, #152]	@ (80030d8 <HAL_TIM_PWM_Start+0x1bc>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d101      	bne.n	8003048 <HAL_TIM_PWM_Start+0x12c>
 8003044:	2301      	movs	r3, #1
 8003046:	e000      	b.n	800304a <HAL_TIM_PWM_Start+0x12e>
 8003048:	2300      	movs	r3, #0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d008      	beq.n	8003060 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2180      	movs	r1, #128	@ 0x80
 800305a:	0209      	lsls	r1, r1, #8
 800305c:	430a      	orrs	r2, r1
 800305e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a19      	ldr	r2, [pc, #100]	@ (80030cc <HAL_TIM_PWM_Start+0x1b0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d009      	beq.n	800307e <HAL_TIM_PWM_Start+0x162>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a1b      	ldr	r2, [pc, #108]	@ (80030dc <HAL_TIM_PWM_Start+0x1c0>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d004      	beq.n	800307e <HAL_TIM_PWM_Start+0x162>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a15      	ldr	r2, [pc, #84]	@ (80030d0 <HAL_TIM_PWM_Start+0x1b4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d116      	bne.n	80030ac <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	4a16      	ldr	r2, [pc, #88]	@ (80030e0 <HAL_TIM_PWM_Start+0x1c4>)
 8003086:	4013      	ands	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2b06      	cmp	r3, #6
 800308e:	d016      	beq.n	80030be <HAL_TIM_PWM_Start+0x1a2>
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	2380      	movs	r3, #128	@ 0x80
 8003094:	025b      	lsls	r3, r3, #9
 8003096:	429a      	cmp	r2, r3
 8003098:	d011      	beq.n	80030be <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2101      	movs	r1, #1
 80030a6:	430a      	orrs	r2, r1
 80030a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030aa:	e008      	b.n	80030be <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2101      	movs	r1, #1
 80030b8:	430a      	orrs	r2, r1
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	e000      	b.n	80030c0 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030be:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	0018      	movs	r0, r3
 80030c4:	46bd      	mov	sp, r7
 80030c6:	b004      	add	sp, #16
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	46c0      	nop			@ (mov r8, r8)
 80030cc:	40012c00 	.word	0x40012c00
 80030d0:	40014000 	.word	0x40014000
 80030d4:	40014400 	.word	0x40014400
 80030d8:	40014800 	.word	0x40014800
 80030dc:	40000400 	.word	0x40000400
 80030e0:	00010007 	.word	0x00010007

080030e4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6839      	ldr	r1, [r7, #0]
 80030f4:	2200      	movs	r2, #0
 80030f6:	0018      	movs	r0, r3
 80030f8:	f000 fe3a 	bl	8003d70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a37      	ldr	r2, [pc, #220]	@ (80031e0 <HAL_TIM_PWM_Stop+0xfc>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d00e      	beq.n	8003124 <HAL_TIM_PWM_Stop+0x40>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a36      	ldr	r2, [pc, #216]	@ (80031e4 <HAL_TIM_PWM_Stop+0x100>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d009      	beq.n	8003124 <HAL_TIM_PWM_Stop+0x40>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a34      	ldr	r2, [pc, #208]	@ (80031e8 <HAL_TIM_PWM_Stop+0x104>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d004      	beq.n	8003124 <HAL_TIM_PWM_Stop+0x40>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a33      	ldr	r2, [pc, #204]	@ (80031ec <HAL_TIM_PWM_Stop+0x108>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d101      	bne.n	8003128 <HAL_TIM_PWM_Stop+0x44>
 8003124:	2301      	movs	r3, #1
 8003126:	e000      	b.n	800312a <HAL_TIM_PWM_Stop+0x46>
 8003128:	2300      	movs	r3, #0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d013      	beq.n	8003156 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	4a2e      	ldr	r2, [pc, #184]	@ (80031f0 <HAL_TIM_PWM_Stop+0x10c>)
 8003136:	4013      	ands	r3, r2
 8003138:	d10d      	bne.n	8003156 <HAL_TIM_PWM_Stop+0x72>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	4a2c      	ldr	r2, [pc, #176]	@ (80031f4 <HAL_TIM_PWM_Stop+0x110>)
 8003142:	4013      	ands	r3, r2
 8003144:	d107      	bne.n	8003156 <HAL_TIM_PWM_Stop+0x72>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4929      	ldr	r1, [pc, #164]	@ (80031f8 <HAL_TIM_PWM_Stop+0x114>)
 8003152:	400a      	ands	r2, r1
 8003154:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	4a24      	ldr	r2, [pc, #144]	@ (80031f0 <HAL_TIM_PWM_Stop+0x10c>)
 800315e:	4013      	ands	r3, r2
 8003160:	d10d      	bne.n	800317e <HAL_TIM_PWM_Stop+0x9a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	4a22      	ldr	r2, [pc, #136]	@ (80031f4 <HAL_TIM_PWM_Stop+0x110>)
 800316a:	4013      	ands	r3, r2
 800316c:	d107      	bne.n	800317e <HAL_TIM_PWM_Stop+0x9a>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2101      	movs	r1, #1
 800317a:	438a      	bics	r2, r1
 800317c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d104      	bne.n	800318e <HAL_TIM_PWM_Stop+0xaa>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	223e      	movs	r2, #62	@ 0x3e
 8003188:	2101      	movs	r1, #1
 800318a:	5499      	strb	r1, [r3, r2]
 800318c:	e023      	b.n	80031d6 <HAL_TIM_PWM_Stop+0xf2>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b04      	cmp	r3, #4
 8003192:	d104      	bne.n	800319e <HAL_TIM_PWM_Stop+0xba>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	223f      	movs	r2, #63	@ 0x3f
 8003198:	2101      	movs	r1, #1
 800319a:	5499      	strb	r1, [r3, r2]
 800319c:	e01b      	b.n	80031d6 <HAL_TIM_PWM_Stop+0xf2>
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d104      	bne.n	80031ae <HAL_TIM_PWM_Stop+0xca>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2240      	movs	r2, #64	@ 0x40
 80031a8:	2101      	movs	r1, #1
 80031aa:	5499      	strb	r1, [r3, r2]
 80031ac:	e013      	b.n	80031d6 <HAL_TIM_PWM_Stop+0xf2>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b0c      	cmp	r3, #12
 80031b2:	d104      	bne.n	80031be <HAL_TIM_PWM_Stop+0xda>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2241      	movs	r2, #65	@ 0x41
 80031b8:	2101      	movs	r1, #1
 80031ba:	5499      	strb	r1, [r3, r2]
 80031bc:	e00b      	b.n	80031d6 <HAL_TIM_PWM_Stop+0xf2>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b10      	cmp	r3, #16
 80031c2:	d104      	bne.n	80031ce <HAL_TIM_PWM_Stop+0xea>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2242      	movs	r2, #66	@ 0x42
 80031c8:	2101      	movs	r1, #1
 80031ca:	5499      	strb	r1, [r3, r2]
 80031cc:	e003      	b.n	80031d6 <HAL_TIM_PWM_Stop+0xf2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2243      	movs	r2, #67	@ 0x43
 80031d2:	2101      	movs	r1, #1
 80031d4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	0018      	movs	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	b002      	add	sp, #8
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40012c00 	.word	0x40012c00
 80031e4:	40014000 	.word	0x40014000
 80031e8:	40014400 	.word	0x40014400
 80031ec:	40014800 	.word	0x40014800
 80031f0:	00001111 	.word	0x00001111
 80031f4:	00000444 	.word	0x00000444
 80031f8:	ffff7fff 	.word	0xffff7fff

080031fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003208:	2317      	movs	r3, #23
 800320a:	18fb      	adds	r3, r7, r3
 800320c:	2200      	movs	r2, #0
 800320e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	223c      	movs	r2, #60	@ 0x3c
 8003214:	5c9b      	ldrb	r3, [r3, r2]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_TIM_PWM_ConfigChannel+0x22>
 800321a:	2302      	movs	r3, #2
 800321c:	e0e5      	b.n	80033ea <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	223c      	movs	r2, #60	@ 0x3c
 8003222:	2101      	movs	r1, #1
 8003224:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b14      	cmp	r3, #20
 800322a:	d900      	bls.n	800322e <HAL_TIM_PWM_ConfigChannel+0x32>
 800322c:	e0d1      	b.n	80033d2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	009a      	lsls	r2, r3, #2
 8003232:	4b70      	ldr	r3, [pc, #448]	@ (80033f4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003234:	18d3      	adds	r3, r2, r3
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	0011      	movs	r1, r2
 8003242:	0018      	movs	r0, r3
 8003244:	f000 fa34 	bl	80036b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	699a      	ldr	r2, [r3, #24]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2108      	movs	r1, #8
 8003254:	430a      	orrs	r2, r1
 8003256:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699a      	ldr	r2, [r3, #24]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2104      	movs	r1, #4
 8003264:	438a      	bics	r2, r1
 8003266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6999      	ldr	r1, [r3, #24]
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	691a      	ldr	r2, [r3, #16]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	619a      	str	r2, [r3, #24]
      break;
 800327a:	e0af      	b.n	80033dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	0011      	movs	r1, r2
 8003284:	0018      	movs	r0, r3
 8003286:	f000 fa9d 	bl	80037c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	699a      	ldr	r2, [r3, #24]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2180      	movs	r1, #128	@ 0x80
 8003296:	0109      	lsls	r1, r1, #4
 8003298:	430a      	orrs	r2, r1
 800329a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	699a      	ldr	r2, [r3, #24]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4954      	ldr	r1, [pc, #336]	@ (80033f8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80032a8:	400a      	ands	r2, r1
 80032aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6999      	ldr	r1, [r3, #24]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	021a      	lsls	r2, r3, #8
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	619a      	str	r2, [r3, #24]
      break;
 80032c0:	e08c      	b.n	80033dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	0011      	movs	r1, r2
 80032ca:	0018      	movs	r0, r3
 80032cc:	f000 fafe 	bl	80038cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	69da      	ldr	r2, [r3, #28]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2108      	movs	r1, #8
 80032dc:	430a      	orrs	r2, r1
 80032de:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	69da      	ldr	r2, [r3, #28]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2104      	movs	r1, #4
 80032ec:	438a      	bics	r2, r1
 80032ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	69d9      	ldr	r1, [r3, #28]
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	691a      	ldr	r2, [r3, #16]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	61da      	str	r2, [r3, #28]
      break;
 8003302:	e06b      	b.n	80033dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	0011      	movs	r1, r2
 800330c:	0018      	movs	r0, r3
 800330e:	f000 fb65 	bl	80039dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	69da      	ldr	r2, [r3, #28]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2180      	movs	r1, #128	@ 0x80
 800331e:	0109      	lsls	r1, r1, #4
 8003320:	430a      	orrs	r2, r1
 8003322:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	69da      	ldr	r2, [r3, #28]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4932      	ldr	r1, [pc, #200]	@ (80033f8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003330:	400a      	ands	r2, r1
 8003332:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	69d9      	ldr	r1, [r3, #28]
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	021a      	lsls	r2, r3, #8
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	61da      	str	r2, [r3, #28]
      break;
 8003348:	e048      	b.n	80033dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	0011      	movs	r1, r2
 8003352:	0018      	movs	r0, r3
 8003354:	f000 fbac 	bl	8003ab0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2108      	movs	r1, #8
 8003364:	430a      	orrs	r2, r1
 8003366:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2104      	movs	r1, #4
 8003374:	438a      	bics	r2, r1
 8003376:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	691a      	ldr	r2, [r3, #16]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800338a:	e027      	b.n	80033dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	0011      	movs	r1, r2
 8003394:	0018      	movs	r0, r3
 8003396:	f000 fbeb 	bl	8003b70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2180      	movs	r1, #128	@ 0x80
 80033a6:	0109      	lsls	r1, r1, #4
 80033a8:	430a      	orrs	r2, r1
 80033aa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4910      	ldr	r1, [pc, #64]	@ (80033f8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80033b8:	400a      	ands	r2, r1
 80033ba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	021a      	lsls	r2, r3, #8
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80033d0:	e004      	b.n	80033dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80033d2:	2317      	movs	r3, #23
 80033d4:	18fb      	adds	r3, r7, r3
 80033d6:	2201      	movs	r2, #1
 80033d8:	701a      	strb	r2, [r3, #0]
      break;
 80033da:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	223c      	movs	r2, #60	@ 0x3c
 80033e0:	2100      	movs	r1, #0
 80033e2:	5499      	strb	r1, [r3, r2]

  return status;
 80033e4:	2317      	movs	r3, #23
 80033e6:	18fb      	adds	r3, r7, r3
 80033e8:	781b      	ldrb	r3, [r3, #0]
}
 80033ea:	0018      	movs	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	b006      	add	sp, #24
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	46c0      	nop			@ (mov r8, r8)
 80033f4:	08005580 	.word	0x08005580
 80033f8:	fffffbff 	.word	0xfffffbff

080033fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003406:	230f      	movs	r3, #15
 8003408:	18fb      	adds	r3, r7, r3
 800340a:	2200      	movs	r2, #0
 800340c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	223c      	movs	r2, #60	@ 0x3c
 8003412:	5c9b      	ldrb	r3, [r3, r2]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_TIM_ConfigClockSource+0x20>
 8003418:	2302      	movs	r3, #2
 800341a:	e0bc      	b.n	8003596 <HAL_TIM_ConfigClockSource+0x19a>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	223c      	movs	r2, #60	@ 0x3c
 8003420:	2101      	movs	r1, #1
 8003422:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	223d      	movs	r2, #61	@ 0x3d
 8003428:	2102      	movs	r1, #2
 800342a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	4a5a      	ldr	r2, [pc, #360]	@ (80035a0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003438:	4013      	ands	r3, r2
 800343a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	4a59      	ldr	r2, [pc, #356]	@ (80035a4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003440:	4013      	ands	r3, r2
 8003442:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2280      	movs	r2, #128	@ 0x80
 8003452:	0192      	lsls	r2, r2, #6
 8003454:	4293      	cmp	r3, r2
 8003456:	d040      	beq.n	80034da <HAL_TIM_ConfigClockSource+0xde>
 8003458:	2280      	movs	r2, #128	@ 0x80
 800345a:	0192      	lsls	r2, r2, #6
 800345c:	4293      	cmp	r3, r2
 800345e:	d900      	bls.n	8003462 <HAL_TIM_ConfigClockSource+0x66>
 8003460:	e088      	b.n	8003574 <HAL_TIM_ConfigClockSource+0x178>
 8003462:	2280      	movs	r2, #128	@ 0x80
 8003464:	0152      	lsls	r2, r2, #5
 8003466:	4293      	cmp	r3, r2
 8003468:	d100      	bne.n	800346c <HAL_TIM_ConfigClockSource+0x70>
 800346a:	e088      	b.n	800357e <HAL_TIM_ConfigClockSource+0x182>
 800346c:	2280      	movs	r2, #128	@ 0x80
 800346e:	0152      	lsls	r2, r2, #5
 8003470:	4293      	cmp	r3, r2
 8003472:	d900      	bls.n	8003476 <HAL_TIM_ConfigClockSource+0x7a>
 8003474:	e07e      	b.n	8003574 <HAL_TIM_ConfigClockSource+0x178>
 8003476:	2b70      	cmp	r3, #112	@ 0x70
 8003478:	d018      	beq.n	80034ac <HAL_TIM_ConfigClockSource+0xb0>
 800347a:	d900      	bls.n	800347e <HAL_TIM_ConfigClockSource+0x82>
 800347c:	e07a      	b.n	8003574 <HAL_TIM_ConfigClockSource+0x178>
 800347e:	2b60      	cmp	r3, #96	@ 0x60
 8003480:	d04f      	beq.n	8003522 <HAL_TIM_ConfigClockSource+0x126>
 8003482:	d900      	bls.n	8003486 <HAL_TIM_ConfigClockSource+0x8a>
 8003484:	e076      	b.n	8003574 <HAL_TIM_ConfigClockSource+0x178>
 8003486:	2b50      	cmp	r3, #80	@ 0x50
 8003488:	d03b      	beq.n	8003502 <HAL_TIM_ConfigClockSource+0x106>
 800348a:	d900      	bls.n	800348e <HAL_TIM_ConfigClockSource+0x92>
 800348c:	e072      	b.n	8003574 <HAL_TIM_ConfigClockSource+0x178>
 800348e:	2b40      	cmp	r3, #64	@ 0x40
 8003490:	d057      	beq.n	8003542 <HAL_TIM_ConfigClockSource+0x146>
 8003492:	d900      	bls.n	8003496 <HAL_TIM_ConfigClockSource+0x9a>
 8003494:	e06e      	b.n	8003574 <HAL_TIM_ConfigClockSource+0x178>
 8003496:	2b30      	cmp	r3, #48	@ 0x30
 8003498:	d063      	beq.n	8003562 <HAL_TIM_ConfigClockSource+0x166>
 800349a:	d86b      	bhi.n	8003574 <HAL_TIM_ConfigClockSource+0x178>
 800349c:	2b20      	cmp	r3, #32
 800349e:	d060      	beq.n	8003562 <HAL_TIM_ConfigClockSource+0x166>
 80034a0:	d868      	bhi.n	8003574 <HAL_TIM_ConfigClockSource+0x178>
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d05d      	beq.n	8003562 <HAL_TIM_ConfigClockSource+0x166>
 80034a6:	2b10      	cmp	r3, #16
 80034a8:	d05b      	beq.n	8003562 <HAL_TIM_ConfigClockSource+0x166>
 80034aa:	e063      	b.n	8003574 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034bc:	f000 fc38 	bl	8003d30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2277      	movs	r2, #119	@ 0x77
 80034cc:	4313      	orrs	r3, r2
 80034ce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	609a      	str	r2, [r3, #8]
      break;
 80034d8:	e052      	b.n	8003580 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034ea:	f000 fc21 	bl	8003d30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2180      	movs	r1, #128	@ 0x80
 80034fa:	01c9      	lsls	r1, r1, #7
 80034fc:	430a      	orrs	r2, r1
 80034fe:	609a      	str	r2, [r3, #8]
      break;
 8003500:	e03e      	b.n	8003580 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800350e:	001a      	movs	r2, r3
 8003510:	f000 fb92 	bl	8003c38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2150      	movs	r1, #80	@ 0x50
 800351a:	0018      	movs	r0, r3
 800351c:	f000 fbec 	bl	8003cf8 <TIM_ITRx_SetConfig>
      break;
 8003520:	e02e      	b.n	8003580 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800352e:	001a      	movs	r2, r3
 8003530:	f000 fbb0 	bl	8003c94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2160      	movs	r1, #96	@ 0x60
 800353a:	0018      	movs	r0, r3
 800353c:	f000 fbdc 	bl	8003cf8 <TIM_ITRx_SetConfig>
      break;
 8003540:	e01e      	b.n	8003580 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800354e:	001a      	movs	r2, r3
 8003550:	f000 fb72 	bl	8003c38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2140      	movs	r1, #64	@ 0x40
 800355a:	0018      	movs	r0, r3
 800355c:	f000 fbcc 	bl	8003cf8 <TIM_ITRx_SetConfig>
      break;
 8003560:	e00e      	b.n	8003580 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	0019      	movs	r1, r3
 800356c:	0010      	movs	r0, r2
 800356e:	f000 fbc3 	bl	8003cf8 <TIM_ITRx_SetConfig>
      break;
 8003572:	e005      	b.n	8003580 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003574:	230f      	movs	r3, #15
 8003576:	18fb      	adds	r3, r7, r3
 8003578:	2201      	movs	r2, #1
 800357a:	701a      	strb	r2, [r3, #0]
      break;
 800357c:	e000      	b.n	8003580 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800357e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	223d      	movs	r2, #61	@ 0x3d
 8003584:	2101      	movs	r1, #1
 8003586:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	223c      	movs	r2, #60	@ 0x3c
 800358c:	2100      	movs	r1, #0
 800358e:	5499      	strb	r1, [r3, r2]

  return status;
 8003590:	230f      	movs	r3, #15
 8003592:	18fb      	adds	r3, r7, r3
 8003594:	781b      	ldrb	r3, [r3, #0]
}
 8003596:	0018      	movs	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	b004      	add	sp, #16
 800359c:	bd80      	pop	{r7, pc}
 800359e:	46c0      	nop			@ (mov r8, r8)
 80035a0:	ffceff88 	.word	0xffceff88
 80035a4:	ffff00ff 	.word	0xffff00ff

080035a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a36      	ldr	r2, [pc, #216]	@ (8003694 <TIM_Base_SetConfig+0xec>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d003      	beq.n	80035c8 <TIM_Base_SetConfig+0x20>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a35      	ldr	r2, [pc, #212]	@ (8003698 <TIM_Base_SetConfig+0xf0>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d108      	bne.n	80035da <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2270      	movs	r2, #112	@ 0x70
 80035cc:	4393      	bics	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a2d      	ldr	r2, [pc, #180]	@ (8003694 <TIM_Base_SetConfig+0xec>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d013      	beq.n	800360a <TIM_Base_SetConfig+0x62>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a2c      	ldr	r2, [pc, #176]	@ (8003698 <TIM_Base_SetConfig+0xf0>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d00f      	beq.n	800360a <TIM_Base_SetConfig+0x62>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a2b      	ldr	r2, [pc, #172]	@ (800369c <TIM_Base_SetConfig+0xf4>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d00b      	beq.n	800360a <TIM_Base_SetConfig+0x62>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a2a      	ldr	r2, [pc, #168]	@ (80036a0 <TIM_Base_SetConfig+0xf8>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d007      	beq.n	800360a <TIM_Base_SetConfig+0x62>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a29      	ldr	r2, [pc, #164]	@ (80036a4 <TIM_Base_SetConfig+0xfc>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d003      	beq.n	800360a <TIM_Base_SetConfig+0x62>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a28      	ldr	r2, [pc, #160]	@ (80036a8 <TIM_Base_SetConfig+0x100>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d108      	bne.n	800361c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4a27      	ldr	r2, [pc, #156]	@ (80036ac <TIM_Base_SetConfig+0x104>)
 800360e:	4013      	ands	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	4313      	orrs	r3, r2
 800361a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2280      	movs	r2, #128	@ 0x80
 8003620:	4393      	bics	r3, r2
 8003622:	001a      	movs	r2, r3
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	4313      	orrs	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	689a      	ldr	r2, [r3, #8]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a13      	ldr	r2, [pc, #76]	@ (8003694 <TIM_Base_SetConfig+0xec>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d00b      	beq.n	8003662 <TIM_Base_SetConfig+0xba>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a14      	ldr	r2, [pc, #80]	@ (80036a0 <TIM_Base_SetConfig+0xf8>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d007      	beq.n	8003662 <TIM_Base_SetConfig+0xba>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a13      	ldr	r2, [pc, #76]	@ (80036a4 <TIM_Base_SetConfig+0xfc>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d003      	beq.n	8003662 <TIM_Base_SetConfig+0xba>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a12      	ldr	r2, [pc, #72]	@ (80036a8 <TIM_Base_SetConfig+0x100>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d103      	bne.n	800366a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	691a      	ldr	r2, [r3, #16]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2201      	movs	r2, #1
 800366e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	2201      	movs	r2, #1
 8003676:	4013      	ands	r3, r2
 8003678:	2b01      	cmp	r3, #1
 800367a:	d106      	bne.n	800368a <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	2201      	movs	r2, #1
 8003682:	4393      	bics	r3, r2
 8003684:	001a      	movs	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	611a      	str	r2, [r3, #16]
  }
}
 800368a:	46c0      	nop			@ (mov r8, r8)
 800368c:	46bd      	mov	sp, r7
 800368e:	b004      	add	sp, #16
 8003690:	bd80      	pop	{r7, pc}
 8003692:	46c0      	nop			@ (mov r8, r8)
 8003694:	40012c00 	.word	0x40012c00
 8003698:	40000400 	.word	0x40000400
 800369c:	40002000 	.word	0x40002000
 80036a0:	40014000 	.word	0x40014000
 80036a4:	40014400 	.word	0x40014400
 80036a8:	40014800 	.word	0x40014800
 80036ac:	fffffcff 	.word	0xfffffcff

080036b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	2201      	movs	r2, #1
 80036c6:	4393      	bics	r3, r2
 80036c8:	001a      	movs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	4a32      	ldr	r2, [pc, #200]	@ (80037a8 <TIM_OC1_SetConfig+0xf8>)
 80036de:	4013      	ands	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2203      	movs	r2, #3
 80036e6:	4393      	bics	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	2202      	movs	r2, #2
 80036f8:	4393      	bics	r3, r2
 80036fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	4313      	orrs	r3, r2
 8003704:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a28      	ldr	r2, [pc, #160]	@ (80037ac <TIM_OC1_SetConfig+0xfc>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00b      	beq.n	8003726 <TIM_OC1_SetConfig+0x76>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a27      	ldr	r2, [pc, #156]	@ (80037b0 <TIM_OC1_SetConfig+0x100>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d007      	beq.n	8003726 <TIM_OC1_SetConfig+0x76>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a26      	ldr	r2, [pc, #152]	@ (80037b4 <TIM_OC1_SetConfig+0x104>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d003      	beq.n	8003726 <TIM_OC1_SetConfig+0x76>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a25      	ldr	r2, [pc, #148]	@ (80037b8 <TIM_OC1_SetConfig+0x108>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d10c      	bne.n	8003740 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2208      	movs	r2, #8
 800372a:	4393      	bics	r3, r2
 800372c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4313      	orrs	r3, r2
 8003736:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	2204      	movs	r2, #4
 800373c:	4393      	bics	r3, r2
 800373e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a1a      	ldr	r2, [pc, #104]	@ (80037ac <TIM_OC1_SetConfig+0xfc>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d00b      	beq.n	8003760 <TIM_OC1_SetConfig+0xb0>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a19      	ldr	r2, [pc, #100]	@ (80037b0 <TIM_OC1_SetConfig+0x100>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d007      	beq.n	8003760 <TIM_OC1_SetConfig+0xb0>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a18      	ldr	r2, [pc, #96]	@ (80037b4 <TIM_OC1_SetConfig+0x104>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d003      	beq.n	8003760 <TIM_OC1_SetConfig+0xb0>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a17      	ldr	r2, [pc, #92]	@ (80037b8 <TIM_OC1_SetConfig+0x108>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d111      	bne.n	8003784 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	4a16      	ldr	r2, [pc, #88]	@ (80037bc <TIM_OC1_SetConfig+0x10c>)
 8003764:	4013      	ands	r3, r2
 8003766:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	4a15      	ldr	r2, [pc, #84]	@ (80037c0 <TIM_OC1_SetConfig+0x110>)
 800376c:	4013      	ands	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4313      	orrs	r3, r2
 8003778:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	621a      	str	r2, [r3, #32]
}
 800379e:	46c0      	nop			@ (mov r8, r8)
 80037a0:	46bd      	mov	sp, r7
 80037a2:	b006      	add	sp, #24
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	fffeff8f 	.word	0xfffeff8f
 80037ac:	40012c00 	.word	0x40012c00
 80037b0:	40014000 	.word	0x40014000
 80037b4:	40014400 	.word	0x40014400
 80037b8:	40014800 	.word	0x40014800
 80037bc:	fffffeff 	.word	0xfffffeff
 80037c0:	fffffdff 	.word	0xfffffdff

080037c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	2210      	movs	r2, #16
 80037da:	4393      	bics	r3, r2
 80037dc:	001a      	movs	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	4a2e      	ldr	r2, [pc, #184]	@ (80038ac <TIM_OC2_SetConfig+0xe8>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	4a2d      	ldr	r2, [pc, #180]	@ (80038b0 <TIM_OC2_SetConfig+0xec>)
 80037fa:	4013      	ands	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	021b      	lsls	r3, r3, #8
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	4313      	orrs	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	2220      	movs	r2, #32
 800380e:	4393      	bics	r3, r2
 8003810:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	4313      	orrs	r3, r2
 800381c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a24      	ldr	r2, [pc, #144]	@ (80038b4 <TIM_OC2_SetConfig+0xf0>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d10d      	bne.n	8003842 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2280      	movs	r2, #128	@ 0x80
 800382a:	4393      	bics	r3, r2
 800382c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	4313      	orrs	r3, r2
 8003838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2240      	movs	r2, #64	@ 0x40
 800383e:	4393      	bics	r3, r2
 8003840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a1b      	ldr	r2, [pc, #108]	@ (80038b4 <TIM_OC2_SetConfig+0xf0>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d00b      	beq.n	8003862 <TIM_OC2_SetConfig+0x9e>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a1a      	ldr	r2, [pc, #104]	@ (80038b8 <TIM_OC2_SetConfig+0xf4>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d007      	beq.n	8003862 <TIM_OC2_SetConfig+0x9e>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a19      	ldr	r2, [pc, #100]	@ (80038bc <TIM_OC2_SetConfig+0xf8>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d003      	beq.n	8003862 <TIM_OC2_SetConfig+0x9e>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a18      	ldr	r2, [pc, #96]	@ (80038c0 <TIM_OC2_SetConfig+0xfc>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d113      	bne.n	800388a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	4a17      	ldr	r2, [pc, #92]	@ (80038c4 <TIM_OC2_SetConfig+0x100>)
 8003866:	4013      	ands	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4a16      	ldr	r2, [pc, #88]	@ (80038c8 <TIM_OC2_SetConfig+0x104>)
 800386e:	4013      	ands	r3, r2
 8003870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	4313      	orrs	r3, r2
 800387c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	4313      	orrs	r3, r2
 8003888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	621a      	str	r2, [r3, #32]
}
 80038a4:	46c0      	nop			@ (mov r8, r8)
 80038a6:	46bd      	mov	sp, r7
 80038a8:	b006      	add	sp, #24
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	feff8fff 	.word	0xfeff8fff
 80038b0:	fffffcff 	.word	0xfffffcff
 80038b4:	40012c00 	.word	0x40012c00
 80038b8:	40014000 	.word	0x40014000
 80038bc:	40014400 	.word	0x40014400
 80038c0:	40014800 	.word	0x40014800
 80038c4:	fffffbff 	.word	0xfffffbff
 80038c8:	fffff7ff 	.word	0xfffff7ff

080038cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	4a33      	ldr	r2, [pc, #204]	@ (80039b0 <TIM_OC3_SetConfig+0xe4>)
 80038e2:	401a      	ands	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4a2f      	ldr	r2, [pc, #188]	@ (80039b4 <TIM_OC3_SetConfig+0xe8>)
 80038f8:	4013      	ands	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2203      	movs	r2, #3
 8003900:	4393      	bics	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	4a29      	ldr	r2, [pc, #164]	@ (80039b8 <TIM_OC3_SetConfig+0xec>)
 8003912:	4013      	ands	r3, r2
 8003914:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	021b      	lsls	r3, r3, #8
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	4313      	orrs	r3, r2
 8003920:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a25      	ldr	r2, [pc, #148]	@ (80039bc <TIM_OC3_SetConfig+0xf0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d10d      	bne.n	8003946 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	4a24      	ldr	r2, [pc, #144]	@ (80039c0 <TIM_OC3_SetConfig+0xf4>)
 800392e:	4013      	ands	r3, r2
 8003930:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	021b      	lsls	r3, r3, #8
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	4313      	orrs	r3, r2
 800393c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	4a20      	ldr	r2, [pc, #128]	@ (80039c4 <TIM_OC3_SetConfig+0xf8>)
 8003942:	4013      	ands	r3, r2
 8003944:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a1c      	ldr	r2, [pc, #112]	@ (80039bc <TIM_OC3_SetConfig+0xf0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00b      	beq.n	8003966 <TIM_OC3_SetConfig+0x9a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a1d      	ldr	r2, [pc, #116]	@ (80039c8 <TIM_OC3_SetConfig+0xfc>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d007      	beq.n	8003966 <TIM_OC3_SetConfig+0x9a>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a1c      	ldr	r2, [pc, #112]	@ (80039cc <TIM_OC3_SetConfig+0x100>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d003      	beq.n	8003966 <TIM_OC3_SetConfig+0x9a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a1b      	ldr	r2, [pc, #108]	@ (80039d0 <TIM_OC3_SetConfig+0x104>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d113      	bne.n	800398e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	4a1a      	ldr	r2, [pc, #104]	@ (80039d4 <TIM_OC3_SetConfig+0x108>)
 800396a:	4013      	ands	r3, r2
 800396c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	4a19      	ldr	r2, [pc, #100]	@ (80039d8 <TIM_OC3_SetConfig+0x10c>)
 8003972:	4013      	ands	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4313      	orrs	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	621a      	str	r2, [r3, #32]
}
 80039a8:	46c0      	nop			@ (mov r8, r8)
 80039aa:	46bd      	mov	sp, r7
 80039ac:	b006      	add	sp, #24
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	fffffeff 	.word	0xfffffeff
 80039b4:	fffeff8f 	.word	0xfffeff8f
 80039b8:	fffffdff 	.word	0xfffffdff
 80039bc:	40012c00 	.word	0x40012c00
 80039c0:	fffff7ff 	.word	0xfffff7ff
 80039c4:	fffffbff 	.word	0xfffffbff
 80039c8:	40014000 	.word	0x40014000
 80039cc:	40014400 	.word	0x40014400
 80039d0:	40014800 	.word	0x40014800
 80039d4:	ffffefff 	.word	0xffffefff
 80039d8:	ffffdfff 	.word	0xffffdfff

080039dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	4a26      	ldr	r2, [pc, #152]	@ (8003a8c <TIM_OC4_SetConfig+0xb0>)
 80039f2:	401a      	ands	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4a22      	ldr	r2, [pc, #136]	@ (8003a90 <TIM_OC4_SetConfig+0xb4>)
 8003a08:	4013      	ands	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4a21      	ldr	r2, [pc, #132]	@ (8003a94 <TIM_OC4_SetConfig+0xb8>)
 8003a10:	4013      	ands	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	021b      	lsls	r3, r3, #8
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	4a1d      	ldr	r2, [pc, #116]	@ (8003a98 <TIM_OC4_SetConfig+0xbc>)
 8003a24:	4013      	ands	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	031b      	lsls	r3, r3, #12
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a19      	ldr	r2, [pc, #100]	@ (8003a9c <TIM_OC4_SetConfig+0xc0>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d00b      	beq.n	8003a54 <TIM_OC4_SetConfig+0x78>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a18      	ldr	r2, [pc, #96]	@ (8003aa0 <TIM_OC4_SetConfig+0xc4>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d007      	beq.n	8003a54 <TIM_OC4_SetConfig+0x78>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a17      	ldr	r2, [pc, #92]	@ (8003aa4 <TIM_OC4_SetConfig+0xc8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d003      	beq.n	8003a54 <TIM_OC4_SetConfig+0x78>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a16      	ldr	r2, [pc, #88]	@ (8003aa8 <TIM_OC4_SetConfig+0xcc>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d109      	bne.n	8003a68 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	4a15      	ldr	r2, [pc, #84]	@ (8003aac <TIM_OC4_SetConfig+0xd0>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	019b      	lsls	r3, r3, #6
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	621a      	str	r2, [r3, #32]
}
 8003a82:	46c0      	nop			@ (mov r8, r8)
 8003a84:	46bd      	mov	sp, r7
 8003a86:	b006      	add	sp, #24
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	46c0      	nop			@ (mov r8, r8)
 8003a8c:	ffffefff 	.word	0xffffefff
 8003a90:	feff8fff 	.word	0xfeff8fff
 8003a94:	fffffcff 	.word	0xfffffcff
 8003a98:	ffffdfff 	.word	0xffffdfff
 8003a9c:	40012c00 	.word	0x40012c00
 8003aa0:	40014000 	.word	0x40014000
 8003aa4:	40014400 	.word	0x40014400
 8003aa8:	40014800 	.word	0x40014800
 8003aac:	ffffbfff 	.word	0xffffbfff

08003ab0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	4a23      	ldr	r2, [pc, #140]	@ (8003b54 <TIM_OC5_SetConfig+0xa4>)
 8003ac6:	401a      	ands	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4a1f      	ldr	r2, [pc, #124]	@ (8003b58 <TIM_OC5_SetConfig+0xa8>)
 8003adc:	4013      	ands	r3, r2
 8003ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4a1b      	ldr	r2, [pc, #108]	@ (8003b5c <TIM_OC5_SetConfig+0xac>)
 8003aee:	4013      	ands	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	041b      	lsls	r3, r3, #16
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a17      	ldr	r2, [pc, #92]	@ (8003b60 <TIM_OC5_SetConfig+0xb0>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d00b      	beq.n	8003b1e <TIM_OC5_SetConfig+0x6e>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a16      	ldr	r2, [pc, #88]	@ (8003b64 <TIM_OC5_SetConfig+0xb4>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d007      	beq.n	8003b1e <TIM_OC5_SetConfig+0x6e>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a15      	ldr	r2, [pc, #84]	@ (8003b68 <TIM_OC5_SetConfig+0xb8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d003      	beq.n	8003b1e <TIM_OC5_SetConfig+0x6e>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a14      	ldr	r2, [pc, #80]	@ (8003b6c <TIM_OC5_SetConfig+0xbc>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d109      	bne.n	8003b32 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	4a0c      	ldr	r2, [pc, #48]	@ (8003b54 <TIM_OC5_SetConfig+0xa4>)
 8003b22:	4013      	ands	r3, r2
 8003b24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	021b      	lsls	r3, r3, #8
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	621a      	str	r2, [r3, #32]
}
 8003b4c:	46c0      	nop			@ (mov r8, r8)
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	b006      	add	sp, #24
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	fffeffff 	.word	0xfffeffff
 8003b58:	fffeff8f 	.word	0xfffeff8f
 8003b5c:	fffdffff 	.word	0xfffdffff
 8003b60:	40012c00 	.word	0x40012c00
 8003b64:	40014000 	.word	0x40014000
 8003b68:	40014400 	.word	0x40014400
 8003b6c:	40014800 	.word	0x40014800

08003b70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	4a24      	ldr	r2, [pc, #144]	@ (8003c18 <TIM_OC6_SetConfig+0xa8>)
 8003b86:	401a      	ands	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	4a20      	ldr	r2, [pc, #128]	@ (8003c1c <TIM_OC6_SetConfig+0xac>)
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	021b      	lsls	r3, r3, #8
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	4a1c      	ldr	r2, [pc, #112]	@ (8003c20 <TIM_OC6_SetConfig+0xb0>)
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	051b      	lsls	r3, r3, #20
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a18      	ldr	r2, [pc, #96]	@ (8003c24 <TIM_OC6_SetConfig+0xb4>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d00b      	beq.n	8003be0 <TIM_OC6_SetConfig+0x70>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a17      	ldr	r2, [pc, #92]	@ (8003c28 <TIM_OC6_SetConfig+0xb8>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d007      	beq.n	8003be0 <TIM_OC6_SetConfig+0x70>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a16      	ldr	r2, [pc, #88]	@ (8003c2c <TIM_OC6_SetConfig+0xbc>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d003      	beq.n	8003be0 <TIM_OC6_SetConfig+0x70>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a15      	ldr	r2, [pc, #84]	@ (8003c30 <TIM_OC6_SetConfig+0xc0>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d109      	bne.n	8003bf4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	4a14      	ldr	r2, [pc, #80]	@ (8003c34 <TIM_OC6_SetConfig+0xc4>)
 8003be4:	4013      	ands	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	029b      	lsls	r3, r3, #10
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	621a      	str	r2, [r3, #32]
}
 8003c0e:	46c0      	nop			@ (mov r8, r8)
 8003c10:	46bd      	mov	sp, r7
 8003c12:	b006      	add	sp, #24
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	46c0      	nop			@ (mov r8, r8)
 8003c18:	ffefffff 	.word	0xffefffff
 8003c1c:	feff8fff 	.word	0xfeff8fff
 8003c20:	ffdfffff 	.word	0xffdfffff
 8003c24:	40012c00 	.word	0x40012c00
 8003c28:	40014000 	.word	0x40014000
 8003c2c:	40014400 	.word	0x40014400
 8003c30:	40014800 	.word	0x40014800
 8003c34:	fffbffff 	.word	0xfffbffff

08003c38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	4393      	bics	r3, r2
 8003c52:	001a      	movs	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	22f0      	movs	r2, #240	@ 0xf0
 8003c62:	4393      	bics	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	220a      	movs	r2, #10
 8003c74:	4393      	bics	r3, r2
 8003c76:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	621a      	str	r2, [r3, #32]
}
 8003c8c:	46c0      	nop			@ (mov r8, r8)
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	b006      	add	sp, #24
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	2210      	movs	r2, #16
 8003cac:	4393      	bics	r3, r2
 8003cae:	001a      	movs	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8003cf4 <TIM_TI2_ConfigInputStage+0x60>)
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	031b      	lsls	r3, r3, #12
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	22a0      	movs	r2, #160	@ 0xa0
 8003cd0:	4393      	bics	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	621a      	str	r2, [r3, #32]
}
 8003cea:	46c0      	nop			@ (mov r8, r8)
 8003cec:	46bd      	mov	sp, r7
 8003cee:	b006      	add	sp, #24
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	46c0      	nop			@ (mov r8, r8)
 8003cf4:	ffff0fff 	.word	0xffff0fff

08003cf8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4a08      	ldr	r2, [pc, #32]	@ (8003d2c <TIM_ITRx_SetConfig+0x34>)
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	2207      	movs	r2, #7
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	609a      	str	r2, [r3, #8]
}
 8003d22:	46c0      	nop			@ (mov r8, r8)
 8003d24:	46bd      	mov	sp, r7
 8003d26:	b004      	add	sp, #16
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	46c0      	nop			@ (mov r8, r8)
 8003d2c:	ffcfff8f 	.word	0xffcfff8f

08003d30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	4a09      	ldr	r2, [pc, #36]	@ (8003d6c <TIM_ETR_SetConfig+0x3c>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	021a      	lsls	r2, r3, #8
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	431a      	orrs	r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	609a      	str	r2, [r3, #8]
}
 8003d64:	46c0      	nop			@ (mov r8, r8)
 8003d66:	46bd      	mov	sp, r7
 8003d68:	b006      	add	sp, #24
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	ffff00ff 	.word	0xffff00ff

08003d70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	221f      	movs	r2, #31
 8003d80:	4013      	ands	r3, r2
 8003d82:	2201      	movs	r2, #1
 8003d84:	409a      	lsls	r2, r3
 8003d86:	0013      	movs	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	43d2      	mvns	r2, r2
 8003d92:	401a      	ands	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6a1a      	ldr	r2, [r3, #32]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	211f      	movs	r1, #31
 8003da0:	400b      	ands	r3, r1
 8003da2:	6879      	ldr	r1, [r7, #4]
 8003da4:	4099      	lsls	r1, r3
 8003da6:	000b      	movs	r3, r1
 8003da8:	431a      	orrs	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	621a      	str	r2, [r3, #32]
}
 8003dae:	46c0      	nop			@ (mov r8, r8)
 8003db0:	46bd      	mov	sp, r7
 8003db2:	b006      	add	sp, #24
 8003db4:	bd80      	pop	{r7, pc}
	...

08003db8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	223c      	movs	r2, #60	@ 0x3c
 8003dc6:	5c9b      	ldrb	r3, [r3, r2]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d101      	bne.n	8003dd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	e04f      	b.n	8003e70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	223c      	movs	r2, #60	@ 0x3c
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	223d      	movs	r2, #61	@ 0x3d
 8003ddc:	2102      	movs	r1, #2
 8003dde:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a20      	ldr	r2, [pc, #128]	@ (8003e78 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d108      	bne.n	8003e0c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4a1f      	ldr	r2, [pc, #124]	@ (8003e7c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2270      	movs	r2, #112	@ 0x70
 8003e10:	4393      	bics	r3, r2
 8003e12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a13      	ldr	r2, [pc, #76]	@ (8003e78 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d009      	beq.n	8003e44 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a12      	ldr	r2, [pc, #72]	@ (8003e80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d004      	beq.n	8003e44 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a11      	ldr	r2, [pc, #68]	@ (8003e84 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d10c      	bne.n	8003e5e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	2280      	movs	r2, #128	@ 0x80
 8003e48:	4393      	bics	r3, r2
 8003e4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	223d      	movs	r2, #61	@ 0x3d
 8003e62:	2101      	movs	r1, #1
 8003e64:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	223c      	movs	r2, #60	@ 0x3c
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	0018      	movs	r0, r3
 8003e72:	46bd      	mov	sp, r7
 8003e74:	b004      	add	sp, #16
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40012c00 	.word	0x40012c00
 8003e7c:	ff0fffff 	.word	0xff0fffff
 8003e80:	40000400 	.word	0x40000400
 8003e84:	40014000 	.word	0x40014000

08003e88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	223c      	movs	r2, #60	@ 0x3c
 8003e9a:	5c9b      	ldrb	r3, [r3, r2]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e06f      	b.n	8003f84 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	223c      	movs	r2, #60	@ 0x3c
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	22ff      	movs	r2, #255	@ 0xff
 8003eb0:	4393      	bics	r3, r2
 8003eb2:	001a      	movs	r2, r3
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4a33      	ldr	r2, [pc, #204]	@ (8003f8c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003ec0:	401a      	ands	r2, r3
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	4a30      	ldr	r2, [pc, #192]	@ (8003f90 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003ece:	401a      	ands	r2, r3
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4a2e      	ldr	r2, [pc, #184]	@ (8003f94 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8003edc:	401a      	ands	r2, r3
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4a2b      	ldr	r2, [pc, #172]	@ (8003f98 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003eea:	401a      	ands	r2, r3
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4a29      	ldr	r2, [pc, #164]	@ (8003f9c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003ef8:	401a      	ands	r2, r3
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4a26      	ldr	r2, [pc, #152]	@ (8003fa0 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003f06:	401a      	ands	r2, r3
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4a24      	ldr	r2, [pc, #144]	@ (8003fa4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003f14:	401a      	ands	r2, r3
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	041b      	lsls	r3, r3, #16
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4a21      	ldr	r2, [pc, #132]	@ (8003fa8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003f24:	401a      	ands	r2, r3
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a1e      	ldr	r2, [pc, #120]	@ (8003fac <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d11c      	bne.n	8003f72 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	4a1d      	ldr	r2, [pc, #116]	@ (8003fb0 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003f3c:	401a      	ands	r2, r3
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f42:	051b      	lsls	r3, r3, #20
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4a1a      	ldr	r2, [pc, #104]	@ (8003fb4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003f4c:	401a      	ands	r2, r3
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4a17      	ldr	r2, [pc, #92]	@ (8003fb8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003f5a:	401a      	ands	r2, r3
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f60:	4313      	orrs	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4a15      	ldr	r2, [pc, #84]	@ (8003fbc <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003f68:	401a      	ands	r2, r3
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	223c      	movs	r2, #60	@ 0x3c
 8003f7e:	2100      	movs	r1, #0
 8003f80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	0018      	movs	r0, r3
 8003f86:	46bd      	mov	sp, r7
 8003f88:	b004      	add	sp, #16
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	fffffcff 	.word	0xfffffcff
 8003f90:	fffffbff 	.word	0xfffffbff
 8003f94:	fffff7ff 	.word	0xfffff7ff
 8003f98:	ffffefff 	.word	0xffffefff
 8003f9c:	ffffdfff 	.word	0xffffdfff
 8003fa0:	ffffbfff 	.word	0xffffbfff
 8003fa4:	fff0ffff 	.word	0xfff0ffff
 8003fa8:	efffffff 	.word	0xefffffff
 8003fac:	40012c00 	.word	0x40012c00
 8003fb0:	ff0fffff 	.word	0xff0fffff
 8003fb4:	feffffff 	.word	0xfeffffff
 8003fb8:	fdffffff 	.word	0xfdffffff
 8003fbc:	dfffffff 	.word	0xdfffffff

08003fc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e046      	b.n	8004060 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2288      	movs	r2, #136	@ 0x88
 8003fd6:	589b      	ldr	r3, [r3, r2]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d107      	bne.n	8003fec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2284      	movs	r2, #132	@ 0x84
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	f7fc fec4 	bl	8000d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2288      	movs	r2, #136	@ 0x88
 8003ff0:	2124      	movs	r1, #36	@ 0x24
 8003ff2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2101      	movs	r1, #1
 8004000:	438a      	bics	r2, r1
 8004002:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	0018      	movs	r0, r3
 8004010:	f000 fa74 	bl	80044fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	0018      	movs	r0, r3
 8004018:	f000 f8cc 	bl	80041b4 <UART_SetConfig>
 800401c:	0003      	movs	r3, r0
 800401e:	2b01      	cmp	r3, #1
 8004020:	d101      	bne.n	8004026 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e01c      	b.n	8004060 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	490d      	ldr	r1, [pc, #52]	@ (8004068 <HAL_UART_Init+0xa8>)
 8004032:	400a      	ands	r2, r1
 8004034:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	212a      	movs	r1, #42	@ 0x2a
 8004042:	438a      	bics	r2, r1
 8004044:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2101      	movs	r1, #1
 8004052:	430a      	orrs	r2, r1
 8004054:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	0018      	movs	r0, r3
 800405a:	f000 fb03 	bl	8004664 <UART_CheckIdleState>
 800405e:	0003      	movs	r3, r0
}
 8004060:	0018      	movs	r0, r3
 8004062:	46bd      	mov	sp, r7
 8004064:	b002      	add	sp, #8
 8004066:	bd80      	pop	{r7, pc}
 8004068:	ffffb7ff 	.word	0xffffb7ff

0800406c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b08a      	sub	sp, #40	@ 0x28
 8004070:	af02      	add	r7, sp, #8
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	603b      	str	r3, [r7, #0]
 8004078:	1dbb      	adds	r3, r7, #6
 800407a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2288      	movs	r2, #136	@ 0x88
 8004080:	589b      	ldr	r3, [r3, r2]
 8004082:	2b20      	cmp	r3, #32
 8004084:	d000      	beq.n	8004088 <HAL_UART_Transmit+0x1c>
 8004086:	e090      	b.n	80041aa <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_UART_Transmit+0x2a>
 800408e:	1dbb      	adds	r3, r7, #6
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e088      	b.n	80041ac <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	689a      	ldr	r2, [r3, #8]
 800409e:	2380      	movs	r3, #128	@ 0x80
 80040a0:	015b      	lsls	r3, r3, #5
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d109      	bne.n	80040ba <HAL_UART_Transmit+0x4e>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d105      	bne.n	80040ba <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	2201      	movs	r2, #1
 80040b2:	4013      	ands	r3, r2
 80040b4:	d001      	beq.n	80040ba <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e078      	b.n	80041ac <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2290      	movs	r2, #144	@ 0x90
 80040be:	2100      	movs	r1, #0
 80040c0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2288      	movs	r2, #136	@ 0x88
 80040c6:	2121      	movs	r1, #33	@ 0x21
 80040c8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040ca:	f7fc ffaf 	bl	800102c <HAL_GetTick>
 80040ce:	0003      	movs	r3, r0
 80040d0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	1dba      	adds	r2, r7, #6
 80040d6:	2154      	movs	r1, #84	@ 0x54
 80040d8:	8812      	ldrh	r2, [r2, #0]
 80040da:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	1dba      	adds	r2, r7, #6
 80040e0:	2156      	movs	r1, #86	@ 0x56
 80040e2:	8812      	ldrh	r2, [r2, #0]
 80040e4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	2380      	movs	r3, #128	@ 0x80
 80040ec:	015b      	lsls	r3, r3, #5
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d108      	bne.n	8004104 <HAL_UART_Transmit+0x98>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d104      	bne.n	8004104 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	61bb      	str	r3, [r7, #24]
 8004102:	e003      	b.n	800410c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004108:	2300      	movs	r3, #0
 800410a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800410c:	e030      	b.n	8004170 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	0013      	movs	r3, r2
 8004118:	2200      	movs	r2, #0
 800411a:	2180      	movs	r1, #128	@ 0x80
 800411c:	f000 fb4c 	bl	80047b8 <UART_WaitOnFlagUntilTimeout>
 8004120:	1e03      	subs	r3, r0, #0
 8004122:	d005      	beq.n	8004130 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2288      	movs	r2, #136	@ 0x88
 8004128:	2120      	movs	r1, #32
 800412a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e03d      	b.n	80041ac <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10b      	bne.n	800414e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	001a      	movs	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	05d2      	lsls	r2, r2, #23
 8004142:	0dd2      	lsrs	r2, r2, #23
 8004144:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	3302      	adds	r3, #2
 800414a:	61bb      	str	r3, [r7, #24]
 800414c:	e007      	b.n	800415e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	781a      	ldrb	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	3301      	adds	r3, #1
 800415c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2256      	movs	r2, #86	@ 0x56
 8004162:	5a9b      	ldrh	r3, [r3, r2]
 8004164:	b29b      	uxth	r3, r3
 8004166:	3b01      	subs	r3, #1
 8004168:	b299      	uxth	r1, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2256      	movs	r2, #86	@ 0x56
 800416e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2256      	movs	r2, #86	@ 0x56
 8004174:	5a9b      	ldrh	r3, [r3, r2]
 8004176:	b29b      	uxth	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1c8      	bne.n	800410e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	0013      	movs	r3, r2
 8004186:	2200      	movs	r2, #0
 8004188:	2140      	movs	r1, #64	@ 0x40
 800418a:	f000 fb15 	bl	80047b8 <UART_WaitOnFlagUntilTimeout>
 800418e:	1e03      	subs	r3, r0, #0
 8004190:	d005      	beq.n	800419e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2288      	movs	r2, #136	@ 0x88
 8004196:	2120      	movs	r1, #32
 8004198:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e006      	b.n	80041ac <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2288      	movs	r2, #136	@ 0x88
 80041a2:	2120      	movs	r1, #32
 80041a4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80041a6:	2300      	movs	r3, #0
 80041a8:	e000      	b.n	80041ac <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80041aa:	2302      	movs	r3, #2
  }
}
 80041ac:	0018      	movs	r0, r3
 80041ae:	46bd      	mov	sp, r7
 80041b0:	b008      	add	sp, #32
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b088      	sub	sp, #32
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041bc:	231a      	movs	r3, #26
 80041be:	18fb      	adds	r3, r7, r3
 80041c0:	2200      	movs	r2, #0
 80041c2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	431a      	orrs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	4313      	orrs	r3, r2
 80041da:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4abc      	ldr	r2, [pc, #752]	@ (80044d4 <UART_SetConfig+0x320>)
 80041e4:	4013      	ands	r3, r2
 80041e6:	0019      	movs	r1, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	69fa      	ldr	r2, [r7, #28]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	4ab7      	ldr	r2, [pc, #732]	@ (80044d8 <UART_SetConfig+0x324>)
 80041fa:	4013      	ands	r3, r2
 80041fc:	0019      	movs	r1, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	69fa      	ldr	r2, [r7, #28]
 8004216:	4313      	orrs	r3, r2
 8004218:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	4aae      	ldr	r2, [pc, #696]	@ (80044dc <UART_SetConfig+0x328>)
 8004222:	4013      	ands	r3, r2
 8004224:	0019      	movs	r1, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69fa      	ldr	r2, [r7, #28]
 800422c:	430a      	orrs	r2, r1
 800422e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004236:	220f      	movs	r2, #15
 8004238:	4393      	bics	r3, r2
 800423a:	0019      	movs	r1, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4aa4      	ldr	r2, [pc, #656]	@ (80044e0 <UART_SetConfig+0x32c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d127      	bne.n	80042a2 <UART_SetConfig+0xee>
 8004252:	4ba4      	ldr	r3, [pc, #656]	@ (80044e4 <UART_SetConfig+0x330>)
 8004254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004256:	2203      	movs	r2, #3
 8004258:	4013      	ands	r3, r2
 800425a:	2b03      	cmp	r3, #3
 800425c:	d017      	beq.n	800428e <UART_SetConfig+0xda>
 800425e:	d81b      	bhi.n	8004298 <UART_SetConfig+0xe4>
 8004260:	2b02      	cmp	r3, #2
 8004262:	d00a      	beq.n	800427a <UART_SetConfig+0xc6>
 8004264:	d818      	bhi.n	8004298 <UART_SetConfig+0xe4>
 8004266:	2b00      	cmp	r3, #0
 8004268:	d002      	beq.n	8004270 <UART_SetConfig+0xbc>
 800426a:	2b01      	cmp	r3, #1
 800426c:	d00a      	beq.n	8004284 <UART_SetConfig+0xd0>
 800426e:	e013      	b.n	8004298 <UART_SetConfig+0xe4>
 8004270:	231b      	movs	r3, #27
 8004272:	18fb      	adds	r3, r7, r3
 8004274:	2200      	movs	r2, #0
 8004276:	701a      	strb	r2, [r3, #0]
 8004278:	e058      	b.n	800432c <UART_SetConfig+0x178>
 800427a:	231b      	movs	r3, #27
 800427c:	18fb      	adds	r3, r7, r3
 800427e:	2202      	movs	r2, #2
 8004280:	701a      	strb	r2, [r3, #0]
 8004282:	e053      	b.n	800432c <UART_SetConfig+0x178>
 8004284:	231b      	movs	r3, #27
 8004286:	18fb      	adds	r3, r7, r3
 8004288:	2204      	movs	r2, #4
 800428a:	701a      	strb	r2, [r3, #0]
 800428c:	e04e      	b.n	800432c <UART_SetConfig+0x178>
 800428e:	231b      	movs	r3, #27
 8004290:	18fb      	adds	r3, r7, r3
 8004292:	2208      	movs	r2, #8
 8004294:	701a      	strb	r2, [r3, #0]
 8004296:	e049      	b.n	800432c <UART_SetConfig+0x178>
 8004298:	231b      	movs	r3, #27
 800429a:	18fb      	adds	r3, r7, r3
 800429c:	2210      	movs	r2, #16
 800429e:	701a      	strb	r2, [r3, #0]
 80042a0:	e044      	b.n	800432c <UART_SetConfig+0x178>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a90      	ldr	r2, [pc, #576]	@ (80044e8 <UART_SetConfig+0x334>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d127      	bne.n	80042fc <UART_SetConfig+0x148>
 80042ac:	4b8d      	ldr	r3, [pc, #564]	@ (80044e4 <UART_SetConfig+0x330>)
 80042ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042b0:	220c      	movs	r2, #12
 80042b2:	4013      	ands	r3, r2
 80042b4:	2b0c      	cmp	r3, #12
 80042b6:	d017      	beq.n	80042e8 <UART_SetConfig+0x134>
 80042b8:	d81b      	bhi.n	80042f2 <UART_SetConfig+0x13e>
 80042ba:	2b08      	cmp	r3, #8
 80042bc:	d00a      	beq.n	80042d4 <UART_SetConfig+0x120>
 80042be:	d818      	bhi.n	80042f2 <UART_SetConfig+0x13e>
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d002      	beq.n	80042ca <UART_SetConfig+0x116>
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	d00a      	beq.n	80042de <UART_SetConfig+0x12a>
 80042c8:	e013      	b.n	80042f2 <UART_SetConfig+0x13e>
 80042ca:	231b      	movs	r3, #27
 80042cc:	18fb      	adds	r3, r7, r3
 80042ce:	2200      	movs	r2, #0
 80042d0:	701a      	strb	r2, [r3, #0]
 80042d2:	e02b      	b.n	800432c <UART_SetConfig+0x178>
 80042d4:	231b      	movs	r3, #27
 80042d6:	18fb      	adds	r3, r7, r3
 80042d8:	2202      	movs	r2, #2
 80042da:	701a      	strb	r2, [r3, #0]
 80042dc:	e026      	b.n	800432c <UART_SetConfig+0x178>
 80042de:	231b      	movs	r3, #27
 80042e0:	18fb      	adds	r3, r7, r3
 80042e2:	2204      	movs	r2, #4
 80042e4:	701a      	strb	r2, [r3, #0]
 80042e6:	e021      	b.n	800432c <UART_SetConfig+0x178>
 80042e8:	231b      	movs	r3, #27
 80042ea:	18fb      	adds	r3, r7, r3
 80042ec:	2208      	movs	r2, #8
 80042ee:	701a      	strb	r2, [r3, #0]
 80042f0:	e01c      	b.n	800432c <UART_SetConfig+0x178>
 80042f2:	231b      	movs	r3, #27
 80042f4:	18fb      	adds	r3, r7, r3
 80042f6:	2210      	movs	r2, #16
 80042f8:	701a      	strb	r2, [r3, #0]
 80042fa:	e017      	b.n	800432c <UART_SetConfig+0x178>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a7a      	ldr	r2, [pc, #488]	@ (80044ec <UART_SetConfig+0x338>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d104      	bne.n	8004310 <UART_SetConfig+0x15c>
 8004306:	231b      	movs	r3, #27
 8004308:	18fb      	adds	r3, r7, r3
 800430a:	2200      	movs	r2, #0
 800430c:	701a      	strb	r2, [r3, #0]
 800430e:	e00d      	b.n	800432c <UART_SetConfig+0x178>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a76      	ldr	r2, [pc, #472]	@ (80044f0 <UART_SetConfig+0x33c>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d104      	bne.n	8004324 <UART_SetConfig+0x170>
 800431a:	231b      	movs	r3, #27
 800431c:	18fb      	adds	r3, r7, r3
 800431e:	2200      	movs	r2, #0
 8004320:	701a      	strb	r2, [r3, #0]
 8004322:	e003      	b.n	800432c <UART_SetConfig+0x178>
 8004324:	231b      	movs	r3, #27
 8004326:	18fb      	adds	r3, r7, r3
 8004328:	2210      	movs	r2, #16
 800432a:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	69da      	ldr	r2, [r3, #28]
 8004330:	2380      	movs	r3, #128	@ 0x80
 8004332:	021b      	lsls	r3, r3, #8
 8004334:	429a      	cmp	r2, r3
 8004336:	d000      	beq.n	800433a <UART_SetConfig+0x186>
 8004338:	e065      	b.n	8004406 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800433a:	231b      	movs	r3, #27
 800433c:	18fb      	adds	r3, r7, r3
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b08      	cmp	r3, #8
 8004342:	d015      	beq.n	8004370 <UART_SetConfig+0x1bc>
 8004344:	dc18      	bgt.n	8004378 <UART_SetConfig+0x1c4>
 8004346:	2b04      	cmp	r3, #4
 8004348:	d00d      	beq.n	8004366 <UART_SetConfig+0x1b2>
 800434a:	dc15      	bgt.n	8004378 <UART_SetConfig+0x1c4>
 800434c:	2b00      	cmp	r3, #0
 800434e:	d002      	beq.n	8004356 <UART_SetConfig+0x1a2>
 8004350:	2b02      	cmp	r3, #2
 8004352:	d005      	beq.n	8004360 <UART_SetConfig+0x1ac>
 8004354:	e010      	b.n	8004378 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004356:	f7fe fbe7 	bl	8002b28 <HAL_RCC_GetPCLK1Freq>
 800435a:	0003      	movs	r3, r0
 800435c:	617b      	str	r3, [r7, #20]
        break;
 800435e:	e012      	b.n	8004386 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004360:	4b64      	ldr	r3, [pc, #400]	@ (80044f4 <UART_SetConfig+0x340>)
 8004362:	617b      	str	r3, [r7, #20]
        break;
 8004364:	e00f      	b.n	8004386 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004366:	f7fe fb53 	bl	8002a10 <HAL_RCC_GetSysClockFreq>
 800436a:	0003      	movs	r3, r0
 800436c:	617b      	str	r3, [r7, #20]
        break;
 800436e:	e00a      	b.n	8004386 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004370:	2380      	movs	r3, #128	@ 0x80
 8004372:	021b      	lsls	r3, r3, #8
 8004374:	617b      	str	r3, [r7, #20]
        break;
 8004376:	e006      	b.n	8004386 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800437c:	231a      	movs	r3, #26
 800437e:	18fb      	adds	r3, r7, r3
 8004380:	2201      	movs	r2, #1
 8004382:	701a      	strb	r2, [r3, #0]
        break;
 8004384:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d100      	bne.n	800438e <UART_SetConfig+0x1da>
 800438c:	e08d      	b.n	80044aa <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004392:	4b59      	ldr	r3, [pc, #356]	@ (80044f8 <UART_SetConfig+0x344>)
 8004394:	0052      	lsls	r2, r2, #1
 8004396:	5ad3      	ldrh	r3, [r2, r3]
 8004398:	0019      	movs	r1, r3
 800439a:	6978      	ldr	r0, [r7, #20]
 800439c:	f7fb fec2 	bl	8000124 <__udivsi3>
 80043a0:	0003      	movs	r3, r0
 80043a2:	005a      	lsls	r2, r3, #1
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	085b      	lsrs	r3, r3, #1
 80043aa:	18d2      	adds	r2, r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	0019      	movs	r1, r3
 80043b2:	0010      	movs	r0, r2
 80043b4:	f7fb feb6 	bl	8000124 <__udivsi3>
 80043b8:	0003      	movs	r3, r0
 80043ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	2b0f      	cmp	r3, #15
 80043c0:	d91c      	bls.n	80043fc <UART_SetConfig+0x248>
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	2380      	movs	r3, #128	@ 0x80
 80043c6:	025b      	lsls	r3, r3, #9
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d217      	bcs.n	80043fc <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	200e      	movs	r0, #14
 80043d2:	183b      	adds	r3, r7, r0
 80043d4:	210f      	movs	r1, #15
 80043d6:	438a      	bics	r2, r1
 80043d8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	085b      	lsrs	r3, r3, #1
 80043de:	b29b      	uxth	r3, r3
 80043e0:	2207      	movs	r2, #7
 80043e2:	4013      	ands	r3, r2
 80043e4:	b299      	uxth	r1, r3
 80043e6:	183b      	adds	r3, r7, r0
 80043e8:	183a      	adds	r2, r7, r0
 80043ea:	8812      	ldrh	r2, [r2, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	183a      	adds	r2, r7, r0
 80043f6:	8812      	ldrh	r2, [r2, #0]
 80043f8:	60da      	str	r2, [r3, #12]
 80043fa:	e056      	b.n	80044aa <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80043fc:	231a      	movs	r3, #26
 80043fe:	18fb      	adds	r3, r7, r3
 8004400:	2201      	movs	r2, #1
 8004402:	701a      	strb	r2, [r3, #0]
 8004404:	e051      	b.n	80044aa <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004406:	231b      	movs	r3, #27
 8004408:	18fb      	adds	r3, r7, r3
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b08      	cmp	r3, #8
 800440e:	d015      	beq.n	800443c <UART_SetConfig+0x288>
 8004410:	dc18      	bgt.n	8004444 <UART_SetConfig+0x290>
 8004412:	2b04      	cmp	r3, #4
 8004414:	d00d      	beq.n	8004432 <UART_SetConfig+0x27e>
 8004416:	dc15      	bgt.n	8004444 <UART_SetConfig+0x290>
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <UART_SetConfig+0x26e>
 800441c:	2b02      	cmp	r3, #2
 800441e:	d005      	beq.n	800442c <UART_SetConfig+0x278>
 8004420:	e010      	b.n	8004444 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004422:	f7fe fb81 	bl	8002b28 <HAL_RCC_GetPCLK1Freq>
 8004426:	0003      	movs	r3, r0
 8004428:	617b      	str	r3, [r7, #20]
        break;
 800442a:	e012      	b.n	8004452 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800442c:	4b31      	ldr	r3, [pc, #196]	@ (80044f4 <UART_SetConfig+0x340>)
 800442e:	617b      	str	r3, [r7, #20]
        break;
 8004430:	e00f      	b.n	8004452 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004432:	f7fe faed 	bl	8002a10 <HAL_RCC_GetSysClockFreq>
 8004436:	0003      	movs	r3, r0
 8004438:	617b      	str	r3, [r7, #20]
        break;
 800443a:	e00a      	b.n	8004452 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800443c:	2380      	movs	r3, #128	@ 0x80
 800443e:	021b      	lsls	r3, r3, #8
 8004440:	617b      	str	r3, [r7, #20]
        break;
 8004442:	e006      	b.n	8004452 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004448:	231a      	movs	r3, #26
 800444a:	18fb      	adds	r3, r7, r3
 800444c:	2201      	movs	r2, #1
 800444e:	701a      	strb	r2, [r3, #0]
        break;
 8004450:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d028      	beq.n	80044aa <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800445c:	4b26      	ldr	r3, [pc, #152]	@ (80044f8 <UART_SetConfig+0x344>)
 800445e:	0052      	lsls	r2, r2, #1
 8004460:	5ad3      	ldrh	r3, [r2, r3]
 8004462:	0019      	movs	r1, r3
 8004464:	6978      	ldr	r0, [r7, #20]
 8004466:	f7fb fe5d 	bl	8000124 <__udivsi3>
 800446a:	0003      	movs	r3, r0
 800446c:	001a      	movs	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	085b      	lsrs	r3, r3, #1
 8004474:	18d2      	adds	r2, r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	0019      	movs	r1, r3
 800447c:	0010      	movs	r0, r2
 800447e:	f7fb fe51 	bl	8000124 <__udivsi3>
 8004482:	0003      	movs	r3, r0
 8004484:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	2b0f      	cmp	r3, #15
 800448a:	d90a      	bls.n	80044a2 <UART_SetConfig+0x2ee>
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	2380      	movs	r3, #128	@ 0x80
 8004490:	025b      	lsls	r3, r3, #9
 8004492:	429a      	cmp	r2, r3
 8004494:	d205      	bcs.n	80044a2 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	b29a      	uxth	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	60da      	str	r2, [r3, #12]
 80044a0:	e003      	b.n	80044aa <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80044a2:	231a      	movs	r3, #26
 80044a4:	18fb      	adds	r3, r7, r3
 80044a6:	2201      	movs	r2, #1
 80044a8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	226a      	movs	r2, #106	@ 0x6a
 80044ae:	2101      	movs	r1, #1
 80044b0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2268      	movs	r2, #104	@ 0x68
 80044b6:	2101      	movs	r1, #1
 80044b8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80044c6:	231a      	movs	r3, #26
 80044c8:	18fb      	adds	r3, r7, r3
 80044ca:	781b      	ldrb	r3, [r3, #0]
}
 80044cc:	0018      	movs	r0, r3
 80044ce:	46bd      	mov	sp, r7
 80044d0:	b008      	add	sp, #32
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	cfff69f3 	.word	0xcfff69f3
 80044d8:	ffffcfff 	.word	0xffffcfff
 80044dc:	11fff4ff 	.word	0x11fff4ff
 80044e0:	40013800 	.word	0x40013800
 80044e4:	40021000 	.word	0x40021000
 80044e8:	40004400 	.word	0x40004400
 80044ec:	40004800 	.word	0x40004800
 80044f0:	40004c00 	.word	0x40004c00
 80044f4:	00f42400 	.word	0x00f42400
 80044f8:	080055d4 	.word	0x080055d4

080044fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004508:	2208      	movs	r2, #8
 800450a:	4013      	ands	r3, r2
 800450c:	d00b      	beq.n	8004526 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	4a4a      	ldr	r2, [pc, #296]	@ (8004640 <UART_AdvFeatureConfig+0x144>)
 8004516:	4013      	ands	r3, r2
 8004518:	0019      	movs	r1, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800452a:	2201      	movs	r2, #1
 800452c:	4013      	ands	r3, r2
 800452e:	d00b      	beq.n	8004548 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	4a43      	ldr	r2, [pc, #268]	@ (8004644 <UART_AdvFeatureConfig+0x148>)
 8004538:	4013      	ands	r3, r2
 800453a:	0019      	movs	r1, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800454c:	2202      	movs	r2, #2
 800454e:	4013      	ands	r3, r2
 8004550:	d00b      	beq.n	800456a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	4a3b      	ldr	r2, [pc, #236]	@ (8004648 <UART_AdvFeatureConfig+0x14c>)
 800455a:	4013      	ands	r3, r2
 800455c:	0019      	movs	r1, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456e:	2204      	movs	r2, #4
 8004570:	4013      	ands	r3, r2
 8004572:	d00b      	beq.n	800458c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	4a34      	ldr	r2, [pc, #208]	@ (800464c <UART_AdvFeatureConfig+0x150>)
 800457c:	4013      	ands	r3, r2
 800457e:	0019      	movs	r1, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004590:	2210      	movs	r2, #16
 8004592:	4013      	ands	r3, r2
 8004594:	d00b      	beq.n	80045ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	4a2c      	ldr	r2, [pc, #176]	@ (8004650 <UART_AdvFeatureConfig+0x154>)
 800459e:	4013      	ands	r3, r2
 80045a0:	0019      	movs	r1, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b2:	2220      	movs	r2, #32
 80045b4:	4013      	ands	r3, r2
 80045b6:	d00b      	beq.n	80045d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	4a25      	ldr	r2, [pc, #148]	@ (8004654 <UART_AdvFeatureConfig+0x158>)
 80045c0:	4013      	ands	r3, r2
 80045c2:	0019      	movs	r1, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d4:	2240      	movs	r2, #64	@ 0x40
 80045d6:	4013      	ands	r3, r2
 80045d8:	d01d      	beq.n	8004616 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004658 <UART_AdvFeatureConfig+0x15c>)
 80045e2:	4013      	ands	r3, r2
 80045e4:	0019      	movs	r1, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045f6:	2380      	movs	r3, #128	@ 0x80
 80045f8:	035b      	lsls	r3, r3, #13
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d10b      	bne.n	8004616 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	4a15      	ldr	r2, [pc, #84]	@ (800465c <UART_AdvFeatureConfig+0x160>)
 8004606:	4013      	ands	r3, r2
 8004608:	0019      	movs	r1, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	430a      	orrs	r2, r1
 8004614:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800461a:	2280      	movs	r2, #128	@ 0x80
 800461c:	4013      	ands	r3, r2
 800461e:	d00b      	beq.n	8004638 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	4a0e      	ldr	r2, [pc, #56]	@ (8004660 <UART_AdvFeatureConfig+0x164>)
 8004628:	4013      	ands	r3, r2
 800462a:	0019      	movs	r1, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	605a      	str	r2, [r3, #4]
  }
}
 8004638:	46c0      	nop			@ (mov r8, r8)
 800463a:	46bd      	mov	sp, r7
 800463c:	b002      	add	sp, #8
 800463e:	bd80      	pop	{r7, pc}
 8004640:	ffff7fff 	.word	0xffff7fff
 8004644:	fffdffff 	.word	0xfffdffff
 8004648:	fffeffff 	.word	0xfffeffff
 800464c:	fffbffff 	.word	0xfffbffff
 8004650:	ffffefff 	.word	0xffffefff
 8004654:	ffffdfff 	.word	0xffffdfff
 8004658:	ffefffff 	.word	0xffefffff
 800465c:	ff9fffff 	.word	0xff9fffff
 8004660:	fff7ffff 	.word	0xfff7ffff

08004664 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b092      	sub	sp, #72	@ 0x48
 8004668:	af02      	add	r7, sp, #8
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2290      	movs	r2, #144	@ 0x90
 8004670:	2100      	movs	r1, #0
 8004672:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004674:	f7fc fcda 	bl	800102c <HAL_GetTick>
 8004678:	0003      	movs	r3, r0
 800467a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2208      	movs	r2, #8
 8004684:	4013      	ands	r3, r2
 8004686:	2b08      	cmp	r3, #8
 8004688:	d12d      	bne.n	80046e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800468a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800468c:	2280      	movs	r2, #128	@ 0x80
 800468e:	0391      	lsls	r1, r2, #14
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	4a47      	ldr	r2, [pc, #284]	@ (80047b0 <UART_CheckIdleState+0x14c>)
 8004694:	9200      	str	r2, [sp, #0]
 8004696:	2200      	movs	r2, #0
 8004698:	f000 f88e 	bl	80047b8 <UART_WaitOnFlagUntilTimeout>
 800469c:	1e03      	subs	r3, r0, #0
 800469e:	d022      	beq.n	80046e6 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046a0:	f3ef 8310 	mrs	r3, PRIMASK
 80046a4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80046a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80046a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046aa:	2301      	movs	r3, #1
 80046ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b0:	f383 8810 	msr	PRIMASK, r3
}
 80046b4:	46c0      	nop			@ (mov r8, r8)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2180      	movs	r1, #128	@ 0x80
 80046c2:	438a      	bics	r2, r1
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046cc:	f383 8810 	msr	PRIMASK, r3
}
 80046d0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2288      	movs	r2, #136	@ 0x88
 80046d6:	2120      	movs	r1, #32
 80046d8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2284      	movs	r2, #132	@ 0x84
 80046de:	2100      	movs	r1, #0
 80046e0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e060      	b.n	80047a8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2204      	movs	r2, #4
 80046ee:	4013      	ands	r3, r2
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d146      	bne.n	8004782 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046f6:	2280      	movs	r2, #128	@ 0x80
 80046f8:	03d1      	lsls	r1, r2, #15
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	4a2c      	ldr	r2, [pc, #176]	@ (80047b0 <UART_CheckIdleState+0x14c>)
 80046fe:	9200      	str	r2, [sp, #0]
 8004700:	2200      	movs	r2, #0
 8004702:	f000 f859 	bl	80047b8 <UART_WaitOnFlagUntilTimeout>
 8004706:	1e03      	subs	r3, r0, #0
 8004708:	d03b      	beq.n	8004782 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800470a:	f3ef 8310 	mrs	r3, PRIMASK
 800470e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004710:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004712:	637b      	str	r3, [r7, #52]	@ 0x34
 8004714:	2301      	movs	r3, #1
 8004716:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	f383 8810 	msr	PRIMASK, r3
}
 800471e:	46c0      	nop			@ (mov r8, r8)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4922      	ldr	r1, [pc, #136]	@ (80047b4 <UART_CheckIdleState+0x150>)
 800472c:	400a      	ands	r2, r1
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004732:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f383 8810 	msr	PRIMASK, r3
}
 800473a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800473c:	f3ef 8310 	mrs	r3, PRIMASK
 8004740:	61bb      	str	r3, [r7, #24]
  return(result);
 8004742:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004744:	633b      	str	r3, [r7, #48]	@ 0x30
 8004746:	2301      	movs	r3, #1
 8004748:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	f383 8810 	msr	PRIMASK, r3
}
 8004750:	46c0      	nop			@ (mov r8, r8)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2101      	movs	r1, #1
 800475e:	438a      	bics	r2, r1
 8004760:	609a      	str	r2, [r3, #8]
 8004762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004764:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004766:	6a3b      	ldr	r3, [r7, #32]
 8004768:	f383 8810 	msr	PRIMASK, r3
}
 800476c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	228c      	movs	r2, #140	@ 0x8c
 8004772:	2120      	movs	r1, #32
 8004774:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2284      	movs	r2, #132	@ 0x84
 800477a:	2100      	movs	r1, #0
 800477c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e012      	b.n	80047a8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2288      	movs	r2, #136	@ 0x88
 8004786:	2120      	movs	r1, #32
 8004788:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	228c      	movs	r2, #140	@ 0x8c
 800478e:	2120      	movs	r1, #32
 8004790:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2284      	movs	r2, #132	@ 0x84
 80047a2:	2100      	movs	r1, #0
 80047a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	0018      	movs	r0, r3
 80047aa:	46bd      	mov	sp, r7
 80047ac:	b010      	add	sp, #64	@ 0x40
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	01ffffff 	.word	0x01ffffff
 80047b4:	fffffedf 	.word	0xfffffedf

080047b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	603b      	str	r3, [r7, #0]
 80047c4:	1dfb      	adds	r3, r7, #7
 80047c6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c8:	e051      	b.n	800486e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	3301      	adds	r3, #1
 80047ce:	d04e      	beq.n	800486e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047d0:	f7fc fc2c 	bl	800102c <HAL_GetTick>
 80047d4:	0002      	movs	r2, r0
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d302      	bcc.n	80047e6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e051      	b.n	800488e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2204      	movs	r2, #4
 80047f2:	4013      	ands	r3, r2
 80047f4:	d03b      	beq.n	800486e <UART_WaitOnFlagUntilTimeout+0xb6>
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	2b80      	cmp	r3, #128	@ 0x80
 80047fa:	d038      	beq.n	800486e <UART_WaitOnFlagUntilTimeout+0xb6>
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	2b40      	cmp	r3, #64	@ 0x40
 8004800:	d035      	beq.n	800486e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	2208      	movs	r2, #8
 800480a:	4013      	ands	r3, r2
 800480c:	2b08      	cmp	r3, #8
 800480e:	d111      	bne.n	8004834 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2208      	movs	r2, #8
 8004816:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	0018      	movs	r0, r3
 800481c:	f000 f83c 	bl	8004898 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2290      	movs	r2, #144	@ 0x90
 8004824:	2108      	movs	r1, #8
 8004826:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2284      	movs	r2, #132	@ 0x84
 800482c:	2100      	movs	r1, #0
 800482e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e02c      	b.n	800488e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	69da      	ldr	r2, [r3, #28]
 800483a:	2380      	movs	r3, #128	@ 0x80
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	401a      	ands	r2, r3
 8004840:	2380      	movs	r3, #128	@ 0x80
 8004842:	011b      	lsls	r3, r3, #4
 8004844:	429a      	cmp	r2, r3
 8004846:	d112      	bne.n	800486e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2280      	movs	r2, #128	@ 0x80
 800484e:	0112      	lsls	r2, r2, #4
 8004850:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	0018      	movs	r0, r3
 8004856:	f000 f81f 	bl	8004898 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2290      	movs	r2, #144	@ 0x90
 800485e:	2120      	movs	r1, #32
 8004860:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2284      	movs	r2, #132	@ 0x84
 8004866:	2100      	movs	r1, #0
 8004868:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e00f      	b.n	800488e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	4013      	ands	r3, r2
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	425a      	negs	r2, r3
 800487e:	4153      	adcs	r3, r2
 8004880:	b2db      	uxtb	r3, r3
 8004882:	001a      	movs	r2, r3
 8004884:	1dfb      	adds	r3, r7, #7
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	429a      	cmp	r2, r3
 800488a:	d09e      	beq.n	80047ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	0018      	movs	r0, r3
 8004890:	46bd      	mov	sp, r7
 8004892:	b004      	add	sp, #16
 8004894:	bd80      	pop	{r7, pc}
	...

08004898 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b08e      	sub	sp, #56	@ 0x38
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048a0:	f3ef 8310 	mrs	r3, PRIMASK
 80048a4:	617b      	str	r3, [r7, #20]
  return(result);
 80048a6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80048a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80048aa:	2301      	movs	r3, #1
 80048ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	f383 8810 	msr	PRIMASK, r3
}
 80048b4:	46c0      	nop			@ (mov r8, r8)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4926      	ldr	r1, [pc, #152]	@ (800495c <UART_EndRxTransfer+0xc4>)
 80048c2:	400a      	ands	r2, r1
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	f383 8810 	msr	PRIMASK, r3
}
 80048d0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048d2:	f3ef 8310 	mrs	r3, PRIMASK
 80048d6:	623b      	str	r3, [r7, #32]
  return(result);
 80048d8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80048da:	633b      	str	r3, [r7, #48]	@ 0x30
 80048dc:	2301      	movs	r3, #1
 80048de:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e2:	f383 8810 	msr	PRIMASK, r3
}
 80048e6:	46c0      	nop			@ (mov r8, r8)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689a      	ldr	r2, [r3, #8]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	491b      	ldr	r1, [pc, #108]	@ (8004960 <UART_EndRxTransfer+0xc8>)
 80048f4:	400a      	ands	r2, r1
 80048f6:	609a      	str	r2, [r3, #8]
 80048f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048fe:	f383 8810 	msr	PRIMASK, r3
}
 8004902:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004908:	2b01      	cmp	r3, #1
 800490a:	d118      	bne.n	800493e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800490c:	f3ef 8310 	mrs	r3, PRIMASK
 8004910:	60bb      	str	r3, [r7, #8]
  return(result);
 8004912:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004914:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004916:	2301      	movs	r3, #1
 8004918:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f383 8810 	msr	PRIMASK, r3
}
 8004920:	46c0      	nop			@ (mov r8, r8)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2110      	movs	r1, #16
 800492e:	438a      	bics	r2, r1
 8004930:	601a      	str	r2, [r3, #0]
 8004932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004934:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	f383 8810 	msr	PRIMASK, r3
}
 800493c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	228c      	movs	r2, #140	@ 0x8c
 8004942:	2120      	movs	r1, #32
 8004944:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004952:	46c0      	nop			@ (mov r8, r8)
 8004954:	46bd      	mov	sp, r7
 8004956:	b00e      	add	sp, #56	@ 0x38
 8004958:	bd80      	pop	{r7, pc}
 800495a:	46c0      	nop			@ (mov r8, r8)
 800495c:	fffffedf 	.word	0xfffffedf
 8004960:	effffffe 	.word	0xeffffffe

08004964 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2284      	movs	r2, #132	@ 0x84
 8004970:	5c9b      	ldrb	r3, [r3, r2]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d101      	bne.n	800497a <HAL_UARTEx_DisableFifoMode+0x16>
 8004976:	2302      	movs	r3, #2
 8004978:	e027      	b.n	80049ca <HAL_UARTEx_DisableFifoMode+0x66>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2284      	movs	r2, #132	@ 0x84
 800497e:	2101      	movs	r1, #1
 8004980:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2288      	movs	r2, #136	@ 0x88
 8004986:	2124      	movs	r1, #36	@ 0x24
 8004988:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2101      	movs	r1, #1
 800499e:	438a      	bics	r2, r1
 80049a0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4a0b      	ldr	r2, [pc, #44]	@ (80049d4 <HAL_UARTEx_DisableFifoMode+0x70>)
 80049a6:	4013      	ands	r3, r2
 80049a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2288      	movs	r2, #136	@ 0x88
 80049bc:	2120      	movs	r1, #32
 80049be:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2284      	movs	r2, #132	@ 0x84
 80049c4:	2100      	movs	r1, #0
 80049c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	0018      	movs	r0, r3
 80049cc:	46bd      	mov	sp, r7
 80049ce:	b004      	add	sp, #16
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	46c0      	nop			@ (mov r8, r8)
 80049d4:	dfffffff 	.word	0xdfffffff

080049d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2284      	movs	r2, #132	@ 0x84
 80049e6:	5c9b      	ldrb	r3, [r3, r2]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d101      	bne.n	80049f0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80049ec:	2302      	movs	r3, #2
 80049ee:	e02e      	b.n	8004a4e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2284      	movs	r2, #132	@ 0x84
 80049f4:	2101      	movs	r1, #1
 80049f6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2288      	movs	r2, #136	@ 0x88
 80049fc:	2124      	movs	r1, #36	@ 0x24
 80049fe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2101      	movs	r1, #1
 8004a14:	438a      	bics	r2, r1
 8004a16:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	08d9      	lsrs	r1, r3, #3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	0018      	movs	r0, r3
 8004a30:	f000 f854 	bl	8004adc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2288      	movs	r2, #136	@ 0x88
 8004a40:	2120      	movs	r1, #32
 8004a42:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2284      	movs	r2, #132	@ 0x84
 8004a48:	2100      	movs	r1, #0
 8004a4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	0018      	movs	r0, r3
 8004a50:	46bd      	mov	sp, r7
 8004a52:	b004      	add	sp, #16
 8004a54:	bd80      	pop	{r7, pc}
	...

08004a58 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2284      	movs	r2, #132	@ 0x84
 8004a66:	5c9b      	ldrb	r3, [r3, r2]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d101      	bne.n	8004a70 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	e02f      	b.n	8004ad0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2284      	movs	r2, #132	@ 0x84
 8004a74:	2101      	movs	r1, #1
 8004a76:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2288      	movs	r2, #136	@ 0x88
 8004a7c:	2124      	movs	r1, #36	@ 0x24
 8004a7e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2101      	movs	r1, #1
 8004a94:	438a      	bics	r2, r1
 8004a96:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	4a0e      	ldr	r2, [pc, #56]	@ (8004ad8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	0019      	movs	r1, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	683a      	ldr	r2, [r7, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	f000 f813 	bl	8004adc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2288      	movs	r2, #136	@ 0x88
 8004ac2:	2120      	movs	r1, #32
 8004ac4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2284      	movs	r2, #132	@ 0x84
 8004aca:	2100      	movs	r1, #0
 8004acc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	b004      	add	sp, #16
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	f1ffffff 	.word	0xf1ffffff

08004adc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d108      	bne.n	8004afe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	226a      	movs	r2, #106	@ 0x6a
 8004af0:	2101      	movs	r1, #1
 8004af2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2268      	movs	r2, #104	@ 0x68
 8004af8:	2101      	movs	r1, #1
 8004afa:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004afc:	e043      	b.n	8004b86 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004afe:	260f      	movs	r6, #15
 8004b00:	19bb      	adds	r3, r7, r6
 8004b02:	2208      	movs	r2, #8
 8004b04:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004b06:	200e      	movs	r0, #14
 8004b08:	183b      	adds	r3, r7, r0
 8004b0a:	2208      	movs	r2, #8
 8004b0c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	0e5b      	lsrs	r3, r3, #25
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	240d      	movs	r4, #13
 8004b1a:	193b      	adds	r3, r7, r4
 8004b1c:	2107      	movs	r1, #7
 8004b1e:	400a      	ands	r2, r1
 8004b20:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	0f5b      	lsrs	r3, r3, #29
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	250c      	movs	r5, #12
 8004b2e:	197b      	adds	r3, r7, r5
 8004b30:	2107      	movs	r1, #7
 8004b32:	400a      	ands	r2, r1
 8004b34:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b36:	183b      	adds	r3, r7, r0
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	197a      	adds	r2, r7, r5
 8004b3c:	7812      	ldrb	r2, [r2, #0]
 8004b3e:	4914      	ldr	r1, [pc, #80]	@ (8004b90 <UARTEx_SetNbDataToProcess+0xb4>)
 8004b40:	5c8a      	ldrb	r2, [r1, r2]
 8004b42:	435a      	muls	r2, r3
 8004b44:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004b46:	197b      	adds	r3, r7, r5
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	4a12      	ldr	r2, [pc, #72]	@ (8004b94 <UARTEx_SetNbDataToProcess+0xb8>)
 8004b4c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b4e:	0019      	movs	r1, r3
 8004b50:	f7fb fb72 	bl	8000238 <__divsi3>
 8004b54:	0003      	movs	r3, r0
 8004b56:	b299      	uxth	r1, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	226a      	movs	r2, #106	@ 0x6a
 8004b5c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b5e:	19bb      	adds	r3, r7, r6
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	193a      	adds	r2, r7, r4
 8004b64:	7812      	ldrb	r2, [r2, #0]
 8004b66:	490a      	ldr	r1, [pc, #40]	@ (8004b90 <UARTEx_SetNbDataToProcess+0xb4>)
 8004b68:	5c8a      	ldrb	r2, [r1, r2]
 8004b6a:	435a      	muls	r2, r3
 8004b6c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004b6e:	193b      	adds	r3, r7, r4
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	4a08      	ldr	r2, [pc, #32]	@ (8004b94 <UARTEx_SetNbDataToProcess+0xb8>)
 8004b74:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b76:	0019      	movs	r1, r3
 8004b78:	f7fb fb5e 	bl	8000238 <__divsi3>
 8004b7c:	0003      	movs	r3, r0
 8004b7e:	b299      	uxth	r1, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2268      	movs	r2, #104	@ 0x68
 8004b84:	5299      	strh	r1, [r3, r2]
}
 8004b86:	46c0      	nop			@ (mov r8, r8)
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	b005      	add	sp, #20
 8004b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b8e:	46c0      	nop			@ (mov r8, r8)
 8004b90:	080055ec 	.word	0x080055ec
 8004b94:	080055f4 	.word	0x080055f4

08004b98 <sniprintf>:
 8004b98:	b40c      	push	{r2, r3}
 8004b9a:	b530      	push	{r4, r5, lr}
 8004b9c:	4b18      	ldr	r3, [pc, #96]	@ (8004c00 <sniprintf+0x68>)
 8004b9e:	000c      	movs	r4, r1
 8004ba0:	681d      	ldr	r5, [r3, #0]
 8004ba2:	b09d      	sub	sp, #116	@ 0x74
 8004ba4:	2900      	cmp	r1, #0
 8004ba6:	da08      	bge.n	8004bba <sniprintf+0x22>
 8004ba8:	238b      	movs	r3, #139	@ 0x8b
 8004baa:	2001      	movs	r0, #1
 8004bac:	602b      	str	r3, [r5, #0]
 8004bae:	4240      	negs	r0, r0
 8004bb0:	b01d      	add	sp, #116	@ 0x74
 8004bb2:	bc30      	pop	{r4, r5}
 8004bb4:	bc08      	pop	{r3}
 8004bb6:	b002      	add	sp, #8
 8004bb8:	4718      	bx	r3
 8004bba:	2382      	movs	r3, #130	@ 0x82
 8004bbc:	466a      	mov	r2, sp
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	8293      	strh	r3, [r2, #20]
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	9002      	str	r0, [sp, #8]
 8004bc6:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004bc8:	9006      	str	r0, [sp, #24]
 8004bca:	4299      	cmp	r1, r3
 8004bcc:	d000      	beq.n	8004bd0 <sniprintf+0x38>
 8004bce:	1e4b      	subs	r3, r1, #1
 8004bd0:	9304      	str	r3, [sp, #16]
 8004bd2:	9307      	str	r3, [sp, #28]
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	466a      	mov	r2, sp
 8004bd8:	425b      	negs	r3, r3
 8004bda:	82d3      	strh	r3, [r2, #22]
 8004bdc:	0028      	movs	r0, r5
 8004bde:	ab21      	add	r3, sp, #132	@ 0x84
 8004be0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004be2:	a902      	add	r1, sp, #8
 8004be4:	9301      	str	r3, [sp, #4]
 8004be6:	f000 f99d 	bl	8004f24 <_svfiprintf_r>
 8004bea:	1c43      	adds	r3, r0, #1
 8004bec:	da01      	bge.n	8004bf2 <sniprintf+0x5a>
 8004bee:	238b      	movs	r3, #139	@ 0x8b
 8004bf0:	602b      	str	r3, [r5, #0]
 8004bf2:	2c00      	cmp	r4, #0
 8004bf4:	d0dc      	beq.n	8004bb0 <sniprintf+0x18>
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	9b02      	ldr	r3, [sp, #8]
 8004bfa:	701a      	strb	r2, [r3, #0]
 8004bfc:	e7d8      	b.n	8004bb0 <sniprintf+0x18>
 8004bfe:	46c0      	nop			@ (mov r8, r8)
 8004c00:	2000000c 	.word	0x2000000c

08004c04 <memset>:
 8004c04:	0003      	movs	r3, r0
 8004c06:	1882      	adds	r2, r0, r2
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d100      	bne.n	8004c0e <memset+0xa>
 8004c0c:	4770      	bx	lr
 8004c0e:	7019      	strb	r1, [r3, #0]
 8004c10:	3301      	adds	r3, #1
 8004c12:	e7f9      	b.n	8004c08 <memset+0x4>

08004c14 <__errno>:
 8004c14:	4b01      	ldr	r3, [pc, #4]	@ (8004c1c <__errno+0x8>)
 8004c16:	6818      	ldr	r0, [r3, #0]
 8004c18:	4770      	bx	lr
 8004c1a:	46c0      	nop			@ (mov r8, r8)
 8004c1c:	2000000c 	.word	0x2000000c

08004c20 <__libc_init_array>:
 8004c20:	b570      	push	{r4, r5, r6, lr}
 8004c22:	2600      	movs	r6, #0
 8004c24:	4c0c      	ldr	r4, [pc, #48]	@ (8004c58 <__libc_init_array+0x38>)
 8004c26:	4d0d      	ldr	r5, [pc, #52]	@ (8004c5c <__libc_init_array+0x3c>)
 8004c28:	1b64      	subs	r4, r4, r5
 8004c2a:	10a4      	asrs	r4, r4, #2
 8004c2c:	42a6      	cmp	r6, r4
 8004c2e:	d109      	bne.n	8004c44 <__libc_init_array+0x24>
 8004c30:	2600      	movs	r6, #0
 8004c32:	f000 fc61 	bl	80054f8 <_init>
 8004c36:	4c0a      	ldr	r4, [pc, #40]	@ (8004c60 <__libc_init_array+0x40>)
 8004c38:	4d0a      	ldr	r5, [pc, #40]	@ (8004c64 <__libc_init_array+0x44>)
 8004c3a:	1b64      	subs	r4, r4, r5
 8004c3c:	10a4      	asrs	r4, r4, #2
 8004c3e:	42a6      	cmp	r6, r4
 8004c40:	d105      	bne.n	8004c4e <__libc_init_array+0x2e>
 8004c42:	bd70      	pop	{r4, r5, r6, pc}
 8004c44:	00b3      	lsls	r3, r6, #2
 8004c46:	58eb      	ldr	r3, [r5, r3]
 8004c48:	4798      	blx	r3
 8004c4a:	3601      	adds	r6, #1
 8004c4c:	e7ee      	b.n	8004c2c <__libc_init_array+0xc>
 8004c4e:	00b3      	lsls	r3, r6, #2
 8004c50:	58eb      	ldr	r3, [r5, r3]
 8004c52:	4798      	blx	r3
 8004c54:	3601      	adds	r6, #1
 8004c56:	e7f2      	b.n	8004c3e <__libc_init_array+0x1e>
 8004c58:	08005630 	.word	0x08005630
 8004c5c:	08005630 	.word	0x08005630
 8004c60:	08005634 	.word	0x08005634
 8004c64:	08005630 	.word	0x08005630

08004c68 <__retarget_lock_acquire_recursive>:
 8004c68:	4770      	bx	lr

08004c6a <__retarget_lock_release_recursive>:
 8004c6a:	4770      	bx	lr

08004c6c <_free_r>:
 8004c6c:	b570      	push	{r4, r5, r6, lr}
 8004c6e:	0005      	movs	r5, r0
 8004c70:	1e0c      	subs	r4, r1, #0
 8004c72:	d010      	beq.n	8004c96 <_free_r+0x2a>
 8004c74:	3c04      	subs	r4, #4
 8004c76:	6823      	ldr	r3, [r4, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	da00      	bge.n	8004c7e <_free_r+0x12>
 8004c7c:	18e4      	adds	r4, r4, r3
 8004c7e:	0028      	movs	r0, r5
 8004c80:	f000 f8e0 	bl	8004e44 <__malloc_lock>
 8004c84:	4a1d      	ldr	r2, [pc, #116]	@ (8004cfc <_free_r+0x90>)
 8004c86:	6813      	ldr	r3, [r2, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d105      	bne.n	8004c98 <_free_r+0x2c>
 8004c8c:	6063      	str	r3, [r4, #4]
 8004c8e:	6014      	str	r4, [r2, #0]
 8004c90:	0028      	movs	r0, r5
 8004c92:	f000 f8df 	bl	8004e54 <__malloc_unlock>
 8004c96:	bd70      	pop	{r4, r5, r6, pc}
 8004c98:	42a3      	cmp	r3, r4
 8004c9a:	d908      	bls.n	8004cae <_free_r+0x42>
 8004c9c:	6820      	ldr	r0, [r4, #0]
 8004c9e:	1821      	adds	r1, r4, r0
 8004ca0:	428b      	cmp	r3, r1
 8004ca2:	d1f3      	bne.n	8004c8c <_free_r+0x20>
 8004ca4:	6819      	ldr	r1, [r3, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	1809      	adds	r1, r1, r0
 8004caa:	6021      	str	r1, [r4, #0]
 8004cac:	e7ee      	b.n	8004c8c <_free_r+0x20>
 8004cae:	001a      	movs	r2, r3
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <_free_r+0x4e>
 8004cb6:	42a3      	cmp	r3, r4
 8004cb8:	d9f9      	bls.n	8004cae <_free_r+0x42>
 8004cba:	6811      	ldr	r1, [r2, #0]
 8004cbc:	1850      	adds	r0, r2, r1
 8004cbe:	42a0      	cmp	r0, r4
 8004cc0:	d10b      	bne.n	8004cda <_free_r+0x6e>
 8004cc2:	6820      	ldr	r0, [r4, #0]
 8004cc4:	1809      	adds	r1, r1, r0
 8004cc6:	1850      	adds	r0, r2, r1
 8004cc8:	6011      	str	r1, [r2, #0]
 8004cca:	4283      	cmp	r3, r0
 8004ccc:	d1e0      	bne.n	8004c90 <_free_r+0x24>
 8004cce:	6818      	ldr	r0, [r3, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	1841      	adds	r1, r0, r1
 8004cd4:	6011      	str	r1, [r2, #0]
 8004cd6:	6053      	str	r3, [r2, #4]
 8004cd8:	e7da      	b.n	8004c90 <_free_r+0x24>
 8004cda:	42a0      	cmp	r0, r4
 8004cdc:	d902      	bls.n	8004ce4 <_free_r+0x78>
 8004cde:	230c      	movs	r3, #12
 8004ce0:	602b      	str	r3, [r5, #0]
 8004ce2:	e7d5      	b.n	8004c90 <_free_r+0x24>
 8004ce4:	6820      	ldr	r0, [r4, #0]
 8004ce6:	1821      	adds	r1, r4, r0
 8004ce8:	428b      	cmp	r3, r1
 8004cea:	d103      	bne.n	8004cf4 <_free_r+0x88>
 8004cec:	6819      	ldr	r1, [r3, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	1809      	adds	r1, r1, r0
 8004cf2:	6021      	str	r1, [r4, #0]
 8004cf4:	6063      	str	r3, [r4, #4]
 8004cf6:	6054      	str	r4, [r2, #4]
 8004cf8:	e7ca      	b.n	8004c90 <_free_r+0x24>
 8004cfa:	46c0      	nop			@ (mov r8, r8)
 8004cfc:	20000358 	.word	0x20000358

08004d00 <sbrk_aligned>:
 8004d00:	b570      	push	{r4, r5, r6, lr}
 8004d02:	4e0f      	ldr	r6, [pc, #60]	@ (8004d40 <sbrk_aligned+0x40>)
 8004d04:	000d      	movs	r5, r1
 8004d06:	6831      	ldr	r1, [r6, #0]
 8004d08:	0004      	movs	r4, r0
 8004d0a:	2900      	cmp	r1, #0
 8004d0c:	d102      	bne.n	8004d14 <sbrk_aligned+0x14>
 8004d0e:	f000 fb95 	bl	800543c <_sbrk_r>
 8004d12:	6030      	str	r0, [r6, #0]
 8004d14:	0029      	movs	r1, r5
 8004d16:	0020      	movs	r0, r4
 8004d18:	f000 fb90 	bl	800543c <_sbrk_r>
 8004d1c:	1c43      	adds	r3, r0, #1
 8004d1e:	d103      	bne.n	8004d28 <sbrk_aligned+0x28>
 8004d20:	2501      	movs	r5, #1
 8004d22:	426d      	negs	r5, r5
 8004d24:	0028      	movs	r0, r5
 8004d26:	bd70      	pop	{r4, r5, r6, pc}
 8004d28:	2303      	movs	r3, #3
 8004d2a:	1cc5      	adds	r5, r0, #3
 8004d2c:	439d      	bics	r5, r3
 8004d2e:	42a8      	cmp	r0, r5
 8004d30:	d0f8      	beq.n	8004d24 <sbrk_aligned+0x24>
 8004d32:	1a29      	subs	r1, r5, r0
 8004d34:	0020      	movs	r0, r4
 8004d36:	f000 fb81 	bl	800543c <_sbrk_r>
 8004d3a:	3001      	adds	r0, #1
 8004d3c:	d1f2      	bne.n	8004d24 <sbrk_aligned+0x24>
 8004d3e:	e7ef      	b.n	8004d20 <sbrk_aligned+0x20>
 8004d40:	20000354 	.word	0x20000354

08004d44 <_malloc_r>:
 8004d44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d46:	2203      	movs	r2, #3
 8004d48:	1ccb      	adds	r3, r1, #3
 8004d4a:	4393      	bics	r3, r2
 8004d4c:	3308      	adds	r3, #8
 8004d4e:	0005      	movs	r5, r0
 8004d50:	001f      	movs	r7, r3
 8004d52:	2b0c      	cmp	r3, #12
 8004d54:	d234      	bcs.n	8004dc0 <_malloc_r+0x7c>
 8004d56:	270c      	movs	r7, #12
 8004d58:	42b9      	cmp	r1, r7
 8004d5a:	d833      	bhi.n	8004dc4 <_malloc_r+0x80>
 8004d5c:	0028      	movs	r0, r5
 8004d5e:	f000 f871 	bl	8004e44 <__malloc_lock>
 8004d62:	4e37      	ldr	r6, [pc, #220]	@ (8004e40 <_malloc_r+0xfc>)
 8004d64:	6833      	ldr	r3, [r6, #0]
 8004d66:	001c      	movs	r4, r3
 8004d68:	2c00      	cmp	r4, #0
 8004d6a:	d12f      	bne.n	8004dcc <_malloc_r+0x88>
 8004d6c:	0039      	movs	r1, r7
 8004d6e:	0028      	movs	r0, r5
 8004d70:	f7ff ffc6 	bl	8004d00 <sbrk_aligned>
 8004d74:	0004      	movs	r4, r0
 8004d76:	1c43      	adds	r3, r0, #1
 8004d78:	d15f      	bne.n	8004e3a <_malloc_r+0xf6>
 8004d7a:	6834      	ldr	r4, [r6, #0]
 8004d7c:	9400      	str	r4, [sp, #0]
 8004d7e:	9b00      	ldr	r3, [sp, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d14a      	bne.n	8004e1a <_malloc_r+0xd6>
 8004d84:	2c00      	cmp	r4, #0
 8004d86:	d052      	beq.n	8004e2e <_malloc_r+0xea>
 8004d88:	6823      	ldr	r3, [r4, #0]
 8004d8a:	0028      	movs	r0, r5
 8004d8c:	18e3      	adds	r3, r4, r3
 8004d8e:	9900      	ldr	r1, [sp, #0]
 8004d90:	9301      	str	r3, [sp, #4]
 8004d92:	f000 fb53 	bl	800543c <_sbrk_r>
 8004d96:	9b01      	ldr	r3, [sp, #4]
 8004d98:	4283      	cmp	r3, r0
 8004d9a:	d148      	bne.n	8004e2e <_malloc_r+0xea>
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	0028      	movs	r0, r5
 8004da0:	1aff      	subs	r7, r7, r3
 8004da2:	0039      	movs	r1, r7
 8004da4:	f7ff ffac 	bl	8004d00 <sbrk_aligned>
 8004da8:	3001      	adds	r0, #1
 8004daa:	d040      	beq.n	8004e2e <_malloc_r+0xea>
 8004dac:	6823      	ldr	r3, [r4, #0]
 8004dae:	19db      	adds	r3, r3, r7
 8004db0:	6023      	str	r3, [r4, #0]
 8004db2:	6833      	ldr	r3, [r6, #0]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	2a00      	cmp	r2, #0
 8004db8:	d133      	bne.n	8004e22 <_malloc_r+0xde>
 8004dba:	9b00      	ldr	r3, [sp, #0]
 8004dbc:	6033      	str	r3, [r6, #0]
 8004dbe:	e019      	b.n	8004df4 <_malloc_r+0xb0>
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	dac9      	bge.n	8004d58 <_malloc_r+0x14>
 8004dc4:	230c      	movs	r3, #12
 8004dc6:	602b      	str	r3, [r5, #0]
 8004dc8:	2000      	movs	r0, #0
 8004dca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004dcc:	6821      	ldr	r1, [r4, #0]
 8004dce:	1bc9      	subs	r1, r1, r7
 8004dd0:	d420      	bmi.n	8004e14 <_malloc_r+0xd0>
 8004dd2:	290b      	cmp	r1, #11
 8004dd4:	d90a      	bls.n	8004dec <_malloc_r+0xa8>
 8004dd6:	19e2      	adds	r2, r4, r7
 8004dd8:	6027      	str	r7, [r4, #0]
 8004dda:	42a3      	cmp	r3, r4
 8004ddc:	d104      	bne.n	8004de8 <_malloc_r+0xa4>
 8004dde:	6032      	str	r2, [r6, #0]
 8004de0:	6863      	ldr	r3, [r4, #4]
 8004de2:	6011      	str	r1, [r2, #0]
 8004de4:	6053      	str	r3, [r2, #4]
 8004de6:	e005      	b.n	8004df4 <_malloc_r+0xb0>
 8004de8:	605a      	str	r2, [r3, #4]
 8004dea:	e7f9      	b.n	8004de0 <_malloc_r+0x9c>
 8004dec:	6862      	ldr	r2, [r4, #4]
 8004dee:	42a3      	cmp	r3, r4
 8004df0:	d10e      	bne.n	8004e10 <_malloc_r+0xcc>
 8004df2:	6032      	str	r2, [r6, #0]
 8004df4:	0028      	movs	r0, r5
 8004df6:	f000 f82d 	bl	8004e54 <__malloc_unlock>
 8004dfa:	0020      	movs	r0, r4
 8004dfc:	2207      	movs	r2, #7
 8004dfe:	300b      	adds	r0, #11
 8004e00:	1d23      	adds	r3, r4, #4
 8004e02:	4390      	bics	r0, r2
 8004e04:	1ac2      	subs	r2, r0, r3
 8004e06:	4298      	cmp	r0, r3
 8004e08:	d0df      	beq.n	8004dca <_malloc_r+0x86>
 8004e0a:	1a1b      	subs	r3, r3, r0
 8004e0c:	50a3      	str	r3, [r4, r2]
 8004e0e:	e7dc      	b.n	8004dca <_malloc_r+0x86>
 8004e10:	605a      	str	r2, [r3, #4]
 8004e12:	e7ef      	b.n	8004df4 <_malloc_r+0xb0>
 8004e14:	0023      	movs	r3, r4
 8004e16:	6864      	ldr	r4, [r4, #4]
 8004e18:	e7a6      	b.n	8004d68 <_malloc_r+0x24>
 8004e1a:	9c00      	ldr	r4, [sp, #0]
 8004e1c:	6863      	ldr	r3, [r4, #4]
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	e7ad      	b.n	8004d7e <_malloc_r+0x3a>
 8004e22:	001a      	movs	r2, r3
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	42a3      	cmp	r3, r4
 8004e28:	d1fb      	bne.n	8004e22 <_malloc_r+0xde>
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	e7da      	b.n	8004de4 <_malloc_r+0xa0>
 8004e2e:	230c      	movs	r3, #12
 8004e30:	0028      	movs	r0, r5
 8004e32:	602b      	str	r3, [r5, #0]
 8004e34:	f000 f80e 	bl	8004e54 <__malloc_unlock>
 8004e38:	e7c6      	b.n	8004dc8 <_malloc_r+0x84>
 8004e3a:	6007      	str	r7, [r0, #0]
 8004e3c:	e7da      	b.n	8004df4 <_malloc_r+0xb0>
 8004e3e:	46c0      	nop			@ (mov r8, r8)
 8004e40:	20000358 	.word	0x20000358

08004e44 <__malloc_lock>:
 8004e44:	b510      	push	{r4, lr}
 8004e46:	4802      	ldr	r0, [pc, #8]	@ (8004e50 <__malloc_lock+0xc>)
 8004e48:	f7ff ff0e 	bl	8004c68 <__retarget_lock_acquire_recursive>
 8004e4c:	bd10      	pop	{r4, pc}
 8004e4e:	46c0      	nop			@ (mov r8, r8)
 8004e50:	20000350 	.word	0x20000350

08004e54 <__malloc_unlock>:
 8004e54:	b510      	push	{r4, lr}
 8004e56:	4802      	ldr	r0, [pc, #8]	@ (8004e60 <__malloc_unlock+0xc>)
 8004e58:	f7ff ff07 	bl	8004c6a <__retarget_lock_release_recursive>
 8004e5c:	bd10      	pop	{r4, pc}
 8004e5e:	46c0      	nop			@ (mov r8, r8)
 8004e60:	20000350 	.word	0x20000350

08004e64 <__ssputs_r>:
 8004e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e66:	688e      	ldr	r6, [r1, #8]
 8004e68:	b085      	sub	sp, #20
 8004e6a:	001f      	movs	r7, r3
 8004e6c:	000c      	movs	r4, r1
 8004e6e:	680b      	ldr	r3, [r1, #0]
 8004e70:	9002      	str	r0, [sp, #8]
 8004e72:	9203      	str	r2, [sp, #12]
 8004e74:	42be      	cmp	r6, r7
 8004e76:	d830      	bhi.n	8004eda <__ssputs_r+0x76>
 8004e78:	210c      	movs	r1, #12
 8004e7a:	5e62      	ldrsh	r2, [r4, r1]
 8004e7c:	2190      	movs	r1, #144	@ 0x90
 8004e7e:	00c9      	lsls	r1, r1, #3
 8004e80:	420a      	tst	r2, r1
 8004e82:	d028      	beq.n	8004ed6 <__ssputs_r+0x72>
 8004e84:	2003      	movs	r0, #3
 8004e86:	6921      	ldr	r1, [r4, #16]
 8004e88:	1a5b      	subs	r3, r3, r1
 8004e8a:	9301      	str	r3, [sp, #4]
 8004e8c:	6963      	ldr	r3, [r4, #20]
 8004e8e:	4343      	muls	r3, r0
 8004e90:	9801      	ldr	r0, [sp, #4]
 8004e92:	0fdd      	lsrs	r5, r3, #31
 8004e94:	18ed      	adds	r5, r5, r3
 8004e96:	1c7b      	adds	r3, r7, #1
 8004e98:	181b      	adds	r3, r3, r0
 8004e9a:	106d      	asrs	r5, r5, #1
 8004e9c:	42ab      	cmp	r3, r5
 8004e9e:	d900      	bls.n	8004ea2 <__ssputs_r+0x3e>
 8004ea0:	001d      	movs	r5, r3
 8004ea2:	0552      	lsls	r2, r2, #21
 8004ea4:	d528      	bpl.n	8004ef8 <__ssputs_r+0x94>
 8004ea6:	0029      	movs	r1, r5
 8004ea8:	9802      	ldr	r0, [sp, #8]
 8004eaa:	f7ff ff4b 	bl	8004d44 <_malloc_r>
 8004eae:	1e06      	subs	r6, r0, #0
 8004eb0:	d02c      	beq.n	8004f0c <__ssputs_r+0xa8>
 8004eb2:	9a01      	ldr	r2, [sp, #4]
 8004eb4:	6921      	ldr	r1, [r4, #16]
 8004eb6:	f000 fade 	bl	8005476 <memcpy>
 8004eba:	89a2      	ldrh	r2, [r4, #12]
 8004ebc:	4b18      	ldr	r3, [pc, #96]	@ (8004f20 <__ssputs_r+0xbc>)
 8004ebe:	401a      	ands	r2, r3
 8004ec0:	2380      	movs	r3, #128	@ 0x80
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	81a3      	strh	r3, [r4, #12]
 8004ec6:	9b01      	ldr	r3, [sp, #4]
 8004ec8:	6126      	str	r6, [r4, #16]
 8004eca:	18f6      	adds	r6, r6, r3
 8004ecc:	6026      	str	r6, [r4, #0]
 8004ece:	003e      	movs	r6, r7
 8004ed0:	6165      	str	r5, [r4, #20]
 8004ed2:	1aed      	subs	r5, r5, r3
 8004ed4:	60a5      	str	r5, [r4, #8]
 8004ed6:	42be      	cmp	r6, r7
 8004ed8:	d900      	bls.n	8004edc <__ssputs_r+0x78>
 8004eda:	003e      	movs	r6, r7
 8004edc:	0032      	movs	r2, r6
 8004ede:	9903      	ldr	r1, [sp, #12]
 8004ee0:	6820      	ldr	r0, [r4, #0]
 8004ee2:	f000 fa99 	bl	8005418 <memmove>
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	68a3      	ldr	r3, [r4, #8]
 8004eea:	1b9b      	subs	r3, r3, r6
 8004eec:	60a3      	str	r3, [r4, #8]
 8004eee:	6823      	ldr	r3, [r4, #0]
 8004ef0:	199b      	adds	r3, r3, r6
 8004ef2:	6023      	str	r3, [r4, #0]
 8004ef4:	b005      	add	sp, #20
 8004ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ef8:	002a      	movs	r2, r5
 8004efa:	9802      	ldr	r0, [sp, #8]
 8004efc:	f000 fac4 	bl	8005488 <_realloc_r>
 8004f00:	1e06      	subs	r6, r0, #0
 8004f02:	d1e0      	bne.n	8004ec6 <__ssputs_r+0x62>
 8004f04:	6921      	ldr	r1, [r4, #16]
 8004f06:	9802      	ldr	r0, [sp, #8]
 8004f08:	f7ff feb0 	bl	8004c6c <_free_r>
 8004f0c:	230c      	movs	r3, #12
 8004f0e:	2001      	movs	r0, #1
 8004f10:	9a02      	ldr	r2, [sp, #8]
 8004f12:	4240      	negs	r0, r0
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	89a2      	ldrh	r2, [r4, #12]
 8004f18:	3334      	adds	r3, #52	@ 0x34
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	81a3      	strh	r3, [r4, #12]
 8004f1e:	e7e9      	b.n	8004ef4 <__ssputs_r+0x90>
 8004f20:	fffffb7f 	.word	0xfffffb7f

08004f24 <_svfiprintf_r>:
 8004f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f26:	b0a1      	sub	sp, #132	@ 0x84
 8004f28:	9003      	str	r0, [sp, #12]
 8004f2a:	001d      	movs	r5, r3
 8004f2c:	898b      	ldrh	r3, [r1, #12]
 8004f2e:	000f      	movs	r7, r1
 8004f30:	0016      	movs	r6, r2
 8004f32:	061b      	lsls	r3, r3, #24
 8004f34:	d511      	bpl.n	8004f5a <_svfiprintf_r+0x36>
 8004f36:	690b      	ldr	r3, [r1, #16]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10e      	bne.n	8004f5a <_svfiprintf_r+0x36>
 8004f3c:	2140      	movs	r1, #64	@ 0x40
 8004f3e:	f7ff ff01 	bl	8004d44 <_malloc_r>
 8004f42:	6038      	str	r0, [r7, #0]
 8004f44:	6138      	str	r0, [r7, #16]
 8004f46:	2800      	cmp	r0, #0
 8004f48:	d105      	bne.n	8004f56 <_svfiprintf_r+0x32>
 8004f4a:	230c      	movs	r3, #12
 8004f4c:	9a03      	ldr	r2, [sp, #12]
 8004f4e:	6013      	str	r3, [r2, #0]
 8004f50:	2001      	movs	r0, #1
 8004f52:	4240      	negs	r0, r0
 8004f54:	e0cf      	b.n	80050f6 <_svfiprintf_r+0x1d2>
 8004f56:	2340      	movs	r3, #64	@ 0x40
 8004f58:	617b      	str	r3, [r7, #20]
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	ac08      	add	r4, sp, #32
 8004f5e:	6163      	str	r3, [r4, #20]
 8004f60:	3320      	adds	r3, #32
 8004f62:	7663      	strb	r3, [r4, #25]
 8004f64:	3310      	adds	r3, #16
 8004f66:	76a3      	strb	r3, [r4, #26]
 8004f68:	9507      	str	r5, [sp, #28]
 8004f6a:	0035      	movs	r5, r6
 8004f6c:	782b      	ldrb	r3, [r5, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <_svfiprintf_r+0x52>
 8004f72:	2b25      	cmp	r3, #37	@ 0x25
 8004f74:	d148      	bne.n	8005008 <_svfiprintf_r+0xe4>
 8004f76:	1bab      	subs	r3, r5, r6
 8004f78:	9305      	str	r3, [sp, #20]
 8004f7a:	42b5      	cmp	r5, r6
 8004f7c:	d00b      	beq.n	8004f96 <_svfiprintf_r+0x72>
 8004f7e:	0032      	movs	r2, r6
 8004f80:	0039      	movs	r1, r7
 8004f82:	9803      	ldr	r0, [sp, #12]
 8004f84:	f7ff ff6e 	bl	8004e64 <__ssputs_r>
 8004f88:	3001      	adds	r0, #1
 8004f8a:	d100      	bne.n	8004f8e <_svfiprintf_r+0x6a>
 8004f8c:	e0ae      	b.n	80050ec <_svfiprintf_r+0x1c8>
 8004f8e:	6963      	ldr	r3, [r4, #20]
 8004f90:	9a05      	ldr	r2, [sp, #20]
 8004f92:	189b      	adds	r3, r3, r2
 8004f94:	6163      	str	r3, [r4, #20]
 8004f96:	782b      	ldrb	r3, [r5, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d100      	bne.n	8004f9e <_svfiprintf_r+0x7a>
 8004f9c:	e0a6      	b.n	80050ec <_svfiprintf_r+0x1c8>
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	4252      	negs	r2, r2
 8004fa4:	6062      	str	r2, [r4, #4]
 8004fa6:	a904      	add	r1, sp, #16
 8004fa8:	3254      	adds	r2, #84	@ 0x54
 8004faa:	1852      	adds	r2, r2, r1
 8004fac:	1c6e      	adds	r6, r5, #1
 8004fae:	6023      	str	r3, [r4, #0]
 8004fb0:	60e3      	str	r3, [r4, #12]
 8004fb2:	60a3      	str	r3, [r4, #8]
 8004fb4:	7013      	strb	r3, [r2, #0]
 8004fb6:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004fb8:	4b54      	ldr	r3, [pc, #336]	@ (800510c <_svfiprintf_r+0x1e8>)
 8004fba:	2205      	movs	r2, #5
 8004fbc:	0018      	movs	r0, r3
 8004fbe:	7831      	ldrb	r1, [r6, #0]
 8004fc0:	9305      	str	r3, [sp, #20]
 8004fc2:	f000 fa4d 	bl	8005460 <memchr>
 8004fc6:	1c75      	adds	r5, r6, #1
 8004fc8:	2800      	cmp	r0, #0
 8004fca:	d11f      	bne.n	800500c <_svfiprintf_r+0xe8>
 8004fcc:	6822      	ldr	r2, [r4, #0]
 8004fce:	06d3      	lsls	r3, r2, #27
 8004fd0:	d504      	bpl.n	8004fdc <_svfiprintf_r+0xb8>
 8004fd2:	2353      	movs	r3, #83	@ 0x53
 8004fd4:	a904      	add	r1, sp, #16
 8004fd6:	185b      	adds	r3, r3, r1
 8004fd8:	2120      	movs	r1, #32
 8004fda:	7019      	strb	r1, [r3, #0]
 8004fdc:	0713      	lsls	r3, r2, #28
 8004fde:	d504      	bpl.n	8004fea <_svfiprintf_r+0xc6>
 8004fe0:	2353      	movs	r3, #83	@ 0x53
 8004fe2:	a904      	add	r1, sp, #16
 8004fe4:	185b      	adds	r3, r3, r1
 8004fe6:	212b      	movs	r1, #43	@ 0x2b
 8004fe8:	7019      	strb	r1, [r3, #0]
 8004fea:	7833      	ldrb	r3, [r6, #0]
 8004fec:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fee:	d016      	beq.n	800501e <_svfiprintf_r+0xfa>
 8004ff0:	0035      	movs	r5, r6
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	200a      	movs	r0, #10
 8004ff6:	68e3      	ldr	r3, [r4, #12]
 8004ff8:	782a      	ldrb	r2, [r5, #0]
 8004ffa:	1c6e      	adds	r6, r5, #1
 8004ffc:	3a30      	subs	r2, #48	@ 0x30
 8004ffe:	2a09      	cmp	r2, #9
 8005000:	d950      	bls.n	80050a4 <_svfiprintf_r+0x180>
 8005002:	2900      	cmp	r1, #0
 8005004:	d111      	bne.n	800502a <_svfiprintf_r+0x106>
 8005006:	e017      	b.n	8005038 <_svfiprintf_r+0x114>
 8005008:	3501      	adds	r5, #1
 800500a:	e7af      	b.n	8004f6c <_svfiprintf_r+0x48>
 800500c:	9b05      	ldr	r3, [sp, #20]
 800500e:	6822      	ldr	r2, [r4, #0]
 8005010:	1ac0      	subs	r0, r0, r3
 8005012:	2301      	movs	r3, #1
 8005014:	4083      	lsls	r3, r0
 8005016:	4313      	orrs	r3, r2
 8005018:	002e      	movs	r6, r5
 800501a:	6023      	str	r3, [r4, #0]
 800501c:	e7cc      	b.n	8004fb8 <_svfiprintf_r+0x94>
 800501e:	9b07      	ldr	r3, [sp, #28]
 8005020:	1d19      	adds	r1, r3, #4
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	9107      	str	r1, [sp, #28]
 8005026:	2b00      	cmp	r3, #0
 8005028:	db01      	blt.n	800502e <_svfiprintf_r+0x10a>
 800502a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800502c:	e004      	b.n	8005038 <_svfiprintf_r+0x114>
 800502e:	425b      	negs	r3, r3
 8005030:	60e3      	str	r3, [r4, #12]
 8005032:	2302      	movs	r3, #2
 8005034:	4313      	orrs	r3, r2
 8005036:	6023      	str	r3, [r4, #0]
 8005038:	782b      	ldrb	r3, [r5, #0]
 800503a:	2b2e      	cmp	r3, #46	@ 0x2e
 800503c:	d10c      	bne.n	8005058 <_svfiprintf_r+0x134>
 800503e:	786b      	ldrb	r3, [r5, #1]
 8005040:	2b2a      	cmp	r3, #42	@ 0x2a
 8005042:	d134      	bne.n	80050ae <_svfiprintf_r+0x18a>
 8005044:	9b07      	ldr	r3, [sp, #28]
 8005046:	3502      	adds	r5, #2
 8005048:	1d1a      	adds	r2, r3, #4
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	9207      	str	r2, [sp, #28]
 800504e:	2b00      	cmp	r3, #0
 8005050:	da01      	bge.n	8005056 <_svfiprintf_r+0x132>
 8005052:	2301      	movs	r3, #1
 8005054:	425b      	negs	r3, r3
 8005056:	9309      	str	r3, [sp, #36]	@ 0x24
 8005058:	4e2d      	ldr	r6, [pc, #180]	@ (8005110 <_svfiprintf_r+0x1ec>)
 800505a:	2203      	movs	r2, #3
 800505c:	0030      	movs	r0, r6
 800505e:	7829      	ldrb	r1, [r5, #0]
 8005060:	f000 f9fe 	bl	8005460 <memchr>
 8005064:	2800      	cmp	r0, #0
 8005066:	d006      	beq.n	8005076 <_svfiprintf_r+0x152>
 8005068:	2340      	movs	r3, #64	@ 0x40
 800506a:	1b80      	subs	r0, r0, r6
 800506c:	4083      	lsls	r3, r0
 800506e:	6822      	ldr	r2, [r4, #0]
 8005070:	3501      	adds	r5, #1
 8005072:	4313      	orrs	r3, r2
 8005074:	6023      	str	r3, [r4, #0]
 8005076:	7829      	ldrb	r1, [r5, #0]
 8005078:	2206      	movs	r2, #6
 800507a:	4826      	ldr	r0, [pc, #152]	@ (8005114 <_svfiprintf_r+0x1f0>)
 800507c:	1c6e      	adds	r6, r5, #1
 800507e:	7621      	strb	r1, [r4, #24]
 8005080:	f000 f9ee 	bl	8005460 <memchr>
 8005084:	2800      	cmp	r0, #0
 8005086:	d038      	beq.n	80050fa <_svfiprintf_r+0x1d6>
 8005088:	4b23      	ldr	r3, [pc, #140]	@ (8005118 <_svfiprintf_r+0x1f4>)
 800508a:	2b00      	cmp	r3, #0
 800508c:	d122      	bne.n	80050d4 <_svfiprintf_r+0x1b0>
 800508e:	2207      	movs	r2, #7
 8005090:	9b07      	ldr	r3, [sp, #28]
 8005092:	3307      	adds	r3, #7
 8005094:	4393      	bics	r3, r2
 8005096:	3308      	adds	r3, #8
 8005098:	9307      	str	r3, [sp, #28]
 800509a:	6963      	ldr	r3, [r4, #20]
 800509c:	9a04      	ldr	r2, [sp, #16]
 800509e:	189b      	adds	r3, r3, r2
 80050a0:	6163      	str	r3, [r4, #20]
 80050a2:	e762      	b.n	8004f6a <_svfiprintf_r+0x46>
 80050a4:	4343      	muls	r3, r0
 80050a6:	0035      	movs	r5, r6
 80050a8:	2101      	movs	r1, #1
 80050aa:	189b      	adds	r3, r3, r2
 80050ac:	e7a4      	b.n	8004ff8 <_svfiprintf_r+0xd4>
 80050ae:	2300      	movs	r3, #0
 80050b0:	200a      	movs	r0, #10
 80050b2:	0019      	movs	r1, r3
 80050b4:	3501      	adds	r5, #1
 80050b6:	6063      	str	r3, [r4, #4]
 80050b8:	782a      	ldrb	r2, [r5, #0]
 80050ba:	1c6e      	adds	r6, r5, #1
 80050bc:	3a30      	subs	r2, #48	@ 0x30
 80050be:	2a09      	cmp	r2, #9
 80050c0:	d903      	bls.n	80050ca <_svfiprintf_r+0x1a6>
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0c8      	beq.n	8005058 <_svfiprintf_r+0x134>
 80050c6:	9109      	str	r1, [sp, #36]	@ 0x24
 80050c8:	e7c6      	b.n	8005058 <_svfiprintf_r+0x134>
 80050ca:	4341      	muls	r1, r0
 80050cc:	0035      	movs	r5, r6
 80050ce:	2301      	movs	r3, #1
 80050d0:	1889      	adds	r1, r1, r2
 80050d2:	e7f1      	b.n	80050b8 <_svfiprintf_r+0x194>
 80050d4:	aa07      	add	r2, sp, #28
 80050d6:	9200      	str	r2, [sp, #0]
 80050d8:	0021      	movs	r1, r4
 80050da:	003a      	movs	r2, r7
 80050dc:	4b0f      	ldr	r3, [pc, #60]	@ (800511c <_svfiprintf_r+0x1f8>)
 80050de:	9803      	ldr	r0, [sp, #12]
 80050e0:	e000      	b.n	80050e4 <_svfiprintf_r+0x1c0>
 80050e2:	bf00      	nop
 80050e4:	9004      	str	r0, [sp, #16]
 80050e6:	9b04      	ldr	r3, [sp, #16]
 80050e8:	3301      	adds	r3, #1
 80050ea:	d1d6      	bne.n	800509a <_svfiprintf_r+0x176>
 80050ec:	89bb      	ldrh	r3, [r7, #12]
 80050ee:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80050f0:	065b      	lsls	r3, r3, #25
 80050f2:	d500      	bpl.n	80050f6 <_svfiprintf_r+0x1d2>
 80050f4:	e72c      	b.n	8004f50 <_svfiprintf_r+0x2c>
 80050f6:	b021      	add	sp, #132	@ 0x84
 80050f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050fa:	aa07      	add	r2, sp, #28
 80050fc:	9200      	str	r2, [sp, #0]
 80050fe:	0021      	movs	r1, r4
 8005100:	003a      	movs	r2, r7
 8005102:	4b06      	ldr	r3, [pc, #24]	@ (800511c <_svfiprintf_r+0x1f8>)
 8005104:	9803      	ldr	r0, [sp, #12]
 8005106:	f000 f87b 	bl	8005200 <_printf_i>
 800510a:	e7eb      	b.n	80050e4 <_svfiprintf_r+0x1c0>
 800510c:	080055fc 	.word	0x080055fc
 8005110:	08005602 	.word	0x08005602
 8005114:	08005606 	.word	0x08005606
 8005118:	00000000 	.word	0x00000000
 800511c:	08004e65 	.word	0x08004e65

08005120 <_printf_common>:
 8005120:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005122:	0016      	movs	r6, r2
 8005124:	9301      	str	r3, [sp, #4]
 8005126:	688a      	ldr	r2, [r1, #8]
 8005128:	690b      	ldr	r3, [r1, #16]
 800512a:	000c      	movs	r4, r1
 800512c:	9000      	str	r0, [sp, #0]
 800512e:	4293      	cmp	r3, r2
 8005130:	da00      	bge.n	8005134 <_printf_common+0x14>
 8005132:	0013      	movs	r3, r2
 8005134:	0022      	movs	r2, r4
 8005136:	6033      	str	r3, [r6, #0]
 8005138:	3243      	adds	r2, #67	@ 0x43
 800513a:	7812      	ldrb	r2, [r2, #0]
 800513c:	2a00      	cmp	r2, #0
 800513e:	d001      	beq.n	8005144 <_printf_common+0x24>
 8005140:	3301      	adds	r3, #1
 8005142:	6033      	str	r3, [r6, #0]
 8005144:	6823      	ldr	r3, [r4, #0]
 8005146:	069b      	lsls	r3, r3, #26
 8005148:	d502      	bpl.n	8005150 <_printf_common+0x30>
 800514a:	6833      	ldr	r3, [r6, #0]
 800514c:	3302      	adds	r3, #2
 800514e:	6033      	str	r3, [r6, #0]
 8005150:	6822      	ldr	r2, [r4, #0]
 8005152:	2306      	movs	r3, #6
 8005154:	0015      	movs	r5, r2
 8005156:	401d      	ands	r5, r3
 8005158:	421a      	tst	r2, r3
 800515a:	d027      	beq.n	80051ac <_printf_common+0x8c>
 800515c:	0023      	movs	r3, r4
 800515e:	3343      	adds	r3, #67	@ 0x43
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	1e5a      	subs	r2, r3, #1
 8005164:	4193      	sbcs	r3, r2
 8005166:	6822      	ldr	r2, [r4, #0]
 8005168:	0692      	lsls	r2, r2, #26
 800516a:	d430      	bmi.n	80051ce <_printf_common+0xae>
 800516c:	0022      	movs	r2, r4
 800516e:	9901      	ldr	r1, [sp, #4]
 8005170:	9800      	ldr	r0, [sp, #0]
 8005172:	9d08      	ldr	r5, [sp, #32]
 8005174:	3243      	adds	r2, #67	@ 0x43
 8005176:	47a8      	blx	r5
 8005178:	3001      	adds	r0, #1
 800517a:	d025      	beq.n	80051c8 <_printf_common+0xa8>
 800517c:	2206      	movs	r2, #6
 800517e:	6823      	ldr	r3, [r4, #0]
 8005180:	2500      	movs	r5, #0
 8005182:	4013      	ands	r3, r2
 8005184:	2b04      	cmp	r3, #4
 8005186:	d105      	bne.n	8005194 <_printf_common+0x74>
 8005188:	6833      	ldr	r3, [r6, #0]
 800518a:	68e5      	ldr	r5, [r4, #12]
 800518c:	1aed      	subs	r5, r5, r3
 800518e:	43eb      	mvns	r3, r5
 8005190:	17db      	asrs	r3, r3, #31
 8005192:	401d      	ands	r5, r3
 8005194:	68a3      	ldr	r3, [r4, #8]
 8005196:	6922      	ldr	r2, [r4, #16]
 8005198:	4293      	cmp	r3, r2
 800519a:	dd01      	ble.n	80051a0 <_printf_common+0x80>
 800519c:	1a9b      	subs	r3, r3, r2
 800519e:	18ed      	adds	r5, r5, r3
 80051a0:	2600      	movs	r6, #0
 80051a2:	42b5      	cmp	r5, r6
 80051a4:	d120      	bne.n	80051e8 <_printf_common+0xc8>
 80051a6:	2000      	movs	r0, #0
 80051a8:	e010      	b.n	80051cc <_printf_common+0xac>
 80051aa:	3501      	adds	r5, #1
 80051ac:	68e3      	ldr	r3, [r4, #12]
 80051ae:	6832      	ldr	r2, [r6, #0]
 80051b0:	1a9b      	subs	r3, r3, r2
 80051b2:	42ab      	cmp	r3, r5
 80051b4:	ddd2      	ble.n	800515c <_printf_common+0x3c>
 80051b6:	0022      	movs	r2, r4
 80051b8:	2301      	movs	r3, #1
 80051ba:	9901      	ldr	r1, [sp, #4]
 80051bc:	9800      	ldr	r0, [sp, #0]
 80051be:	9f08      	ldr	r7, [sp, #32]
 80051c0:	3219      	adds	r2, #25
 80051c2:	47b8      	blx	r7
 80051c4:	3001      	adds	r0, #1
 80051c6:	d1f0      	bne.n	80051aa <_printf_common+0x8a>
 80051c8:	2001      	movs	r0, #1
 80051ca:	4240      	negs	r0, r0
 80051cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80051ce:	2030      	movs	r0, #48	@ 0x30
 80051d0:	18e1      	adds	r1, r4, r3
 80051d2:	3143      	adds	r1, #67	@ 0x43
 80051d4:	7008      	strb	r0, [r1, #0]
 80051d6:	0021      	movs	r1, r4
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	3145      	adds	r1, #69	@ 0x45
 80051dc:	7809      	ldrb	r1, [r1, #0]
 80051de:	18a2      	adds	r2, r4, r2
 80051e0:	3243      	adds	r2, #67	@ 0x43
 80051e2:	3302      	adds	r3, #2
 80051e4:	7011      	strb	r1, [r2, #0]
 80051e6:	e7c1      	b.n	800516c <_printf_common+0x4c>
 80051e8:	0022      	movs	r2, r4
 80051ea:	2301      	movs	r3, #1
 80051ec:	9901      	ldr	r1, [sp, #4]
 80051ee:	9800      	ldr	r0, [sp, #0]
 80051f0:	9f08      	ldr	r7, [sp, #32]
 80051f2:	321a      	adds	r2, #26
 80051f4:	47b8      	blx	r7
 80051f6:	3001      	adds	r0, #1
 80051f8:	d0e6      	beq.n	80051c8 <_printf_common+0xa8>
 80051fa:	3601      	adds	r6, #1
 80051fc:	e7d1      	b.n	80051a2 <_printf_common+0x82>
	...

08005200 <_printf_i>:
 8005200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005202:	b08b      	sub	sp, #44	@ 0x2c
 8005204:	9206      	str	r2, [sp, #24]
 8005206:	000a      	movs	r2, r1
 8005208:	3243      	adds	r2, #67	@ 0x43
 800520a:	9307      	str	r3, [sp, #28]
 800520c:	9005      	str	r0, [sp, #20]
 800520e:	9203      	str	r2, [sp, #12]
 8005210:	7e0a      	ldrb	r2, [r1, #24]
 8005212:	000c      	movs	r4, r1
 8005214:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005216:	2a78      	cmp	r2, #120	@ 0x78
 8005218:	d809      	bhi.n	800522e <_printf_i+0x2e>
 800521a:	2a62      	cmp	r2, #98	@ 0x62
 800521c:	d80b      	bhi.n	8005236 <_printf_i+0x36>
 800521e:	2a00      	cmp	r2, #0
 8005220:	d100      	bne.n	8005224 <_printf_i+0x24>
 8005222:	e0ba      	b.n	800539a <_printf_i+0x19a>
 8005224:	497a      	ldr	r1, [pc, #488]	@ (8005410 <_printf_i+0x210>)
 8005226:	9104      	str	r1, [sp, #16]
 8005228:	2a58      	cmp	r2, #88	@ 0x58
 800522a:	d100      	bne.n	800522e <_printf_i+0x2e>
 800522c:	e08e      	b.n	800534c <_printf_i+0x14c>
 800522e:	0025      	movs	r5, r4
 8005230:	3542      	adds	r5, #66	@ 0x42
 8005232:	702a      	strb	r2, [r5, #0]
 8005234:	e022      	b.n	800527c <_printf_i+0x7c>
 8005236:	0010      	movs	r0, r2
 8005238:	3863      	subs	r0, #99	@ 0x63
 800523a:	2815      	cmp	r0, #21
 800523c:	d8f7      	bhi.n	800522e <_printf_i+0x2e>
 800523e:	f7fa ff67 	bl	8000110 <__gnu_thumb1_case_shi>
 8005242:	0016      	.short	0x0016
 8005244:	fff6001f 	.word	0xfff6001f
 8005248:	fff6fff6 	.word	0xfff6fff6
 800524c:	001ffff6 	.word	0x001ffff6
 8005250:	fff6fff6 	.word	0xfff6fff6
 8005254:	fff6fff6 	.word	0xfff6fff6
 8005258:	0036009f 	.word	0x0036009f
 800525c:	fff6007e 	.word	0xfff6007e
 8005260:	00b0fff6 	.word	0x00b0fff6
 8005264:	0036fff6 	.word	0x0036fff6
 8005268:	fff6fff6 	.word	0xfff6fff6
 800526c:	0082      	.short	0x0082
 800526e:	0025      	movs	r5, r4
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	3542      	adds	r5, #66	@ 0x42
 8005274:	1d11      	adds	r1, r2, #4
 8005276:	6019      	str	r1, [r3, #0]
 8005278:	6813      	ldr	r3, [r2, #0]
 800527a:	702b      	strb	r3, [r5, #0]
 800527c:	2301      	movs	r3, #1
 800527e:	e09e      	b.n	80053be <_printf_i+0x1be>
 8005280:	6818      	ldr	r0, [r3, #0]
 8005282:	6809      	ldr	r1, [r1, #0]
 8005284:	1d02      	adds	r2, r0, #4
 8005286:	060d      	lsls	r5, r1, #24
 8005288:	d50b      	bpl.n	80052a2 <_printf_i+0xa2>
 800528a:	6806      	ldr	r6, [r0, #0]
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	2e00      	cmp	r6, #0
 8005290:	da03      	bge.n	800529a <_printf_i+0x9a>
 8005292:	232d      	movs	r3, #45	@ 0x2d
 8005294:	9a03      	ldr	r2, [sp, #12]
 8005296:	4276      	negs	r6, r6
 8005298:	7013      	strb	r3, [r2, #0]
 800529a:	4b5d      	ldr	r3, [pc, #372]	@ (8005410 <_printf_i+0x210>)
 800529c:	270a      	movs	r7, #10
 800529e:	9304      	str	r3, [sp, #16]
 80052a0:	e018      	b.n	80052d4 <_printf_i+0xd4>
 80052a2:	6806      	ldr	r6, [r0, #0]
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	0649      	lsls	r1, r1, #25
 80052a8:	d5f1      	bpl.n	800528e <_printf_i+0x8e>
 80052aa:	b236      	sxth	r6, r6
 80052ac:	e7ef      	b.n	800528e <_printf_i+0x8e>
 80052ae:	6808      	ldr	r0, [r1, #0]
 80052b0:	6819      	ldr	r1, [r3, #0]
 80052b2:	c940      	ldmia	r1!, {r6}
 80052b4:	0605      	lsls	r5, r0, #24
 80052b6:	d402      	bmi.n	80052be <_printf_i+0xbe>
 80052b8:	0640      	lsls	r0, r0, #25
 80052ba:	d500      	bpl.n	80052be <_printf_i+0xbe>
 80052bc:	b2b6      	uxth	r6, r6
 80052be:	6019      	str	r1, [r3, #0]
 80052c0:	4b53      	ldr	r3, [pc, #332]	@ (8005410 <_printf_i+0x210>)
 80052c2:	270a      	movs	r7, #10
 80052c4:	9304      	str	r3, [sp, #16]
 80052c6:	2a6f      	cmp	r2, #111	@ 0x6f
 80052c8:	d100      	bne.n	80052cc <_printf_i+0xcc>
 80052ca:	3f02      	subs	r7, #2
 80052cc:	0023      	movs	r3, r4
 80052ce:	2200      	movs	r2, #0
 80052d0:	3343      	adds	r3, #67	@ 0x43
 80052d2:	701a      	strb	r2, [r3, #0]
 80052d4:	6863      	ldr	r3, [r4, #4]
 80052d6:	60a3      	str	r3, [r4, #8]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	db06      	blt.n	80052ea <_printf_i+0xea>
 80052dc:	2104      	movs	r1, #4
 80052de:	6822      	ldr	r2, [r4, #0]
 80052e0:	9d03      	ldr	r5, [sp, #12]
 80052e2:	438a      	bics	r2, r1
 80052e4:	6022      	str	r2, [r4, #0]
 80052e6:	4333      	orrs	r3, r6
 80052e8:	d00c      	beq.n	8005304 <_printf_i+0x104>
 80052ea:	9d03      	ldr	r5, [sp, #12]
 80052ec:	0030      	movs	r0, r6
 80052ee:	0039      	movs	r1, r7
 80052f0:	f7fa ff9e 	bl	8000230 <__aeabi_uidivmod>
 80052f4:	9b04      	ldr	r3, [sp, #16]
 80052f6:	3d01      	subs	r5, #1
 80052f8:	5c5b      	ldrb	r3, [r3, r1]
 80052fa:	702b      	strb	r3, [r5, #0]
 80052fc:	0033      	movs	r3, r6
 80052fe:	0006      	movs	r6, r0
 8005300:	429f      	cmp	r7, r3
 8005302:	d9f3      	bls.n	80052ec <_printf_i+0xec>
 8005304:	2f08      	cmp	r7, #8
 8005306:	d109      	bne.n	800531c <_printf_i+0x11c>
 8005308:	6823      	ldr	r3, [r4, #0]
 800530a:	07db      	lsls	r3, r3, #31
 800530c:	d506      	bpl.n	800531c <_printf_i+0x11c>
 800530e:	6862      	ldr	r2, [r4, #4]
 8005310:	6923      	ldr	r3, [r4, #16]
 8005312:	429a      	cmp	r2, r3
 8005314:	dc02      	bgt.n	800531c <_printf_i+0x11c>
 8005316:	2330      	movs	r3, #48	@ 0x30
 8005318:	3d01      	subs	r5, #1
 800531a:	702b      	strb	r3, [r5, #0]
 800531c:	9b03      	ldr	r3, [sp, #12]
 800531e:	1b5b      	subs	r3, r3, r5
 8005320:	6123      	str	r3, [r4, #16]
 8005322:	9b07      	ldr	r3, [sp, #28]
 8005324:	0021      	movs	r1, r4
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	9805      	ldr	r0, [sp, #20]
 800532a:	9b06      	ldr	r3, [sp, #24]
 800532c:	aa09      	add	r2, sp, #36	@ 0x24
 800532e:	f7ff fef7 	bl	8005120 <_printf_common>
 8005332:	3001      	adds	r0, #1
 8005334:	d148      	bne.n	80053c8 <_printf_i+0x1c8>
 8005336:	2001      	movs	r0, #1
 8005338:	4240      	negs	r0, r0
 800533a:	b00b      	add	sp, #44	@ 0x2c
 800533c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800533e:	2220      	movs	r2, #32
 8005340:	6809      	ldr	r1, [r1, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	6022      	str	r2, [r4, #0]
 8005346:	2278      	movs	r2, #120	@ 0x78
 8005348:	4932      	ldr	r1, [pc, #200]	@ (8005414 <_printf_i+0x214>)
 800534a:	9104      	str	r1, [sp, #16]
 800534c:	0021      	movs	r1, r4
 800534e:	3145      	adds	r1, #69	@ 0x45
 8005350:	700a      	strb	r2, [r1, #0]
 8005352:	6819      	ldr	r1, [r3, #0]
 8005354:	6822      	ldr	r2, [r4, #0]
 8005356:	c940      	ldmia	r1!, {r6}
 8005358:	0610      	lsls	r0, r2, #24
 800535a:	d402      	bmi.n	8005362 <_printf_i+0x162>
 800535c:	0650      	lsls	r0, r2, #25
 800535e:	d500      	bpl.n	8005362 <_printf_i+0x162>
 8005360:	b2b6      	uxth	r6, r6
 8005362:	6019      	str	r1, [r3, #0]
 8005364:	07d3      	lsls	r3, r2, #31
 8005366:	d502      	bpl.n	800536e <_printf_i+0x16e>
 8005368:	2320      	movs	r3, #32
 800536a:	4313      	orrs	r3, r2
 800536c:	6023      	str	r3, [r4, #0]
 800536e:	2e00      	cmp	r6, #0
 8005370:	d001      	beq.n	8005376 <_printf_i+0x176>
 8005372:	2710      	movs	r7, #16
 8005374:	e7aa      	b.n	80052cc <_printf_i+0xcc>
 8005376:	2220      	movs	r2, #32
 8005378:	6823      	ldr	r3, [r4, #0]
 800537a:	4393      	bics	r3, r2
 800537c:	6023      	str	r3, [r4, #0]
 800537e:	e7f8      	b.n	8005372 <_printf_i+0x172>
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	680d      	ldr	r5, [r1, #0]
 8005384:	1d10      	adds	r0, r2, #4
 8005386:	6949      	ldr	r1, [r1, #20]
 8005388:	6018      	str	r0, [r3, #0]
 800538a:	6813      	ldr	r3, [r2, #0]
 800538c:	062e      	lsls	r6, r5, #24
 800538e:	d501      	bpl.n	8005394 <_printf_i+0x194>
 8005390:	6019      	str	r1, [r3, #0]
 8005392:	e002      	b.n	800539a <_printf_i+0x19a>
 8005394:	066d      	lsls	r5, r5, #25
 8005396:	d5fb      	bpl.n	8005390 <_printf_i+0x190>
 8005398:	8019      	strh	r1, [r3, #0]
 800539a:	2300      	movs	r3, #0
 800539c:	9d03      	ldr	r5, [sp, #12]
 800539e:	6123      	str	r3, [r4, #16]
 80053a0:	e7bf      	b.n	8005322 <_printf_i+0x122>
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	1d11      	adds	r1, r2, #4
 80053a6:	6019      	str	r1, [r3, #0]
 80053a8:	6815      	ldr	r5, [r2, #0]
 80053aa:	2100      	movs	r1, #0
 80053ac:	0028      	movs	r0, r5
 80053ae:	6862      	ldr	r2, [r4, #4]
 80053b0:	f000 f856 	bl	8005460 <memchr>
 80053b4:	2800      	cmp	r0, #0
 80053b6:	d001      	beq.n	80053bc <_printf_i+0x1bc>
 80053b8:	1b40      	subs	r0, r0, r5
 80053ba:	6060      	str	r0, [r4, #4]
 80053bc:	6863      	ldr	r3, [r4, #4]
 80053be:	6123      	str	r3, [r4, #16]
 80053c0:	2300      	movs	r3, #0
 80053c2:	9a03      	ldr	r2, [sp, #12]
 80053c4:	7013      	strb	r3, [r2, #0]
 80053c6:	e7ac      	b.n	8005322 <_printf_i+0x122>
 80053c8:	002a      	movs	r2, r5
 80053ca:	6923      	ldr	r3, [r4, #16]
 80053cc:	9906      	ldr	r1, [sp, #24]
 80053ce:	9805      	ldr	r0, [sp, #20]
 80053d0:	9d07      	ldr	r5, [sp, #28]
 80053d2:	47a8      	blx	r5
 80053d4:	3001      	adds	r0, #1
 80053d6:	d0ae      	beq.n	8005336 <_printf_i+0x136>
 80053d8:	6823      	ldr	r3, [r4, #0]
 80053da:	079b      	lsls	r3, r3, #30
 80053dc:	d415      	bmi.n	800540a <_printf_i+0x20a>
 80053de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053e0:	68e0      	ldr	r0, [r4, #12]
 80053e2:	4298      	cmp	r0, r3
 80053e4:	daa9      	bge.n	800533a <_printf_i+0x13a>
 80053e6:	0018      	movs	r0, r3
 80053e8:	e7a7      	b.n	800533a <_printf_i+0x13a>
 80053ea:	0022      	movs	r2, r4
 80053ec:	2301      	movs	r3, #1
 80053ee:	9906      	ldr	r1, [sp, #24]
 80053f0:	9805      	ldr	r0, [sp, #20]
 80053f2:	9e07      	ldr	r6, [sp, #28]
 80053f4:	3219      	adds	r2, #25
 80053f6:	47b0      	blx	r6
 80053f8:	3001      	adds	r0, #1
 80053fa:	d09c      	beq.n	8005336 <_printf_i+0x136>
 80053fc:	3501      	adds	r5, #1
 80053fe:	68e3      	ldr	r3, [r4, #12]
 8005400:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005402:	1a9b      	subs	r3, r3, r2
 8005404:	42ab      	cmp	r3, r5
 8005406:	dcf0      	bgt.n	80053ea <_printf_i+0x1ea>
 8005408:	e7e9      	b.n	80053de <_printf_i+0x1de>
 800540a:	2500      	movs	r5, #0
 800540c:	e7f7      	b.n	80053fe <_printf_i+0x1fe>
 800540e:	46c0      	nop			@ (mov r8, r8)
 8005410:	0800560d 	.word	0x0800560d
 8005414:	0800561e 	.word	0x0800561e

08005418 <memmove>:
 8005418:	b510      	push	{r4, lr}
 800541a:	4288      	cmp	r0, r1
 800541c:	d902      	bls.n	8005424 <memmove+0xc>
 800541e:	188b      	adds	r3, r1, r2
 8005420:	4298      	cmp	r0, r3
 8005422:	d308      	bcc.n	8005436 <memmove+0x1e>
 8005424:	2300      	movs	r3, #0
 8005426:	429a      	cmp	r2, r3
 8005428:	d007      	beq.n	800543a <memmove+0x22>
 800542a:	5ccc      	ldrb	r4, [r1, r3]
 800542c:	54c4      	strb	r4, [r0, r3]
 800542e:	3301      	adds	r3, #1
 8005430:	e7f9      	b.n	8005426 <memmove+0xe>
 8005432:	5c8b      	ldrb	r3, [r1, r2]
 8005434:	5483      	strb	r3, [r0, r2]
 8005436:	3a01      	subs	r2, #1
 8005438:	d2fb      	bcs.n	8005432 <memmove+0x1a>
 800543a:	bd10      	pop	{r4, pc}

0800543c <_sbrk_r>:
 800543c:	2300      	movs	r3, #0
 800543e:	b570      	push	{r4, r5, r6, lr}
 8005440:	4d06      	ldr	r5, [pc, #24]	@ (800545c <_sbrk_r+0x20>)
 8005442:	0004      	movs	r4, r0
 8005444:	0008      	movs	r0, r1
 8005446:	602b      	str	r3, [r5, #0]
 8005448:	f7fb fd0e 	bl	8000e68 <_sbrk>
 800544c:	1c43      	adds	r3, r0, #1
 800544e:	d103      	bne.n	8005458 <_sbrk_r+0x1c>
 8005450:	682b      	ldr	r3, [r5, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d000      	beq.n	8005458 <_sbrk_r+0x1c>
 8005456:	6023      	str	r3, [r4, #0]
 8005458:	bd70      	pop	{r4, r5, r6, pc}
 800545a:	46c0      	nop			@ (mov r8, r8)
 800545c:	2000034c 	.word	0x2000034c

08005460 <memchr>:
 8005460:	b2c9      	uxtb	r1, r1
 8005462:	1882      	adds	r2, r0, r2
 8005464:	4290      	cmp	r0, r2
 8005466:	d101      	bne.n	800546c <memchr+0xc>
 8005468:	2000      	movs	r0, #0
 800546a:	4770      	bx	lr
 800546c:	7803      	ldrb	r3, [r0, #0]
 800546e:	428b      	cmp	r3, r1
 8005470:	d0fb      	beq.n	800546a <memchr+0xa>
 8005472:	3001      	adds	r0, #1
 8005474:	e7f6      	b.n	8005464 <memchr+0x4>

08005476 <memcpy>:
 8005476:	2300      	movs	r3, #0
 8005478:	b510      	push	{r4, lr}
 800547a:	429a      	cmp	r2, r3
 800547c:	d100      	bne.n	8005480 <memcpy+0xa>
 800547e:	bd10      	pop	{r4, pc}
 8005480:	5ccc      	ldrb	r4, [r1, r3]
 8005482:	54c4      	strb	r4, [r0, r3]
 8005484:	3301      	adds	r3, #1
 8005486:	e7f8      	b.n	800547a <memcpy+0x4>

08005488 <_realloc_r>:
 8005488:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800548a:	0006      	movs	r6, r0
 800548c:	000c      	movs	r4, r1
 800548e:	0015      	movs	r5, r2
 8005490:	2900      	cmp	r1, #0
 8005492:	d105      	bne.n	80054a0 <_realloc_r+0x18>
 8005494:	0011      	movs	r1, r2
 8005496:	f7ff fc55 	bl	8004d44 <_malloc_r>
 800549a:	0004      	movs	r4, r0
 800549c:	0020      	movs	r0, r4
 800549e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80054a0:	2a00      	cmp	r2, #0
 80054a2:	d103      	bne.n	80054ac <_realloc_r+0x24>
 80054a4:	f7ff fbe2 	bl	8004c6c <_free_r>
 80054a8:	002c      	movs	r4, r5
 80054aa:	e7f7      	b.n	800549c <_realloc_r+0x14>
 80054ac:	f000 f81c 	bl	80054e8 <_malloc_usable_size_r>
 80054b0:	0007      	movs	r7, r0
 80054b2:	4285      	cmp	r5, r0
 80054b4:	d802      	bhi.n	80054bc <_realloc_r+0x34>
 80054b6:	0843      	lsrs	r3, r0, #1
 80054b8:	42ab      	cmp	r3, r5
 80054ba:	d3ef      	bcc.n	800549c <_realloc_r+0x14>
 80054bc:	0029      	movs	r1, r5
 80054be:	0030      	movs	r0, r6
 80054c0:	f7ff fc40 	bl	8004d44 <_malloc_r>
 80054c4:	9001      	str	r0, [sp, #4]
 80054c6:	2800      	cmp	r0, #0
 80054c8:	d101      	bne.n	80054ce <_realloc_r+0x46>
 80054ca:	9c01      	ldr	r4, [sp, #4]
 80054cc:	e7e6      	b.n	800549c <_realloc_r+0x14>
 80054ce:	002a      	movs	r2, r5
 80054d0:	42bd      	cmp	r5, r7
 80054d2:	d900      	bls.n	80054d6 <_realloc_r+0x4e>
 80054d4:	003a      	movs	r2, r7
 80054d6:	0021      	movs	r1, r4
 80054d8:	9801      	ldr	r0, [sp, #4]
 80054da:	f7ff ffcc 	bl	8005476 <memcpy>
 80054de:	0021      	movs	r1, r4
 80054e0:	0030      	movs	r0, r6
 80054e2:	f7ff fbc3 	bl	8004c6c <_free_r>
 80054e6:	e7f0      	b.n	80054ca <_realloc_r+0x42>

080054e8 <_malloc_usable_size_r>:
 80054e8:	1f0b      	subs	r3, r1, #4
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	1f18      	subs	r0, r3, #4
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	da01      	bge.n	80054f6 <_malloc_usable_size_r+0xe>
 80054f2:	580b      	ldr	r3, [r1, r0]
 80054f4:	18c0      	adds	r0, r0, r3
 80054f6:	4770      	bx	lr

080054f8 <_init>:
 80054f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fa:	46c0      	nop			@ (mov r8, r8)
 80054fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054fe:	bc08      	pop	{r3}
 8005500:	469e      	mov	lr, r3
 8005502:	4770      	bx	lr

08005504 <_fini>:
 8005504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005506:	46c0      	nop			@ (mov r8, r8)
 8005508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800550a:	bc08      	pop	{r3}
 800550c:	469e      	mov	lr, r3
 800550e:	4770      	bx	lr
