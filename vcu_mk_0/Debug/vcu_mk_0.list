
vcu_mk_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004df8  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08004eb0  08004eb0  00005eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fd0  08004fd0  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004fd0  08004fd0  0000605c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004fd0  08004fd0  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fd0  08004fd0  00005fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004fd4  08004fd4  00005fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004fd8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  2000005c  08005034  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08005034  00006358  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011212  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002325  00000000  00000000  00017296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f70  00000000  00000000  000195c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c26  00000000  00000000  0001a530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001756a  00000000  00000000  0001b156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012b5f  00000000  00000000  000326c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000986d5  00000000  00000000  0004521f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd8f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d30  00000000  00000000  000dd938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000e1668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000005c 	.word	0x2000005c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004e98 	.word	0x08004e98

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000060 	.word	0x20000060
 80000fc:	08004e98 	.word	0x08004e98

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	@ 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	@ 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b092      	sub	sp, #72	@ 0x48
 8000404:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000406:	f000 fcd3 	bl	8000db0 <HAL_Init>
  /* USER CODE BEGIN Init */
  //moon_riders_initialize();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800040a:	f000 f87d 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800040e:	f000 fa8b 	bl	8000928 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000412:	f000 f92b 	bl	800066c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000416:	f000 f9d7 	bl	80007c8 <MX_TIM3_Init>
  MX_ADC1_Init();
 800041a:	f000 f8bd 	bl	8000598 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800041e:	f000 fa35 	bl	800088c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint16_t pot_val=0;
 8000422:	2346      	movs	r3, #70	@ 0x46
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	2200      	movs	r2, #0
 8000428:	801a      	strh	r2, [r3, #0]

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	    HAL_ADC_Start(&hadc1);
 800042a:	4b32      	ldr	r3, [pc, #200]	@ (80004f4 <main+0xf4>)
 800042c:	0018      	movs	r0, r3
 800042e:	f001 f847 	bl	80014c0 <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&hadc1, 1);
 8000432:	4b30      	ldr	r3, [pc, #192]	@ (80004f4 <main+0xf4>)
 8000434:	2101      	movs	r1, #1
 8000436:	0018      	movs	r0, r3
 8000438:	f001 f890 	bl	800155c <HAL_ADC_PollForConversion>
	    pot_val = HAL_ADC_GetValue(&hadc1);
 800043c:	4b2d      	ldr	r3, [pc, #180]	@ (80004f4 <main+0xf4>)
 800043e:	0018      	movs	r0, r3
 8000440:	f001 f920 	bl	8001684 <HAL_ADC_GetValue>
 8000444:	0002      	movs	r2, r0
 8000446:	2146      	movs	r1, #70	@ 0x46
 8000448:	187b      	adds	r3, r7, r1
 800044a:	801a      	strh	r2, [r3, #0]

	    // Format the ADC value into the buffer
	    snprintf(tx_buffer, sizeof(tx_buffer), "ADC Value: %u\r\n", pot_val);
 800044c:	187b      	adds	r3, r7, r1
 800044e:	881b      	ldrh	r3, [r3, #0]
 8000450:	4a29      	ldr	r2, [pc, #164]	@ (80004f8 <main+0xf8>)
 8000452:	1d38      	adds	r0, r7, #4
 8000454:	2140      	movs	r1, #64	@ 0x40
 8000456:	f004 f86f 	bl	8004538 <sniprintf>

	    // Read Left Button (Active Low)
	    if (HAL_GPIO_ReadPin(button_left_GPIO_Port, button_left_Pin) == GPIO_PIN_RESET) {
 800045a:	4b28      	ldr	r3, [pc, #160]	@ (80004fc <main+0xfc>)
 800045c:	2180      	movs	r1, #128	@ 0x80
 800045e:	0018      	movs	r0, r3
 8000460:	f001 fd92 	bl	8001f88 <HAL_GPIO_ReadPin>
 8000464:	1e03      	subs	r3, r0, #0
 8000466:	d114      	bne.n	8000492 <main+0x92>
	        HAL_Delay(10);  // Debounce
 8000468:	200a      	movs	r0, #10
 800046a:	f000 fd27 	bl	8000ebc <HAL_Delay>
	        if (HAL_GPIO_ReadPin(button_left_GPIO_Port, button_left_Pin) == GPIO_PIN_RESET) {
 800046e:	4b23      	ldr	r3, [pc, #140]	@ (80004fc <main+0xfc>)
 8000470:	2180      	movs	r1, #128	@ 0x80
 8000472:	0018      	movs	r0, r3
 8000474:	f001 fd88 	bl	8001f88 <HAL_GPIO_ReadPin>
 8000478:	1e03      	subs	r3, r0, #0
 800047a:	d136      	bne.n	80004ea <main+0xea>
	            HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);  // Left LED ON
 800047c:	4b20      	ldr	r3, [pc, #128]	@ (8000500 <main+0x100>)
 800047e:	2104      	movs	r1, #4
 8000480:	0018      	movs	r0, r3
 8000482:	f002 fc31 	bl	8002ce8 <HAL_TIM_PWM_Start>
	            HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);   // Right LED OFF
 8000486:	4b1f      	ldr	r3, [pc, #124]	@ (8000504 <main+0x104>)
 8000488:	2100      	movs	r1, #0
 800048a:	0018      	movs	r0, r3
 800048c:	f002 fd10 	bl	8002eb0 <HAL_TIM_PWM_Stop>
 8000490:	e02b      	b.n	80004ea <main+0xea>
	        }
	    }

	    // Read Right Button (Active Low)
	    else if (HAL_GPIO_ReadPin(button_right_GPIO_Port, button_right_Pin) == GPIO_PIN_RESET) {
 8000492:	2380      	movs	r3, #128	@ 0x80
 8000494:	009a      	lsls	r2, r3, #2
 8000496:	23a0      	movs	r3, #160	@ 0xa0
 8000498:	05db      	lsls	r3, r3, #23
 800049a:	0011      	movs	r1, r2
 800049c:	0018      	movs	r0, r3
 800049e:	f001 fd73 	bl	8001f88 <HAL_GPIO_ReadPin>
 80004a2:	1e03      	subs	r3, r0, #0
 80004a4:	d117      	bne.n	80004d6 <main+0xd6>
	        HAL_Delay(10);  // Debounce
 80004a6:	200a      	movs	r0, #10
 80004a8:	f000 fd08 	bl	8000ebc <HAL_Delay>
	        if (HAL_GPIO_ReadPin(button_right_GPIO_Port, button_right_Pin) == GPIO_PIN_RESET) {
 80004ac:	2380      	movs	r3, #128	@ 0x80
 80004ae:	009a      	lsls	r2, r3, #2
 80004b0:	23a0      	movs	r3, #160	@ 0xa0
 80004b2:	05db      	lsls	r3, r3, #23
 80004b4:	0011      	movs	r1, r2
 80004b6:	0018      	movs	r0, r3
 80004b8:	f001 fd66 	bl	8001f88 <HAL_GPIO_ReadPin>
 80004bc:	1e03      	subs	r3, r0, #0
 80004be:	d114      	bne.n	80004ea <main+0xea>
	            HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);  // Right LED ON
 80004c0:	4b10      	ldr	r3, [pc, #64]	@ (8000504 <main+0x104>)
 80004c2:	2100      	movs	r1, #0
 80004c4:	0018      	movs	r0, r3
 80004c6:	f002 fc0f 	bl	8002ce8 <HAL_TIM_PWM_Start>
	            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);   // Left LED OFF
 80004ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000500 <main+0x100>)
 80004cc:	2104      	movs	r1, #4
 80004ce:	0018      	movs	r0, r3
 80004d0:	f002 fcee 	bl	8002eb0 <HAL_TIM_PWM_Stop>
 80004d4:	e009      	b.n	80004ea <main+0xea>
	        }
	    }

	    // No Button Pressed – Turn Both OFF
	    else {
	        HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80004d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000500 <main+0x100>)
 80004d8:	2104      	movs	r1, #4
 80004da:	0018      	movs	r0, r3
 80004dc:	f002 fce8 	bl	8002eb0 <HAL_TIM_PWM_Stop>
	        HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80004e0:	4b08      	ldr	r3, [pc, #32]	@ (8000504 <main+0x104>)
 80004e2:	2100      	movs	r1, #0
 80004e4:	0018      	movs	r0, r3
 80004e6:	f002 fce3 	bl	8002eb0 <HAL_TIM_PWM_Stop>
	    }

	    HAL_Delay(100);  // 100ms scheduler-like pacing
 80004ea:	2064      	movs	r0, #100	@ 0x64
 80004ec:	f000 fce6 	bl	8000ebc <HAL_Delay>
	    HAL_ADC_Start(&hadc1);
 80004f0:	e79b      	b.n	800042a <main+0x2a>
 80004f2:	46c0      	nop			@ (mov r8, r8)
 80004f4:	20000078 	.word	0x20000078
 80004f8:	08004eb0 	.word	0x08004eb0
 80004fc:	50000800 	.word	0x50000800
 8000500:	200000dc 	.word	0x200000dc
 8000504:	20000128 	.word	0x20000128

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b590      	push	{r4, r7, lr}
 800050a:	b093      	sub	sp, #76	@ 0x4c
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	2414      	movs	r4, #20
 8000510:	193b      	adds	r3, r7, r4
 8000512:	0018      	movs	r0, r3
 8000514:	2334      	movs	r3, #52	@ 0x34
 8000516:	001a      	movs	r2, r3
 8000518:	2100      	movs	r1, #0
 800051a:	f004 f843 	bl	80045a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	0018      	movs	r0, r3
 8000522:	2310      	movs	r3, #16
 8000524:	001a      	movs	r2, r3
 8000526:	2100      	movs	r1, #0
 8000528:	f004 f83c 	bl	80045a4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800052c:	2380      	movs	r3, #128	@ 0x80
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	0018      	movs	r0, r3
 8000532:	f001 fd47 	bl	8001fc4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000536:	193b      	adds	r3, r7, r4
 8000538:	2202      	movs	r2, #2
 800053a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053c:	193b      	adds	r3, r7, r4
 800053e:	2280      	movs	r2, #128	@ 0x80
 8000540:	0052      	lsls	r2, r2, #1
 8000542:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000544:	193b      	adds	r3, r7, r4
 8000546:	2200      	movs	r2, #0
 8000548:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800054a:	193b      	adds	r3, r7, r4
 800054c:	2240      	movs	r2, #64	@ 0x40
 800054e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000550:	193b      	adds	r3, r7, r4
 8000552:	2200      	movs	r2, #0
 8000554:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000556:	193b      	adds	r3, r7, r4
 8000558:	0018      	movs	r0, r3
 800055a:	f001 fd7f 	bl	800205c <HAL_RCC_OscConfig>
 800055e:	1e03      	subs	r3, r0, #0
 8000560:	d001      	beq.n	8000566 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000562:	f000 fa3b 	bl	80009dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	2207      	movs	r2, #7
 800056a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	2200      	movs	r2, #0
 8000570:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2200      	movs	r2, #0
 800057c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	2100      	movs	r1, #0
 8000582:	0018      	movs	r0, r3
 8000584:	f002 f87a 	bl	800267c <HAL_RCC_ClockConfig>
 8000588:	1e03      	subs	r3, r0, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800058c:	f000 fa26 	bl	80009dc <Error_Handler>
  }
}
 8000590:	46c0      	nop			@ (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	b013      	add	sp, #76	@ 0x4c
 8000596:	bd90      	pop	{r4, r7, pc}

08000598 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	0018      	movs	r0, r3
 80005a2:	230c      	movs	r3, #12
 80005a4:	001a      	movs	r2, r3
 80005a6:	2100      	movs	r1, #0
 80005a8:	f003 fffc 	bl	80045a4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ac:	4b2d      	ldr	r3, [pc, #180]	@ (8000664 <MX_ADC1_Init+0xcc>)
 80005ae:	4a2e      	ldr	r2, [pc, #184]	@ (8000668 <MX_ADC1_Init+0xd0>)
 80005b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005b2:	4b2c      	ldr	r3, [pc, #176]	@ (8000664 <MX_ADC1_Init+0xcc>)
 80005b4:	2280      	movs	r2, #128	@ 0x80
 80005b6:	05d2      	lsls	r2, r2, #23
 80005b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ba:	4b2a      	ldr	r3, [pc, #168]	@ (8000664 <MX_ADC1_Init+0xcc>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c0:	4b28      	ldr	r3, [pc, #160]	@ (8000664 <MX_ADC1_Init+0xcc>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005c6:	4b27      	ldr	r3, [pc, #156]	@ (8000664 <MX_ADC1_Init+0xcc>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005cc:	4b25      	ldr	r3, [pc, #148]	@ (8000664 <MX_ADC1_Init+0xcc>)
 80005ce:	2204      	movs	r2, #4
 80005d0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005d2:	4b24      	ldr	r3, [pc, #144]	@ (8000664 <MX_ADC1_Init+0xcc>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80005d8:	4b22      	ldr	r3, [pc, #136]	@ (8000664 <MX_ADC1_Init+0xcc>)
 80005da:	2200      	movs	r2, #0
 80005dc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005de:	4b21      	ldr	r3, [pc, #132]	@ (8000664 <MX_ADC1_Init+0xcc>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80005e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000664 <MX_ADC1_Init+0xcc>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000664 <MX_ADC1_Init+0xcc>)
 80005ec:	2220      	movs	r2, #32
 80005ee:	2100      	movs	r1, #0
 80005f0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000664 <MX_ADC1_Init+0xcc>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000664 <MX_ADC1_Init+0xcc>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005fe:	4b19      	ldr	r3, [pc, #100]	@ (8000664 <MX_ADC1_Init+0xcc>)
 8000600:	222c      	movs	r2, #44	@ 0x2c
 8000602:	2100      	movs	r1, #0
 8000604:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000606:	4b17      	ldr	r3, [pc, #92]	@ (8000664 <MX_ADC1_Init+0xcc>)
 8000608:	2200      	movs	r2, #0
 800060a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800060c:	4b15      	ldr	r3, [pc, #84]	@ (8000664 <MX_ADC1_Init+0xcc>)
 800060e:	2200      	movs	r2, #0
 8000610:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000612:	4b14      	ldr	r3, [pc, #80]	@ (8000664 <MX_ADC1_Init+0xcc>)
 8000614:	2200      	movs	r2, #0
 8000616:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000618:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <MX_ADC1_Init+0xcc>)
 800061a:	223c      	movs	r2, #60	@ 0x3c
 800061c:	2100      	movs	r1, #0
 800061e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000620:	4b10      	ldr	r3, [pc, #64]	@ (8000664 <MX_ADC1_Init+0xcc>)
 8000622:	2200      	movs	r2, #0
 8000624:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000626:	4b0f      	ldr	r3, [pc, #60]	@ (8000664 <MX_ADC1_Init+0xcc>)
 8000628:	0018      	movs	r0, r3
 800062a:	f000 fda1 	bl	8001170 <HAL_ADC_Init>
 800062e:	1e03      	subs	r3, r0, #0
 8000630:	d001      	beq.n	8000636 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000632:	f000 f9d3 	bl	80009dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2201      	movs	r2, #1
 800063a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2200      	movs	r2, #0
 8000640:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000648:	1d3a      	adds	r2, r7, #4
 800064a:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <MX_ADC1_Init+0xcc>)
 800064c:	0011      	movs	r1, r2
 800064e:	0018      	movs	r0, r3
 8000650:	f001 f824 	bl	800169c <HAL_ADC_ConfigChannel>
 8000654:	1e03      	subs	r3, r0, #0
 8000656:	d001      	beq.n	800065c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000658:	f000 f9c0 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800065c:	46c0      	nop			@ (mov r8, r8)
 800065e:	46bd      	mov	sp, r7
 8000660:	b004      	add	sp, #16
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000078 	.word	0x20000078
 8000668:	40012400 	.word	0x40012400

0800066c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b098      	sub	sp, #96	@ 0x60
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000672:	2354      	movs	r3, #84	@ 0x54
 8000674:	18fb      	adds	r3, r7, r3
 8000676:	0018      	movs	r0, r3
 8000678:	230c      	movs	r3, #12
 800067a:	001a      	movs	r2, r3
 800067c:	2100      	movs	r1, #0
 800067e:	f003 ff91 	bl	80045a4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000682:	2338      	movs	r3, #56	@ 0x38
 8000684:	18fb      	adds	r3, r7, r3
 8000686:	0018      	movs	r0, r3
 8000688:	231c      	movs	r3, #28
 800068a:	001a      	movs	r2, r3
 800068c:	2100      	movs	r1, #0
 800068e:	f003 ff89 	bl	80045a4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	0018      	movs	r0, r3
 8000696:	2334      	movs	r3, #52	@ 0x34
 8000698:	001a      	movs	r2, r3
 800069a:	2100      	movs	r1, #0
 800069c:	f003 ff82 	bl	80045a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006a0:	4b46      	ldr	r3, [pc, #280]	@ (80007bc <MX_TIM1_Init+0x150>)
 80006a2:	4a47      	ldr	r2, [pc, #284]	@ (80007c0 <MX_TIM1_Init+0x154>)
 80006a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15999;
 80006a6:	4b45      	ldr	r3, [pc, #276]	@ (80007bc <MX_TIM1_Init+0x150>)
 80006a8:	4a46      	ldr	r2, [pc, #280]	@ (80007c4 <MX_TIM1_Init+0x158>)
 80006aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ac:	4b43      	ldr	r3, [pc, #268]	@ (80007bc <MX_TIM1_Init+0x150>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 300;
 80006b2:	4b42      	ldr	r3, [pc, #264]	@ (80007bc <MX_TIM1_Init+0x150>)
 80006b4:	2296      	movs	r2, #150	@ 0x96
 80006b6:	0052      	lsls	r2, r2, #1
 80006b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ba:	4b40      	ldr	r3, [pc, #256]	@ (80007bc <MX_TIM1_Init+0x150>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006c0:	4b3e      	ldr	r3, [pc, #248]	@ (80007bc <MX_TIM1_Init+0x150>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c6:	4b3d      	ldr	r3, [pc, #244]	@ (80007bc <MX_TIM1_Init+0x150>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006cc:	4b3b      	ldr	r3, [pc, #236]	@ (80007bc <MX_TIM1_Init+0x150>)
 80006ce:	0018      	movs	r0, r3
 80006d0:	f002 fab2 	bl	8002c38 <HAL_TIM_PWM_Init>
 80006d4:	1e03      	subs	r3, r0, #0
 80006d6:	d001      	beq.n	80006dc <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 80006d8:	f000 f980 	bl	80009dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006dc:	2154      	movs	r1, #84	@ 0x54
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2200      	movs	r2, #0
 80006e8:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006f0:	187a      	adds	r2, r7, r1
 80006f2:	4b32      	ldr	r3, [pc, #200]	@ (80007bc <MX_TIM1_Init+0x150>)
 80006f4:	0011      	movs	r1, r2
 80006f6:	0018      	movs	r0, r3
 80006f8:	f003 f8d2 	bl	80038a0 <HAL_TIMEx_MasterConfigSynchronization>
 80006fc:	1e03      	subs	r3, r0, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000700:	f000 f96c 	bl	80009dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000704:	2138      	movs	r1, #56	@ 0x38
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2260      	movs	r2, #96	@ 0x60
 800070a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 149;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2295      	movs	r2, #149	@ 0x95
 8000710:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2200      	movs	r2, #0
 8000728:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000730:	1879      	adds	r1, r7, r1
 8000732:	4b22      	ldr	r3, [pc, #136]	@ (80007bc <MX_TIM1_Init+0x150>)
 8000734:	2204      	movs	r2, #4
 8000736:	0018      	movs	r0, r3
 8000738:	f002 fc46 	bl	8002fc8 <HAL_TIM_PWM_ConfigChannel>
 800073c:	1e03      	subs	r3, r0, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8000740:	f000 f94c 	bl	80009dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	2200      	movs	r2, #0
 800074e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2280      	movs	r2, #128	@ 0x80
 8000766:	0192      	lsls	r2, r2, #6
 8000768:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2280      	movs	r2, #128	@ 0x80
 8000780:	0492      	lsls	r2, r2, #18
 8000782:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2200      	movs	r2, #0
 8000788:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	2200      	movs	r2, #0
 800078e:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	2200      	movs	r2, #0
 8000794:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000796:	1d3a      	adds	r2, r7, #4
 8000798:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <MX_TIM1_Init+0x150>)
 800079a:	0011      	movs	r1, r2
 800079c:	0018      	movs	r0, r3
 800079e:	f003 f8e7 	bl	8003970 <HAL_TIMEx_ConfigBreakDeadTime>
 80007a2:	1e03      	subs	r3, r0, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 80007a6:	f000 f919 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007aa:	4b04      	ldr	r3, [pc, #16]	@ (80007bc <MX_TIM1_Init+0x150>)
 80007ac:	0018      	movs	r0, r3
 80007ae:	f000 f9b7 	bl	8000b20 <HAL_TIM_MspPostInit>

}
 80007b2:	46c0      	nop			@ (mov r8, r8)
 80007b4:	46bd      	mov	sp, r7
 80007b6:	b018      	add	sp, #96	@ 0x60
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	200000dc 	.word	0x200000dc
 80007c0:	40012c00 	.word	0x40012c00
 80007c4:	00003e7f 	.word	0x00003e7f

080007c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	@ 0x28
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ce:	231c      	movs	r3, #28
 80007d0:	18fb      	adds	r3, r7, r3
 80007d2:	0018      	movs	r0, r3
 80007d4:	230c      	movs	r3, #12
 80007d6:	001a      	movs	r2, r3
 80007d8:	2100      	movs	r1, #0
 80007da:	f003 fee3 	bl	80045a4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007de:	003b      	movs	r3, r7
 80007e0:	0018      	movs	r0, r3
 80007e2:	231c      	movs	r3, #28
 80007e4:	001a      	movs	r2, r3
 80007e6:	2100      	movs	r1, #0
 80007e8:	f003 fedc 	bl	80045a4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007ec:	4b24      	ldr	r3, [pc, #144]	@ (8000880 <MX_TIM3_Init+0xb8>)
 80007ee:	4a25      	ldr	r2, [pc, #148]	@ (8000884 <MX_TIM3_Init+0xbc>)
 80007f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15999;
 80007f2:	4b23      	ldr	r3, [pc, #140]	@ (8000880 <MX_TIM3_Init+0xb8>)
 80007f4:	4a24      	ldr	r2, [pc, #144]	@ (8000888 <MX_TIM3_Init+0xc0>)
 80007f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f8:	4b21      	ldr	r3, [pc, #132]	@ (8000880 <MX_TIM3_Init+0xb8>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 300;
 80007fe:	4b20      	ldr	r3, [pc, #128]	@ (8000880 <MX_TIM3_Init+0xb8>)
 8000800:	2296      	movs	r2, #150	@ 0x96
 8000802:	0052      	lsls	r2, r2, #1
 8000804:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000806:	4b1e      	ldr	r3, [pc, #120]	@ (8000880 <MX_TIM3_Init+0xb8>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080c:	4b1c      	ldr	r3, [pc, #112]	@ (8000880 <MX_TIM3_Init+0xb8>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000812:	4b1b      	ldr	r3, [pc, #108]	@ (8000880 <MX_TIM3_Init+0xb8>)
 8000814:	0018      	movs	r0, r3
 8000816:	f002 fa0f 	bl	8002c38 <HAL_TIM_PWM_Init>
 800081a:	1e03      	subs	r3, r0, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800081e:	f000 f8dd 	bl	80009dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000822:	211c      	movs	r1, #28
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800082a:	187b      	adds	r3, r7, r1
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000830:	187a      	adds	r2, r7, r1
 8000832:	4b13      	ldr	r3, [pc, #76]	@ (8000880 <MX_TIM3_Init+0xb8>)
 8000834:	0011      	movs	r1, r2
 8000836:	0018      	movs	r0, r3
 8000838:	f003 f832 	bl	80038a0 <HAL_TIMEx_MasterConfigSynchronization>
 800083c:	1e03      	subs	r3, r0, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000840:	f000 f8cc 	bl	80009dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000844:	003b      	movs	r3, r7
 8000846:	2260      	movs	r2, #96	@ 0x60
 8000848:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 149;
 800084a:	003b      	movs	r3, r7
 800084c:	2295      	movs	r2, #149	@ 0x95
 800084e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000850:	003b      	movs	r3, r7
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000856:	003b      	movs	r3, r7
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800085c:	0039      	movs	r1, r7
 800085e:	4b08      	ldr	r3, [pc, #32]	@ (8000880 <MX_TIM3_Init+0xb8>)
 8000860:	2200      	movs	r2, #0
 8000862:	0018      	movs	r0, r3
 8000864:	f002 fbb0 	bl	8002fc8 <HAL_TIM_PWM_ConfigChannel>
 8000868:	1e03      	subs	r3, r0, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 800086c:	f000 f8b6 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000870:	4b03      	ldr	r3, [pc, #12]	@ (8000880 <MX_TIM3_Init+0xb8>)
 8000872:	0018      	movs	r0, r3
 8000874:	f000 f954 	bl	8000b20 <HAL_TIM_MspPostInit>

}
 8000878:	46c0      	nop			@ (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	b00a      	add	sp, #40	@ 0x28
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000128 	.word	0x20000128
 8000884:	40000400 	.word	0x40000400
 8000888:	00003e7f 	.word	0x00003e7f

0800088c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000890:	4b23      	ldr	r3, [pc, #140]	@ (8000920 <MX_USART2_UART_Init+0x94>)
 8000892:	4a24      	ldr	r2, [pc, #144]	@ (8000924 <MX_USART2_UART_Init+0x98>)
 8000894:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000896:	4b22      	ldr	r3, [pc, #136]	@ (8000920 <MX_USART2_UART_Init+0x94>)
 8000898:	22e1      	movs	r2, #225	@ 0xe1
 800089a:	0252      	lsls	r2, r2, #9
 800089c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800089e:	4b20      	ldr	r3, [pc, #128]	@ (8000920 <MX_USART2_UART_Init+0x94>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000920 <MX_USART2_UART_Init+0x94>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000920 <MX_USART2_UART_Init+0x94>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000920 <MX_USART2_UART_Init+0x94>)
 80008b2:	220c      	movs	r2, #12
 80008b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000920 <MX_USART2_UART_Init+0x94>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008bc:	4b18      	ldr	r3, [pc, #96]	@ (8000920 <MX_USART2_UART_Init+0x94>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c2:	4b17      	ldr	r3, [pc, #92]	@ (8000920 <MX_USART2_UART_Init+0x94>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008c8:	4b15      	ldr	r3, [pc, #84]	@ (8000920 <MX_USART2_UART_Init+0x94>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ce:	4b14      	ldr	r3, [pc, #80]	@ (8000920 <MX_USART2_UART_Init+0x94>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d4:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <MX_USART2_UART_Init+0x94>)
 80008d6:	0018      	movs	r0, r3
 80008d8:	f003 f8e6 	bl	8003aa8 <HAL_UART_Init>
 80008dc:	1e03      	subs	r3, r0, #0
 80008de:	d001      	beq.n	80008e4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008e0:	f000 f87c 	bl	80009dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <MX_USART2_UART_Init+0x94>)
 80008e6:	2100      	movs	r1, #0
 80008e8:	0018      	movs	r0, r3
 80008ea:	f003 fd45 	bl	8004378 <HAL_UARTEx_SetTxFifoThreshold>
 80008ee:	1e03      	subs	r3, r0, #0
 80008f0:	d001      	beq.n	80008f6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008f2:	f000 f873 	bl	80009dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000920 <MX_USART2_UART_Init+0x94>)
 80008f8:	2100      	movs	r1, #0
 80008fa:	0018      	movs	r0, r3
 80008fc:	f003 fd7c 	bl	80043f8 <HAL_UARTEx_SetRxFifoThreshold>
 8000900:	1e03      	subs	r3, r0, #0
 8000902:	d001      	beq.n	8000908 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000904:	f000 f86a 	bl	80009dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000908:	4b05      	ldr	r3, [pc, #20]	@ (8000920 <MX_USART2_UART_Init+0x94>)
 800090a:	0018      	movs	r0, r3
 800090c:	f003 fcfa 	bl	8004304 <HAL_UARTEx_DisableFifoMode>
 8000910:	1e03      	subs	r3, r0, #0
 8000912:	d001      	beq.n	8000918 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000914:	f000 f862 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000918:	46c0      	nop			@ (mov r8, r8)
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	46c0      	nop			@ (mov r8, r8)
 8000920:	20000174 	.word	0x20000174
 8000924:	40004400 	.word	0x40004400

08000928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b089      	sub	sp, #36	@ 0x24
 800092c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092e:	240c      	movs	r4, #12
 8000930:	193b      	adds	r3, r7, r4
 8000932:	0018      	movs	r0, r3
 8000934:	2314      	movs	r3, #20
 8000936:	001a      	movs	r2, r3
 8000938:	2100      	movs	r1, #0
 800093a:	f003 fe33 	bl	80045a4 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	4b25      	ldr	r3, [pc, #148]	@ (80009d4 <MX_GPIO_Init+0xac>)
 8000940:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000942:	4b24      	ldr	r3, [pc, #144]	@ (80009d4 <MX_GPIO_Init+0xac>)
 8000944:	2101      	movs	r1, #1
 8000946:	430a      	orrs	r2, r1
 8000948:	635a      	str	r2, [r3, #52]	@ 0x34
 800094a:	4b22      	ldr	r3, [pc, #136]	@ (80009d4 <MX_GPIO_Init+0xac>)
 800094c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800094e:	2201      	movs	r2, #1
 8000950:	4013      	ands	r3, r2
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000956:	4b1f      	ldr	r3, [pc, #124]	@ (80009d4 <MX_GPIO_Init+0xac>)
 8000958:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800095a:	4b1e      	ldr	r3, [pc, #120]	@ (80009d4 <MX_GPIO_Init+0xac>)
 800095c:	2104      	movs	r1, #4
 800095e:	430a      	orrs	r2, r1
 8000960:	635a      	str	r2, [r3, #52]	@ 0x34
 8000962:	4b1c      	ldr	r3, [pc, #112]	@ (80009d4 <MX_GPIO_Init+0xac>)
 8000964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000966:	2204      	movs	r2, #4
 8000968:	4013      	ands	r3, r2
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	4b19      	ldr	r3, [pc, #100]	@ (80009d4 <MX_GPIO_Init+0xac>)
 8000970:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000972:	4b18      	ldr	r3, [pc, #96]	@ (80009d4 <MX_GPIO_Init+0xac>)
 8000974:	2102      	movs	r1, #2
 8000976:	430a      	orrs	r2, r1
 8000978:	635a      	str	r2, [r3, #52]	@ 0x34
 800097a:	4b16      	ldr	r3, [pc, #88]	@ (80009d4 <MX_GPIO_Init+0xac>)
 800097c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800097e:	2202      	movs	r2, #2
 8000980:	4013      	ands	r3, r2
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : button_right_Pin */
  GPIO_InitStruct.Pin = button_right_Pin;
 8000986:	193b      	adds	r3, r7, r4
 8000988:	2280      	movs	r2, #128	@ 0x80
 800098a:	0092      	lsls	r2, r2, #2
 800098c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800098e:	193b      	adds	r3, r7, r4
 8000990:	2284      	movs	r2, #132	@ 0x84
 8000992:	0392      	lsls	r2, r2, #14
 8000994:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000996:	193b      	adds	r3, r7, r4
 8000998:	2201      	movs	r2, #1
 800099a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(button_right_GPIO_Port, &GPIO_InitStruct);
 800099c:	193a      	adds	r2, r7, r4
 800099e:	23a0      	movs	r3, #160	@ 0xa0
 80009a0:	05db      	lsls	r3, r3, #23
 80009a2:	0011      	movs	r1, r2
 80009a4:	0018      	movs	r0, r3
 80009a6:	f001 f98b 	bl	8001cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_left_Pin */
  GPIO_InitStruct.Pin = button_left_Pin;
 80009aa:	0021      	movs	r1, r4
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	2280      	movs	r2, #128	@ 0x80
 80009b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	2284      	movs	r2, #132	@ 0x84
 80009b6:	0392      	lsls	r2, r2, #14
 80009b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	2201      	movs	r2, #1
 80009be:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(button_left_GPIO_Port, &GPIO_InitStruct);
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	4a05      	ldr	r2, [pc, #20]	@ (80009d8 <MX_GPIO_Init+0xb0>)
 80009c4:	0019      	movs	r1, r3
 80009c6:	0010      	movs	r0, r2
 80009c8:	f001 f97a 	bl	8001cc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009cc:	46c0      	nop			@ (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b009      	add	sp, #36	@ 0x24
 80009d2:	bd90      	pop	{r4, r7, pc}
 80009d4:	40021000 	.word	0x40021000
 80009d8:	50000800 	.word	0x50000800

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	46c0      	nop			@ (mov r8, r8)
 80009e6:	e7fd      	b.n	80009e4 <Error_Handler+0x8>

080009e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <HAL_MspInit+0x44>)
 80009f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009f2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <HAL_MspInit+0x44>)
 80009f4:	2101      	movs	r1, #1
 80009f6:	430a      	orrs	r2, r1
 80009f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80009fa:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <HAL_MspInit+0x44>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fe:	2201      	movs	r2, #1
 8000a00:	4013      	ands	r3, r2
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <HAL_MspInit+0x44>)
 8000a08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a0a:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <HAL_MspInit+0x44>)
 8000a0c:	2180      	movs	r1, #128	@ 0x80
 8000a0e:	0549      	lsls	r1, r1, #21
 8000a10:	430a      	orrs	r2, r1
 8000a12:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a14:	4b05      	ldr	r3, [pc, #20]	@ (8000a2c <HAL_MspInit+0x44>)
 8000a16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a18:	2380      	movs	r3, #128	@ 0x80
 8000a1a:	055b      	lsls	r3, r3, #21
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a22:	46c0      	nop			@ (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b002      	add	sp, #8
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			@ (mov r8, r8)
 8000a2c:	40021000 	.word	0x40021000

08000a30 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b08b      	sub	sp, #44	@ 0x2c
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	2414      	movs	r4, #20
 8000a3a:	193b      	adds	r3, r7, r4
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	2314      	movs	r3, #20
 8000a40:	001a      	movs	r2, r3
 8000a42:	2100      	movs	r1, #0
 8000a44:	f003 fdae 	bl	80045a4 <memset>
  if(hadc->Instance==ADC1)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a18      	ldr	r2, [pc, #96]	@ (8000ab0 <HAL_ADC_MspInit+0x80>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d129      	bne.n	8000aa6 <HAL_ADC_MspInit+0x76>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a52:	4b18      	ldr	r3, [pc, #96]	@ (8000ab4 <HAL_ADC_MspInit+0x84>)
 8000a54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a56:	4b17      	ldr	r3, [pc, #92]	@ (8000ab4 <HAL_ADC_MspInit+0x84>)
 8000a58:	2180      	movs	r1, #128	@ 0x80
 8000a5a:	0349      	lsls	r1, r1, #13
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a60:	4b14      	ldr	r3, [pc, #80]	@ (8000ab4 <HAL_ADC_MspInit+0x84>)
 8000a62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a64:	2380      	movs	r3, #128	@ 0x80
 8000a66:	035b      	lsls	r3, r3, #13
 8000a68:	4013      	ands	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <HAL_ADC_MspInit+0x84>)
 8000a70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a72:	4b10      	ldr	r3, [pc, #64]	@ (8000ab4 <HAL_ADC_MspInit+0x84>)
 8000a74:	2101      	movs	r1, #1
 8000a76:	430a      	orrs	r2, r1
 8000a78:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab4 <HAL_ADC_MspInit+0x84>)
 8000a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a7e:	2201      	movs	r2, #1
 8000a80:	4013      	ands	r3, r2
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a86:	193b      	adds	r3, r7, r4
 8000a88:	2201      	movs	r2, #1
 8000a8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a8c:	193b      	adds	r3, r7, r4
 8000a8e:	2203      	movs	r2, #3
 8000a90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	193b      	adds	r3, r7, r4
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	193a      	adds	r2, r7, r4
 8000a9a:	23a0      	movs	r3, #160	@ 0xa0
 8000a9c:	05db      	lsls	r3, r3, #23
 8000a9e:	0011      	movs	r1, r2
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f001 f90d 	bl	8001cc0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000aa6:	46c0      	nop			@ (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b00b      	add	sp, #44	@ 0x2c
 8000aac:	bd90      	pop	{r4, r7, pc}
 8000aae:	46c0      	nop			@ (mov r8, r8)
 8000ab0:	40012400 	.word	0x40012400
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a13      	ldr	r2, [pc, #76]	@ (8000b14 <HAL_TIM_PWM_MspInit+0x5c>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d10e      	bne.n	8000ae8 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000aca:	4b13      	ldr	r3, [pc, #76]	@ (8000b18 <HAL_TIM_PWM_MspInit+0x60>)
 8000acc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ace:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <HAL_TIM_PWM_MspInit+0x60>)
 8000ad0:	2180      	movs	r1, #128	@ 0x80
 8000ad2:	0109      	lsls	r1, r1, #4
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <HAL_TIM_PWM_MspInit+0x60>)
 8000ada:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000adc:	2380      	movs	r3, #128	@ 0x80
 8000ade:	011b      	lsls	r3, r3, #4
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ae6:	e010      	b.n	8000b0a <HAL_TIM_PWM_MspInit+0x52>
  else if(htim_pwm->Instance==TIM3)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a0b      	ldr	r2, [pc, #44]	@ (8000b1c <HAL_TIM_PWM_MspInit+0x64>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d10b      	bne.n	8000b0a <HAL_TIM_PWM_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000af2:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <HAL_TIM_PWM_MspInit+0x60>)
 8000af4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000af6:	4b08      	ldr	r3, [pc, #32]	@ (8000b18 <HAL_TIM_PWM_MspInit+0x60>)
 8000af8:	2102      	movs	r1, #2
 8000afa:	430a      	orrs	r2, r1
 8000afc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000afe:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <HAL_TIM_PWM_MspInit+0x60>)
 8000b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b02:	2202      	movs	r2, #2
 8000b04:	4013      	ands	r3, r2
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
}
 8000b0a:	46c0      	nop			@ (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b004      	add	sp, #16
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	46c0      	nop			@ (mov r8, r8)
 8000b14:	40012c00 	.word	0x40012c00
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40000400 	.word	0x40000400

08000b20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b08b      	sub	sp, #44	@ 0x2c
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	2414      	movs	r4, #20
 8000b2a:	193b      	adds	r3, r7, r4
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	2314      	movs	r3, #20
 8000b30:	001a      	movs	r2, r3
 8000b32:	2100      	movs	r1, #0
 8000b34:	f003 fd36 	bl	80045a4 <memset>
  if(htim->Instance==TIM1)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a28      	ldr	r2, [pc, #160]	@ (8000be0 <HAL_TIM_MspPostInit+0xc0>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d122      	bne.n	8000b88 <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b42:	4b28      	ldr	r3, [pc, #160]	@ (8000be4 <HAL_TIM_MspPostInit+0xc4>)
 8000b44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b46:	4b27      	ldr	r3, [pc, #156]	@ (8000be4 <HAL_TIM_MspPostInit+0xc4>)
 8000b48:	2102      	movs	r1, #2
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b4e:	4b25      	ldr	r3, [pc, #148]	@ (8000be4 <HAL_TIM_MspPostInit+0xc4>)
 8000b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b52:	2202      	movs	r2, #2
 8000b54:	4013      	ands	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b5a:	0021      	movs	r1, r4
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	2208      	movs	r2, #8
 8000b60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	187b      	adds	r3, r7, r1
 8000b64:	2202      	movs	r2, #2
 8000b66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	187b      	adds	r3, r7, r1
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	187b      	adds	r3, r7, r1
 8000b70:	2200      	movs	r2, #0
 8000b72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b74:	187b      	adds	r3, r7, r1
 8000b76:	2201      	movs	r2, #1
 8000b78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7a:	187b      	adds	r3, r7, r1
 8000b7c:	4a1a      	ldr	r2, [pc, #104]	@ (8000be8 <HAL_TIM_MspPostInit+0xc8>)
 8000b7e:	0019      	movs	r1, r3
 8000b80:	0010      	movs	r0, r2
 8000b82:	f001 f89d 	bl	8001cc0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b86:	e026      	b.n	8000bd6 <HAL_TIM_MspPostInit+0xb6>
  else if(htim->Instance==TIM3)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a17      	ldr	r2, [pc, #92]	@ (8000bec <HAL_TIM_MspPostInit+0xcc>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d121      	bne.n	8000bd6 <HAL_TIM_MspPostInit+0xb6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	4b14      	ldr	r3, [pc, #80]	@ (8000be4 <HAL_TIM_MspPostInit+0xc4>)
 8000b94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b96:	4b13      	ldr	r3, [pc, #76]	@ (8000be4 <HAL_TIM_MspPostInit+0xc4>)
 8000b98:	2102      	movs	r1, #2
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b9e:	4b11      	ldr	r3, [pc, #68]	@ (8000be4 <HAL_TIM_MspPostInit+0xc4>)
 8000ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ba2:	2202      	movs	r2, #2
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000baa:	2114      	movs	r1, #20
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	2210      	movs	r2, #16
 8000bb0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	4a06      	ldr	r2, [pc, #24]	@ (8000be8 <HAL_TIM_MspPostInit+0xc8>)
 8000bce:	0019      	movs	r1, r3
 8000bd0:	0010      	movs	r0, r2
 8000bd2:	f001 f875 	bl	8001cc0 <HAL_GPIO_Init>
}
 8000bd6:	46c0      	nop			@ (mov r8, r8)
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	b00b      	add	sp, #44	@ 0x2c
 8000bdc:	bd90      	pop	{r4, r7, pc}
 8000bde:	46c0      	nop			@ (mov r8, r8)
 8000be0:	40012c00 	.word	0x40012c00
 8000be4:	40021000 	.word	0x40021000
 8000be8:	50000400 	.word	0x50000400
 8000bec:	40000400 	.word	0x40000400

08000bf0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf0:	b590      	push	{r4, r7, lr}
 8000bf2:	b091      	sub	sp, #68	@ 0x44
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	232c      	movs	r3, #44	@ 0x2c
 8000bfa:	18fb      	adds	r3, r7, r3
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	2314      	movs	r3, #20
 8000c00:	001a      	movs	r2, r3
 8000c02:	2100      	movs	r1, #0
 8000c04:	f003 fcce 	bl	80045a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c08:	2410      	movs	r4, #16
 8000c0a:	193b      	adds	r3, r7, r4
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	231c      	movs	r3, #28
 8000c10:	001a      	movs	r2, r3
 8000c12:	2100      	movs	r1, #0
 8000c14:	f003 fcc6 	bl	80045a4 <memset>
  if(huart->Instance==USART2)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a22      	ldr	r2, [pc, #136]	@ (8000ca8 <HAL_UART_MspInit+0xb8>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d13e      	bne.n	8000ca0 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c22:	193b      	adds	r3, r7, r4
 8000c24:	2202      	movs	r2, #2
 8000c26:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c28:	193b      	adds	r3, r7, r4
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c2e:	193b      	adds	r3, r7, r4
 8000c30:	0018      	movs	r0, r3
 8000c32:	f001 fecd 	bl	80029d0 <HAL_RCCEx_PeriphCLKConfig>
 8000c36:	1e03      	subs	r3, r0, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c3a:	f7ff fecf 	bl	80009dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cac <HAL_UART_MspInit+0xbc>)
 8000c40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c42:	4b1a      	ldr	r3, [pc, #104]	@ (8000cac <HAL_UART_MspInit+0xbc>)
 8000c44:	2180      	movs	r1, #128	@ 0x80
 8000c46:	0289      	lsls	r1, r1, #10
 8000c48:	430a      	orrs	r2, r1
 8000c4a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c4c:	4b17      	ldr	r3, [pc, #92]	@ (8000cac <HAL_UART_MspInit+0xbc>)
 8000c4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c50:	2380      	movs	r3, #128	@ 0x80
 8000c52:	029b      	lsls	r3, r3, #10
 8000c54:	4013      	ands	r3, r2
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	4b14      	ldr	r3, [pc, #80]	@ (8000cac <HAL_UART_MspInit+0xbc>)
 8000c5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c5e:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <HAL_UART_MspInit+0xbc>)
 8000c60:	2101      	movs	r1, #1
 8000c62:	430a      	orrs	r2, r1
 8000c64:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c66:	4b11      	ldr	r3, [pc, #68]	@ (8000cac <HAL_UART_MspInit+0xbc>)
 8000c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c72:	212c      	movs	r1, #44	@ 0x2c
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	220c      	movs	r2, #12
 8000c78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	187b      	adds	r3, r7, r1
 8000c7c:	2202      	movs	r2, #2
 8000c7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	187b      	adds	r3, r7, r1
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	187b      	adds	r3, r7, r1
 8000c88:	2200      	movs	r2, #0
 8000c8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c8c:	187b      	adds	r3, r7, r1
 8000c8e:	2201      	movs	r2, #1
 8000c90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	187a      	adds	r2, r7, r1
 8000c94:	23a0      	movs	r3, #160	@ 0xa0
 8000c96:	05db      	lsls	r3, r3, #23
 8000c98:	0011      	movs	r1, r2
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f001 f810 	bl	8001cc0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ca0:	46c0      	nop			@ (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b011      	add	sp, #68	@ 0x44
 8000ca6:	bd90      	pop	{r4, r7, pc}
 8000ca8:	40004400 	.word	0x40004400
 8000cac:	40021000 	.word	0x40021000

08000cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cb4:	46c0      	nop			@ (mov r8, r8)
 8000cb6:	e7fd      	b.n	8000cb4 <NMI_Handler+0x4>

08000cb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cbc:	46c0      	nop			@ (mov r8, r8)
 8000cbe:	e7fd      	b.n	8000cbc <HardFault_Handler+0x4>

08000cc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cc4:	46c0      	nop			@ (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cce:	46c0      	nop			@ (mov r8, r8)
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f8d4 	bl	8000e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	46c0      	nop			@ (mov r8, r8)
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cec:	4a14      	ldr	r2, [pc, #80]	@ (8000d40 <_sbrk+0x5c>)
 8000cee:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <_sbrk+0x60>)
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf8:	4b13      	ldr	r3, [pc, #76]	@ (8000d48 <_sbrk+0x64>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d102      	bne.n	8000d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d00:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <_sbrk+0x64>)
 8000d02:	4a12      	ldr	r2, [pc, #72]	@ (8000d4c <_sbrk+0x68>)
 8000d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d06:	4b10      	ldr	r3, [pc, #64]	@ (8000d48 <_sbrk+0x64>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	18d3      	adds	r3, r2, r3
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d207      	bcs.n	8000d24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d14:	f003 fc4e 	bl	80045b4 <__errno>
 8000d18:	0003      	movs	r3, r0
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	425b      	negs	r3, r3
 8000d22:	e009      	b.n	8000d38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d24:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <_sbrk+0x64>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d2a:	4b07      	ldr	r3, [pc, #28]	@ (8000d48 <_sbrk+0x64>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	18d2      	adds	r2, r2, r3
 8000d32:	4b05      	ldr	r3, [pc, #20]	@ (8000d48 <_sbrk+0x64>)
 8000d34:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d36:	68fb      	ldr	r3, [r7, #12]
}
 8000d38:	0018      	movs	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b006      	add	sp, #24
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20009000 	.word	0x20009000
 8000d44:	00000400 	.word	0x00000400
 8000d48:	20000208 	.word	0x20000208
 8000d4c:	20000358 	.word	0x20000358

08000d50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d54:	46c0      	nop			@ (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d5c:	480d      	ldr	r0, [pc, #52]	@ (8000d94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d5e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d60:	f7ff fff6 	bl	8000d50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d64:	480c      	ldr	r0, [pc, #48]	@ (8000d98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d66:	490d      	ldr	r1, [pc, #52]	@ (8000d9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d68:	4a0d      	ldr	r2, [pc, #52]	@ (8000da0 <LoopForever+0xe>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d6c:	e002      	b.n	8000d74 <LoopCopyDataInit>

08000d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d72:	3304      	adds	r3, #4

08000d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d78:	d3f9      	bcc.n	8000d6e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000da4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000da8 <LoopForever+0x16>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d80:	e001      	b.n	8000d86 <LoopFillZerobss>

08000d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d84:	3204      	adds	r2, #4

08000d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d88:	d3fb      	bcc.n	8000d82 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d8a:	f003 fc19 	bl	80045c0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d8e:	f7ff fb37 	bl	8000400 <main>

08000d92 <LoopForever>:

LoopForever:
  b LoopForever
 8000d92:	e7fe      	b.n	8000d92 <LoopForever>
  ldr   r0, =_estack
 8000d94:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d9c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000da0:	08004fd8 	.word	0x08004fd8
  ldr r2, =_sbss
 8000da4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000da8:	20000358 	.word	0x20000358

08000dac <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dac:	e7fe      	b.n	8000dac <ADC1_IRQHandler>
	...

08000db0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000db6:	1dfb      	adds	r3, r7, #7
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <HAL_Init+0x3c>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000dec <HAL_Init+0x3c>)
 8000dc2:	2180      	movs	r1, #128	@ 0x80
 8000dc4:	0049      	lsls	r1, r1, #1
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dca:	2003      	movs	r0, #3
 8000dcc:	f000 f810 	bl	8000df0 <HAL_InitTick>
 8000dd0:	1e03      	subs	r3, r0, #0
 8000dd2:	d003      	beq.n	8000ddc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000dd4:	1dfb      	adds	r3, r7, #7
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	701a      	strb	r2, [r3, #0]
 8000dda:	e001      	b.n	8000de0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ddc:	f7ff fe04 	bl	80009e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000de0:	1dfb      	adds	r3, r7, #7
 8000de2:	781b      	ldrb	r3, [r3, #0]
}
 8000de4:	0018      	movs	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	b002      	add	sp, #8
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40022000 	.word	0x40022000

08000df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df0:	b590      	push	{r4, r7, lr}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000df8:	230f      	movs	r3, #15
 8000dfa:	18fb      	adds	r3, r7, r3
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000e00:	4b1d      	ldr	r3, [pc, #116]	@ (8000e78 <HAL_InitTick+0x88>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d02b      	beq.n	8000e60 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000e08:	4b1c      	ldr	r3, [pc, #112]	@ (8000e7c <HAL_InitTick+0x8c>)
 8000e0a:	681c      	ldr	r4, [r3, #0]
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e78 <HAL_InitTick+0x88>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	0019      	movs	r1, r3
 8000e12:	23fa      	movs	r3, #250	@ 0xfa
 8000e14:	0098      	lsls	r0, r3, #2
 8000e16:	f7ff f97d 	bl	8000114 <__udivsi3>
 8000e1a:	0003      	movs	r3, r0
 8000e1c:	0019      	movs	r1, r3
 8000e1e:	0020      	movs	r0, r4
 8000e20:	f7ff f978 	bl	8000114 <__udivsi3>
 8000e24:	0003      	movs	r3, r0
 8000e26:	0018      	movs	r0, r3
 8000e28:	f000 ff3d 	bl	8001ca6 <HAL_SYSTICK_Config>
 8000e2c:	1e03      	subs	r3, r0, #0
 8000e2e:	d112      	bne.n	8000e56 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	d80a      	bhi.n	8000e4c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	2301      	movs	r3, #1
 8000e3a:	425b      	negs	r3, r3
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f000 ff1c 	bl	8001c7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e44:	4b0e      	ldr	r3, [pc, #56]	@ (8000e80 <HAL_InitTick+0x90>)
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	e00d      	b.n	8000e68 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000e4c:	230f      	movs	r3, #15
 8000e4e:	18fb      	adds	r3, r7, r3
 8000e50:	2201      	movs	r2, #1
 8000e52:	701a      	strb	r2, [r3, #0]
 8000e54:	e008      	b.n	8000e68 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e56:	230f      	movs	r3, #15
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	701a      	strb	r2, [r3, #0]
 8000e5e:	e003      	b.n	8000e68 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e60:	230f      	movs	r3, #15
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	2201      	movs	r2, #1
 8000e66:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e68:	230f      	movs	r3, #15
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	781b      	ldrb	r3, [r3, #0]
}
 8000e6e:	0018      	movs	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	b005      	add	sp, #20
 8000e74:	bd90      	pop	{r4, r7, pc}
 8000e76:	46c0      	nop			@ (mov r8, r8)
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	20000004 	.word	0x20000004

08000e84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e88:	4b05      	ldr	r3, [pc, #20]	@ (8000ea0 <HAL_IncTick+0x1c>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	001a      	movs	r2, r3
 8000e8e:	4b05      	ldr	r3, [pc, #20]	@ (8000ea4 <HAL_IncTick+0x20>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	18d2      	adds	r2, r2, r3
 8000e94:	4b03      	ldr	r3, [pc, #12]	@ (8000ea4 <HAL_IncTick+0x20>)
 8000e96:	601a      	str	r2, [r3, #0]
}
 8000e98:	46c0      	nop			@ (mov r8, r8)
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	2000020c 	.word	0x2000020c

08000ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000eac:	4b02      	ldr	r3, [pc, #8]	@ (8000eb8 <HAL_GetTick+0x10>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	46c0      	nop			@ (mov r8, r8)
 8000eb8:	2000020c 	.word	0x2000020c

08000ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec4:	f7ff fff0 	bl	8000ea8 <HAL_GetTick>
 8000ec8:	0003      	movs	r3, r0
 8000eca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	d005      	beq.n	8000ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f00 <HAL_Delay+0x44>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	001a      	movs	r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	189b      	adds	r3, r3, r2
 8000ee0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ee2:	46c0      	nop			@ (mov r8, r8)
 8000ee4:	f7ff ffe0 	bl	8000ea8 <HAL_GetTick>
 8000ee8:	0002      	movs	r2, r0
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d8f7      	bhi.n	8000ee4 <HAL_Delay+0x28>
  {
  }
}
 8000ef4:	46c0      	nop			@ (mov r8, r8)
 8000ef6:	46c0      	nop			@ (mov r8, r8)
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b004      	add	sp, #16
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	46c0      	nop			@ (mov r8, r8)
 8000f00:	20000008 	.word	0x20000008

08000f04 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a05      	ldr	r2, [pc, #20]	@ (8000f28 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000f14:	401a      	ands	r2, r3
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	431a      	orrs	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	601a      	str	r2, [r3, #0]
}
 8000f1e:	46c0      	nop			@ (mov r8, r8)
 8000f20:	46bd      	mov	sp, r7
 8000f22:	b002      	add	sp, #8
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	46c0      	nop			@ (mov r8, r8)
 8000f28:	fe3fffff 	.word	0xfe3fffff

08000f2c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	23e0      	movs	r3, #224	@ 0xe0
 8000f3a:	045b      	lsls	r3, r3, #17
 8000f3c:	4013      	ands	r3, r2
}
 8000f3e:	0018      	movs	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	b002      	add	sp, #8
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b084      	sub	sp, #16
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	60f8      	str	r0, [r7, #12]
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	2104      	movs	r1, #4
 8000f5a:	400a      	ands	r2, r1
 8000f5c:	2107      	movs	r1, #7
 8000f5e:	4091      	lsls	r1, r2
 8000f60:	000a      	movs	r2, r1
 8000f62:	43d2      	mvns	r2, r2
 8000f64:	401a      	ands	r2, r3
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	2104      	movs	r1, #4
 8000f6a:	400b      	ands	r3, r1
 8000f6c:	6879      	ldr	r1, [r7, #4]
 8000f6e:	4099      	lsls	r1, r3
 8000f70:	000b      	movs	r3, r1
 8000f72:	431a      	orrs	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000f78:	46c0      	nop			@ (mov r8, r8)
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	b004      	add	sp, #16
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	683a      	ldr	r2, [r7, #0]
 8000f90:	2104      	movs	r1, #4
 8000f92:	400a      	ands	r2, r1
 8000f94:	2107      	movs	r1, #7
 8000f96:	4091      	lsls	r1, r2
 8000f98:	000a      	movs	r2, r1
 8000f9a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	2104      	movs	r1, #4
 8000fa0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000fa2:	40da      	lsrs	r2, r3
 8000fa4:	0013      	movs	r3, r2
}
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b002      	add	sp, #8
 8000fac:	bd80      	pop	{r7, pc}

08000fae <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	68da      	ldr	r2, [r3, #12]
 8000fba:	23c0      	movs	r3, #192	@ 0xc0
 8000fbc:	011b      	lsls	r3, r3, #4
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	d101      	bne.n	8000fc6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e000      	b.n	8000fc8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	0018      	movs	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b002      	add	sp, #8
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fe0:	68ba      	ldr	r2, [r7, #8]
 8000fe2:	211f      	movs	r1, #31
 8000fe4:	400a      	ands	r2, r1
 8000fe6:	210f      	movs	r1, #15
 8000fe8:	4091      	lsls	r1, r2
 8000fea:	000a      	movs	r2, r1
 8000fec:	43d2      	mvns	r2, r2
 8000fee:	401a      	ands	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	0e9b      	lsrs	r3, r3, #26
 8000ff4:	210f      	movs	r1, #15
 8000ff6:	4019      	ands	r1, r3
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	201f      	movs	r0, #31
 8000ffc:	4003      	ands	r3, r0
 8000ffe:	4099      	lsls	r1, r3
 8001000:	000b      	movs	r3, r1
 8001002:	431a      	orrs	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001008:	46c0      	nop			@ (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	b004      	add	sp, #16
 800100e:	bd80      	pop	{r7, pc}

08001010 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	035b      	lsls	r3, r3, #13
 8001022:	0b5b      	lsrs	r3, r3, #13
 8001024:	431a      	orrs	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800102a:	46c0      	nop			@ (mov r8, r8)
 800102c:	46bd      	mov	sp, r7
 800102e:	b002      	add	sp, #8
 8001030:	bd80      	pop	{r7, pc}

08001032 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
 800103a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001040:	683a      	ldr	r2, [r7, #0]
 8001042:	0352      	lsls	r2, r2, #13
 8001044:	0b52      	lsrs	r2, r2, #13
 8001046:	43d2      	mvns	r2, r2
 8001048:	401a      	ands	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800104e:	46c0      	nop			@ (mov r8, r8)
 8001050:	46bd      	mov	sp, r7
 8001052:	b002      	add	sp, #8
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	695b      	ldr	r3, [r3, #20]
 8001068:	68ba      	ldr	r2, [r7, #8]
 800106a:	0212      	lsls	r2, r2, #8
 800106c:	43d2      	mvns	r2, r2
 800106e:	401a      	ands	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	6879      	ldr	r1, [r7, #4]
 8001076:	400b      	ands	r3, r1
 8001078:	4904      	ldr	r1, [pc, #16]	@ (800108c <LL_ADC_SetChannelSamplingTime+0x34>)
 800107a:	400b      	ands	r3, r1
 800107c:	431a      	orrs	r2, r3
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001082:	46c0      	nop			@ (mov r8, r8)
 8001084:	46bd      	mov	sp, r7
 8001086:	b004      	add	sp, #16
 8001088:	bd80      	pop	{r7, pc}
 800108a:	46c0      	nop			@ (mov r8, r8)
 800108c:	07ffff00 	.word	0x07ffff00

08001090 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	4a05      	ldr	r2, [pc, #20]	@ (80010b4 <LL_ADC_EnableInternalRegulator+0x24>)
 800109e:	4013      	ands	r3, r2
 80010a0:	2280      	movs	r2, #128	@ 0x80
 80010a2:	0552      	lsls	r2, r2, #21
 80010a4:	431a      	orrs	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80010aa:	46c0      	nop			@ (mov r8, r8)
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b002      	add	sp, #8
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	46c0      	nop			@ (mov r8, r8)
 80010b4:	6fffffe8 	.word	0x6fffffe8

080010b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	2380      	movs	r3, #128	@ 0x80
 80010c6:	055b      	lsls	r3, r3, #21
 80010c8:	401a      	ands	r2, r3
 80010ca:	2380      	movs	r3, #128	@ 0x80
 80010cc:	055b      	lsls	r3, r3, #21
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d101      	bne.n	80010d6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80010d2:	2301      	movs	r3, #1
 80010d4:	e000      	b.n	80010d8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	0018      	movs	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	b002      	add	sp, #8
 80010de:	bd80      	pop	{r7, pc}

080010e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	4a04      	ldr	r2, [pc, #16]	@ (8001100 <LL_ADC_Enable+0x20>)
 80010ee:	4013      	ands	r3, r2
 80010f0:	2201      	movs	r2, #1
 80010f2:	431a      	orrs	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80010f8:	46c0      	nop			@ (mov r8, r8)
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b002      	add	sp, #8
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	7fffffe8 	.word	0x7fffffe8

08001104 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	2201      	movs	r2, #1
 8001112:	4013      	ands	r3, r2
 8001114:	2b01      	cmp	r3, #1
 8001116:	d101      	bne.n	800111c <LL_ADC_IsEnabled+0x18>
 8001118:	2301      	movs	r3, #1
 800111a:	e000      	b.n	800111e <LL_ADC_IsEnabled+0x1a>
 800111c:	2300      	movs	r3, #0
}
 800111e:	0018      	movs	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	b002      	add	sp, #8
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	4a04      	ldr	r2, [pc, #16]	@ (8001148 <LL_ADC_REG_StartConversion+0x20>)
 8001136:	4013      	ands	r3, r2
 8001138:	2204      	movs	r2, #4
 800113a:	431a      	orrs	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001140:	46c0      	nop			@ (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	b002      	add	sp, #8
 8001146:	bd80      	pop	{r7, pc}
 8001148:	7fffffe8 	.word	0x7fffffe8

0800114c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	2204      	movs	r2, #4
 800115a:	4013      	ands	r3, r2
 800115c:	2b04      	cmp	r3, #4
 800115e:	d101      	bne.n	8001164 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001160:	2301      	movs	r3, #1
 8001162:	e000      	b.n	8001166 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001164:	2300      	movs	r3, #0
}
 8001166:	0018      	movs	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	b002      	add	sp, #8
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001178:	231f      	movs	r3, #31
 800117a:	18fb      	adds	r3, r7, r3
 800117c:	2200      	movs	r2, #0
 800117e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001180:	2300      	movs	r3, #0
 8001182:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e17f      	b.n	8001496 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800119a:	2b00      	cmp	r3, #0
 800119c:	d10a      	bne.n	80011b4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	0018      	movs	r0, r3
 80011a2:	f7ff fc45 	bl	8000a30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2254      	movs	r2, #84	@ 0x54
 80011b0:	2100      	movs	r1, #0
 80011b2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	0018      	movs	r0, r3
 80011ba:	f7ff ff7d 	bl	80010b8 <LL_ADC_IsInternalRegulatorEnabled>
 80011be:	1e03      	subs	r3, r0, #0
 80011c0:	d115      	bne.n	80011ee <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	0018      	movs	r0, r3
 80011c8:	f7ff ff62 	bl	8001090 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80011cc:	4bb4      	ldr	r3, [pc, #720]	@ (80014a0 <HAL_ADC_Init+0x330>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	49b4      	ldr	r1, [pc, #720]	@ (80014a4 <HAL_ADC_Init+0x334>)
 80011d2:	0018      	movs	r0, r3
 80011d4:	f7fe ff9e 	bl	8000114 <__udivsi3>
 80011d8:	0003      	movs	r3, r0
 80011da:	3301      	adds	r3, #1
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80011e0:	e002      	b.n	80011e8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	3b01      	subs	r3, #1
 80011e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f9      	bne.n	80011e2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	0018      	movs	r0, r3
 80011f4:	f7ff ff60 	bl	80010b8 <LL_ADC_IsInternalRegulatorEnabled>
 80011f8:	1e03      	subs	r3, r0, #0
 80011fa:	d10f      	bne.n	800121c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001200:	2210      	movs	r2, #16
 8001202:	431a      	orrs	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800120c:	2201      	movs	r2, #1
 800120e:	431a      	orrs	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001214:	231f      	movs	r3, #31
 8001216:	18fb      	adds	r3, r7, r3
 8001218:	2201      	movs	r2, #1
 800121a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	0018      	movs	r0, r3
 8001222:	f7ff ff93 	bl	800114c <LL_ADC_REG_IsConversionOngoing>
 8001226:	0003      	movs	r3, r0
 8001228:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800122e:	2210      	movs	r2, #16
 8001230:	4013      	ands	r3, r2
 8001232:	d000      	beq.n	8001236 <HAL_ADC_Init+0xc6>
 8001234:	e122      	b.n	800147c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d000      	beq.n	800123e <HAL_ADC_Init+0xce>
 800123c:	e11e      	b.n	800147c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001242:	4a99      	ldr	r2, [pc, #612]	@ (80014a8 <HAL_ADC_Init+0x338>)
 8001244:	4013      	ands	r3, r2
 8001246:	2202      	movs	r2, #2
 8001248:	431a      	orrs	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	0018      	movs	r0, r3
 8001254:	f7ff ff56 	bl	8001104 <LL_ADC_IsEnabled>
 8001258:	1e03      	subs	r3, r0, #0
 800125a:	d000      	beq.n	800125e <HAL_ADC_Init+0xee>
 800125c:	e0ad      	b.n	80013ba <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	7e1b      	ldrb	r3, [r3, #24]
 8001266:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001268:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	7e5b      	ldrb	r3, [r3, #25]
 800126e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001270:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	7e9b      	ldrb	r3, [r3, #26]
 8001276:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001278:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	2b00      	cmp	r3, #0
 8001280:	d002      	beq.n	8001288 <HAL_ADC_Init+0x118>
 8001282:	2380      	movs	r3, #128	@ 0x80
 8001284:	015b      	lsls	r3, r3, #5
 8001286:	e000      	b.n	800128a <HAL_ADC_Init+0x11a>
 8001288:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800128a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001290:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	2b00      	cmp	r3, #0
 8001298:	da04      	bge.n	80012a4 <HAL_ADC_Init+0x134>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	085b      	lsrs	r3, r3, #1
 80012a2:	e001      	b.n	80012a8 <HAL_ADC_Init+0x138>
 80012a4:	2380      	movs	r3, #128	@ 0x80
 80012a6:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80012a8:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	212c      	movs	r1, #44	@ 0x2c
 80012ae:	5c5b      	ldrb	r3, [r3, r1]
 80012b0:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80012b2:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2220      	movs	r2, #32
 80012be:	5c9b      	ldrb	r3, [r3, r2]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d115      	bne.n	80012f0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	7e9b      	ldrb	r3, [r3, #26]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d105      	bne.n	80012d8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	2280      	movs	r2, #128	@ 0x80
 80012d0:	0252      	lsls	r2, r2, #9
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
 80012d6:	e00b      	b.n	80012f0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012dc:	2220      	movs	r2, #32
 80012de:	431a      	orrs	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012e8:	2201      	movs	r2, #1
 80012ea:	431a      	orrs	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d00a      	beq.n	800130e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012fc:	23e0      	movs	r3, #224	@ 0xe0
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001306:	4313      	orrs	r3, r2
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	4a65      	ldr	r2, [pc, #404]	@ (80014ac <HAL_ADC_Init+0x33c>)
 8001316:	4013      	ands	r3, r2
 8001318:	0019      	movs	r1, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	430a      	orrs	r2, r1
 8001322:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	0f9b      	lsrs	r3, r3, #30
 800132a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001330:	4313      	orrs	r3, r2
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	4313      	orrs	r3, r2
 8001336:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	223c      	movs	r2, #60	@ 0x3c
 800133c:	5c9b      	ldrb	r3, [r3, r2]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d111      	bne.n	8001366 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	0f9b      	lsrs	r3, r3, #30
 8001348:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800134e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001354:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800135a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	4313      	orrs	r3, r2
 8001360:	2201      	movs	r2, #1
 8001362:	4313      	orrs	r3, r2
 8001364:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	4a50      	ldr	r2, [pc, #320]	@ (80014b0 <HAL_ADC_Init+0x340>)
 800136e:	4013      	ands	r3, r2
 8001370:	0019      	movs	r1, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	697a      	ldr	r2, [r7, #20]
 8001378:	430a      	orrs	r2, r1
 800137a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	23c0      	movs	r3, #192	@ 0xc0
 8001382:	061b      	lsls	r3, r3, #24
 8001384:	429a      	cmp	r2, r3
 8001386:	d018      	beq.n	80013ba <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800138c:	2380      	movs	r3, #128	@ 0x80
 800138e:	05db      	lsls	r3, r3, #23
 8001390:	429a      	cmp	r2, r3
 8001392:	d012      	beq.n	80013ba <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001398:	2380      	movs	r3, #128	@ 0x80
 800139a:	061b      	lsls	r3, r3, #24
 800139c:	429a      	cmp	r2, r3
 800139e:	d00c      	beq.n	80013ba <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80013a0:	4b44      	ldr	r3, [pc, #272]	@ (80014b4 <HAL_ADC_Init+0x344>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a44      	ldr	r2, [pc, #272]	@ (80014b8 <HAL_ADC_Init+0x348>)
 80013a6:	4013      	ands	r3, r2
 80013a8:	0019      	movs	r1, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	23f0      	movs	r3, #240	@ 0xf0
 80013b0:	039b      	lsls	r3, r3, #14
 80013b2:	401a      	ands	r2, r3
 80013b4:	4b3f      	ldr	r3, [pc, #252]	@ (80014b4 <HAL_ADC_Init+0x344>)
 80013b6:	430a      	orrs	r2, r1
 80013b8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6818      	ldr	r0, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013c2:	001a      	movs	r2, r3
 80013c4:	2100      	movs	r1, #0
 80013c6:	f7ff fdbe 	bl	8000f46 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6818      	ldr	r0, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013d2:	493a      	ldr	r1, [pc, #232]	@ (80014bc <HAL_ADC_Init+0x34c>)
 80013d4:	001a      	movs	r2, r3
 80013d6:	f7ff fdb6 	bl	8000f46 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d109      	bne.n	80013f6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2110      	movs	r1, #16
 80013ee:	4249      	negs	r1, r1
 80013f0:	430a      	orrs	r2, r1
 80013f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80013f4:	e018      	b.n	8001428 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	691a      	ldr	r2, [r3, #16]
 80013fa:	2380      	movs	r3, #128	@ 0x80
 80013fc:	039b      	lsls	r3, r3, #14
 80013fe:	429a      	cmp	r2, r3
 8001400:	d112      	bne.n	8001428 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69db      	ldr	r3, [r3, #28]
 800140c:	3b01      	subs	r3, #1
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	221c      	movs	r2, #28
 8001412:	4013      	ands	r3, r2
 8001414:	2210      	movs	r2, #16
 8001416:	4252      	negs	r2, r2
 8001418:	409a      	lsls	r2, r3
 800141a:	0011      	movs	r1, r2
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	430a      	orrs	r2, r1
 8001426:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2100      	movs	r1, #0
 800142e:	0018      	movs	r0, r3
 8001430:	f7ff fda6 	bl	8000f80 <LL_ADC_GetSamplingTimeCommonChannels>
 8001434:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800143a:	429a      	cmp	r2, r3
 800143c:	d10b      	bne.n	8001456 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001448:	2203      	movs	r2, #3
 800144a:	4393      	bics	r3, r2
 800144c:	2201      	movs	r2, #1
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001454:	e01c      	b.n	8001490 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800145a:	2212      	movs	r2, #18
 800145c:	4393      	bics	r3, r2
 800145e:	2210      	movs	r2, #16
 8001460:	431a      	orrs	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800146a:	2201      	movs	r2, #1
 800146c:	431a      	orrs	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001472:	231f      	movs	r3, #31
 8001474:	18fb      	adds	r3, r7, r3
 8001476:	2201      	movs	r2, #1
 8001478:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800147a:	e009      	b.n	8001490 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001480:	2210      	movs	r2, #16
 8001482:	431a      	orrs	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001488:	231f      	movs	r3, #31
 800148a:	18fb      	adds	r3, r7, r3
 800148c:	2201      	movs	r2, #1
 800148e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001490:	231f      	movs	r3, #31
 8001492:	18fb      	adds	r3, r7, r3
 8001494:	781b      	ldrb	r3, [r3, #0]
}
 8001496:	0018      	movs	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	b008      	add	sp, #32
 800149c:	bd80      	pop	{r7, pc}
 800149e:	46c0      	nop			@ (mov r8, r8)
 80014a0:	20000000 	.word	0x20000000
 80014a4:	00030d40 	.word	0x00030d40
 80014a8:	fffffefd 	.word	0xfffffefd
 80014ac:	ffde0201 	.word	0xffde0201
 80014b0:	1ffffc02 	.word	0x1ffffc02
 80014b4:	40012708 	.word	0x40012708
 80014b8:	ffc3ffff 	.word	0xffc3ffff
 80014bc:	07ffff04 	.word	0x07ffff04

080014c0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80014c0:	b5b0      	push	{r4, r5, r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	0018      	movs	r0, r3
 80014ce:	f7ff fe3d 	bl	800114c <LL_ADC_REG_IsConversionOngoing>
 80014d2:	1e03      	subs	r3, r0, #0
 80014d4:	d135      	bne.n	8001542 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2254      	movs	r2, #84	@ 0x54
 80014da:	5c9b      	ldrb	r3, [r3, r2]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d101      	bne.n	80014e4 <HAL_ADC_Start+0x24>
 80014e0:	2302      	movs	r3, #2
 80014e2:	e035      	b.n	8001550 <HAL_ADC_Start+0x90>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2254      	movs	r2, #84	@ 0x54
 80014e8:	2101      	movs	r1, #1
 80014ea:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80014ec:	250f      	movs	r5, #15
 80014ee:	197c      	adds	r4, r7, r5
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	0018      	movs	r0, r3
 80014f4:	f000 faaa 	bl	8001a4c <ADC_Enable>
 80014f8:	0003      	movs	r3, r0
 80014fa:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014fc:	197b      	adds	r3, r7, r5
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d119      	bne.n	8001538 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001508:	4a13      	ldr	r2, [pc, #76]	@ (8001558 <HAL_ADC_Start+0x98>)
 800150a:	4013      	ands	r3, r2
 800150c:	2280      	movs	r2, #128	@ 0x80
 800150e:	0052      	lsls	r2, r2, #1
 8001510:	431a      	orrs	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	221c      	movs	r2, #28
 8001522:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2254      	movs	r2, #84	@ 0x54
 8001528:	2100      	movs	r1, #0
 800152a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	0018      	movs	r0, r3
 8001532:	f7ff fdf9 	bl	8001128 <LL_ADC_REG_StartConversion>
 8001536:	e008      	b.n	800154a <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2254      	movs	r2, #84	@ 0x54
 800153c:	2100      	movs	r1, #0
 800153e:	5499      	strb	r1, [r3, r2]
 8001540:	e003      	b.n	800154a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001542:	230f      	movs	r3, #15
 8001544:	18fb      	adds	r3, r7, r3
 8001546:	2202      	movs	r2, #2
 8001548:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800154a:	230f      	movs	r3, #15
 800154c:	18fb      	adds	r3, r7, r3
 800154e:	781b      	ldrb	r3, [r3, #0]
}
 8001550:	0018      	movs	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	b004      	add	sp, #16
 8001556:	bdb0      	pop	{r4, r5, r7, pc}
 8001558:	fffff0fe 	.word	0xfffff0fe

0800155c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	2b08      	cmp	r3, #8
 800156c:	d102      	bne.n	8001574 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800156e:	2308      	movs	r3, #8
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	e00f      	b.n	8001594 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	2201      	movs	r2, #1
 800157c:	4013      	ands	r3, r2
 800157e:	d007      	beq.n	8001590 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001584:	2220      	movs	r2, #32
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e072      	b.n	8001676 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8001590:	2304      	movs	r3, #4
 8001592:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001594:	f7ff fc88 	bl	8000ea8 <HAL_GetTick>
 8001598:	0003      	movs	r3, r0
 800159a:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800159c:	e01f      	b.n	80015de <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	3301      	adds	r3, #1
 80015a2:	d01c      	beq.n	80015de <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80015a4:	f7ff fc80 	bl	8000ea8 <HAL_GetTick>
 80015a8:	0002      	movs	r2, r0
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d302      	bcc.n	80015ba <HAL_ADC_PollForConversion+0x5e>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d111      	bne.n	80015de <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68fa      	ldr	r2, [r7, #12]
 80015c2:	4013      	ands	r3, r2
 80015c4:	d10b      	bne.n	80015de <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ca:	2204      	movs	r2, #4
 80015cc:	431a      	orrs	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2254      	movs	r2, #84	@ 0x54
 80015d6:	2100      	movs	r1, #0
 80015d8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e04b      	b.n	8001676 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	4013      	ands	r3, r2
 80015e8:	d0d9      	beq.n	800159e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ee:	2280      	movs	r2, #128	@ 0x80
 80015f0:	0092      	lsls	r2, r2, #2
 80015f2:	431a      	orrs	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	0018      	movs	r0, r3
 80015fe:	f7ff fcd6 	bl	8000fae <LL_ADC_REG_IsTriggerSourceSWStart>
 8001602:	1e03      	subs	r3, r0, #0
 8001604:	d02e      	beq.n	8001664 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	7e9b      	ldrb	r3, [r3, #26]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d12a      	bne.n	8001664 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2208      	movs	r2, #8
 8001616:	4013      	ands	r3, r2
 8001618:	2b08      	cmp	r3, #8
 800161a:	d123      	bne.n	8001664 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	0018      	movs	r0, r3
 8001622:	f7ff fd93 	bl	800114c <LL_ADC_REG_IsConversionOngoing>
 8001626:	1e03      	subs	r3, r0, #0
 8001628:	d110      	bne.n	800164c <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	210c      	movs	r1, #12
 8001636:	438a      	bics	r2, r1
 8001638:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800163e:	4a10      	ldr	r2, [pc, #64]	@ (8001680 <HAL_ADC_PollForConversion+0x124>)
 8001640:	4013      	ands	r3, r2
 8001642:	2201      	movs	r2, #1
 8001644:	431a      	orrs	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	659a      	str	r2, [r3, #88]	@ 0x58
 800164a:	e00b      	b.n	8001664 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001650:	2220      	movs	r2, #32
 8001652:	431a      	orrs	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800165c:	2201      	movs	r2, #1
 800165e:	431a      	orrs	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	7e1b      	ldrb	r3, [r3, #24]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d103      	bne.n	8001674 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	220c      	movs	r2, #12
 8001672:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	0018      	movs	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	b004      	add	sp, #16
 800167c:	bd80      	pop	{r7, pc}
 800167e:	46c0      	nop			@ (mov r8, r8)
 8001680:	fffffefe 	.word	0xfffffefe

08001684 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001692:	0018      	movs	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	b002      	add	sp, #8
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016a6:	2317      	movs	r3, #23
 80016a8:	18fb      	adds	r3, r7, r3
 80016aa:	2200      	movs	r2, #0
 80016ac:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2254      	movs	r2, #84	@ 0x54
 80016b6:	5c9b      	ldrb	r3, [r3, r2]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d101      	bne.n	80016c0 <HAL_ADC_ConfigChannel+0x24>
 80016bc:	2302      	movs	r3, #2
 80016be:	e1c0      	b.n	8001a42 <HAL_ADC_ConfigChannel+0x3a6>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2254      	movs	r2, #84	@ 0x54
 80016c4:	2101      	movs	r1, #1
 80016c6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	0018      	movs	r0, r3
 80016ce:	f7ff fd3d 	bl	800114c <LL_ADC_REG_IsConversionOngoing>
 80016d2:	1e03      	subs	r3, r0, #0
 80016d4:	d000      	beq.n	80016d8 <HAL_ADC_ConfigChannel+0x3c>
 80016d6:	e1a3      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d100      	bne.n	80016e2 <HAL_ADC_ConfigChannel+0x46>
 80016e0:	e143      	b.n	800196a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691a      	ldr	r2, [r3, #16]
 80016e6:	2380      	movs	r3, #128	@ 0x80
 80016e8:	061b      	lsls	r3, r3, #24
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d004      	beq.n	80016f8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80016f2:	4ac1      	ldr	r2, [pc, #772]	@ (80019f8 <HAL_ADC_ConfigChannel+0x35c>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d108      	bne.n	800170a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	0019      	movs	r1, r3
 8001702:	0010      	movs	r0, r2
 8001704:	f7ff fc84 	bl	8001010 <LL_ADC_REG_SetSequencerChAdd>
 8001708:	e0c9      	b.n	800189e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	211f      	movs	r1, #31
 8001714:	400b      	ands	r3, r1
 8001716:	210f      	movs	r1, #15
 8001718:	4099      	lsls	r1, r3
 800171a:	000b      	movs	r3, r1
 800171c:	43db      	mvns	r3, r3
 800171e:	4013      	ands	r3, r2
 8001720:	0019      	movs	r1, r3
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	035b      	lsls	r3, r3, #13
 8001728:	0b5b      	lsrs	r3, r3, #13
 800172a:	d105      	bne.n	8001738 <HAL_ADC_ConfigChannel+0x9c>
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	0e9b      	lsrs	r3, r3, #26
 8001732:	221f      	movs	r2, #31
 8001734:	4013      	ands	r3, r2
 8001736:	e098      	b.n	800186a <HAL_ADC_ConfigChannel+0x1ce>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2201      	movs	r2, #1
 800173e:	4013      	ands	r3, r2
 8001740:	d000      	beq.n	8001744 <HAL_ADC_ConfigChannel+0xa8>
 8001742:	e091      	b.n	8001868 <HAL_ADC_ConfigChannel+0x1cc>
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2202      	movs	r2, #2
 800174a:	4013      	ands	r3, r2
 800174c:	d000      	beq.n	8001750 <HAL_ADC_ConfigChannel+0xb4>
 800174e:	e089      	b.n	8001864 <HAL_ADC_ConfigChannel+0x1c8>
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2204      	movs	r2, #4
 8001756:	4013      	ands	r3, r2
 8001758:	d000      	beq.n	800175c <HAL_ADC_ConfigChannel+0xc0>
 800175a:	e081      	b.n	8001860 <HAL_ADC_ConfigChannel+0x1c4>
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2208      	movs	r2, #8
 8001762:	4013      	ands	r3, r2
 8001764:	d000      	beq.n	8001768 <HAL_ADC_ConfigChannel+0xcc>
 8001766:	e079      	b.n	800185c <HAL_ADC_ConfigChannel+0x1c0>
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2210      	movs	r2, #16
 800176e:	4013      	ands	r3, r2
 8001770:	d000      	beq.n	8001774 <HAL_ADC_ConfigChannel+0xd8>
 8001772:	e071      	b.n	8001858 <HAL_ADC_ConfigChannel+0x1bc>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2220      	movs	r2, #32
 800177a:	4013      	ands	r3, r2
 800177c:	d000      	beq.n	8001780 <HAL_ADC_ConfigChannel+0xe4>
 800177e:	e069      	b.n	8001854 <HAL_ADC_ConfigChannel+0x1b8>
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2240      	movs	r2, #64	@ 0x40
 8001786:	4013      	ands	r3, r2
 8001788:	d000      	beq.n	800178c <HAL_ADC_ConfigChannel+0xf0>
 800178a:	e061      	b.n	8001850 <HAL_ADC_ConfigChannel+0x1b4>
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2280      	movs	r2, #128	@ 0x80
 8001792:	4013      	ands	r3, r2
 8001794:	d000      	beq.n	8001798 <HAL_ADC_ConfigChannel+0xfc>
 8001796:	e059      	b.n	800184c <HAL_ADC_ConfigChannel+0x1b0>
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	2380      	movs	r3, #128	@ 0x80
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	4013      	ands	r3, r2
 80017a2:	d151      	bne.n	8001848 <HAL_ADC_ConfigChannel+0x1ac>
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	2380      	movs	r3, #128	@ 0x80
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4013      	ands	r3, r2
 80017ae:	d149      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x1a8>
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	2380      	movs	r3, #128	@ 0x80
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	4013      	ands	r3, r2
 80017ba:	d141      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x1a4>
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	2380      	movs	r3, #128	@ 0x80
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	4013      	ands	r3, r2
 80017c6:	d139      	bne.n	800183c <HAL_ADC_ConfigChannel+0x1a0>
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	2380      	movs	r3, #128	@ 0x80
 80017ce:	015b      	lsls	r3, r3, #5
 80017d0:	4013      	ands	r3, r2
 80017d2:	d131      	bne.n	8001838 <HAL_ADC_ConfigChannel+0x19c>
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	2380      	movs	r3, #128	@ 0x80
 80017da:	019b      	lsls	r3, r3, #6
 80017dc:	4013      	ands	r3, r2
 80017de:	d129      	bne.n	8001834 <HAL_ADC_ConfigChannel+0x198>
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	2380      	movs	r3, #128	@ 0x80
 80017e6:	01db      	lsls	r3, r3, #7
 80017e8:	4013      	ands	r3, r2
 80017ea:	d121      	bne.n	8001830 <HAL_ADC_ConfigChannel+0x194>
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	2380      	movs	r3, #128	@ 0x80
 80017f2:	021b      	lsls	r3, r3, #8
 80017f4:	4013      	ands	r3, r2
 80017f6:	d119      	bne.n	800182c <HAL_ADC_ConfigChannel+0x190>
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	2380      	movs	r3, #128	@ 0x80
 80017fe:	025b      	lsls	r3, r3, #9
 8001800:	4013      	ands	r3, r2
 8001802:	d111      	bne.n	8001828 <HAL_ADC_ConfigChannel+0x18c>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	2380      	movs	r3, #128	@ 0x80
 800180a:	029b      	lsls	r3, r3, #10
 800180c:	4013      	ands	r3, r2
 800180e:	d109      	bne.n	8001824 <HAL_ADC_ConfigChannel+0x188>
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	2380      	movs	r3, #128	@ 0x80
 8001816:	02db      	lsls	r3, r3, #11
 8001818:	4013      	ands	r3, r2
 800181a:	d001      	beq.n	8001820 <HAL_ADC_ConfigChannel+0x184>
 800181c:	2312      	movs	r3, #18
 800181e:	e024      	b.n	800186a <HAL_ADC_ConfigChannel+0x1ce>
 8001820:	2300      	movs	r3, #0
 8001822:	e022      	b.n	800186a <HAL_ADC_ConfigChannel+0x1ce>
 8001824:	2311      	movs	r3, #17
 8001826:	e020      	b.n	800186a <HAL_ADC_ConfigChannel+0x1ce>
 8001828:	2310      	movs	r3, #16
 800182a:	e01e      	b.n	800186a <HAL_ADC_ConfigChannel+0x1ce>
 800182c:	230f      	movs	r3, #15
 800182e:	e01c      	b.n	800186a <HAL_ADC_ConfigChannel+0x1ce>
 8001830:	230e      	movs	r3, #14
 8001832:	e01a      	b.n	800186a <HAL_ADC_ConfigChannel+0x1ce>
 8001834:	230d      	movs	r3, #13
 8001836:	e018      	b.n	800186a <HAL_ADC_ConfigChannel+0x1ce>
 8001838:	230c      	movs	r3, #12
 800183a:	e016      	b.n	800186a <HAL_ADC_ConfigChannel+0x1ce>
 800183c:	230b      	movs	r3, #11
 800183e:	e014      	b.n	800186a <HAL_ADC_ConfigChannel+0x1ce>
 8001840:	230a      	movs	r3, #10
 8001842:	e012      	b.n	800186a <HAL_ADC_ConfigChannel+0x1ce>
 8001844:	2309      	movs	r3, #9
 8001846:	e010      	b.n	800186a <HAL_ADC_ConfigChannel+0x1ce>
 8001848:	2308      	movs	r3, #8
 800184a:	e00e      	b.n	800186a <HAL_ADC_ConfigChannel+0x1ce>
 800184c:	2307      	movs	r3, #7
 800184e:	e00c      	b.n	800186a <HAL_ADC_ConfigChannel+0x1ce>
 8001850:	2306      	movs	r3, #6
 8001852:	e00a      	b.n	800186a <HAL_ADC_ConfigChannel+0x1ce>
 8001854:	2305      	movs	r3, #5
 8001856:	e008      	b.n	800186a <HAL_ADC_ConfigChannel+0x1ce>
 8001858:	2304      	movs	r3, #4
 800185a:	e006      	b.n	800186a <HAL_ADC_ConfigChannel+0x1ce>
 800185c:	2303      	movs	r3, #3
 800185e:	e004      	b.n	800186a <HAL_ADC_ConfigChannel+0x1ce>
 8001860:	2302      	movs	r3, #2
 8001862:	e002      	b.n	800186a <HAL_ADC_ConfigChannel+0x1ce>
 8001864:	2301      	movs	r3, #1
 8001866:	e000      	b.n	800186a <HAL_ADC_ConfigChannel+0x1ce>
 8001868:	2300      	movs	r3, #0
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	6852      	ldr	r2, [r2, #4]
 800186e:	201f      	movs	r0, #31
 8001870:	4002      	ands	r2, r0
 8001872:	4093      	lsls	r3, r2
 8001874:	000a      	movs	r2, r1
 8001876:	431a      	orrs	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	089b      	lsrs	r3, r3, #2
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	429a      	cmp	r2, r3
 800188a:	d808      	bhi.n	800189e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6818      	ldr	r0, [r3, #0]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	6859      	ldr	r1, [r3, #4]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	001a      	movs	r2, r3
 800189a:	f7ff fb99 	bl	8000fd0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6818      	ldr	r0, [r3, #0]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	6819      	ldr	r1, [r3, #0]
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	001a      	movs	r2, r3
 80018ac:	f7ff fbd4 	bl	8001058 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	db00      	blt.n	80018ba <HAL_ADC_ConfigChannel+0x21e>
 80018b8:	e0bc      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018ba:	4b50      	ldr	r3, [pc, #320]	@ (80019fc <HAL_ADC_ConfigChannel+0x360>)
 80018bc:	0018      	movs	r0, r3
 80018be:	f7ff fb35 	bl	8000f2c <LL_ADC_GetCommonPathInternalCh>
 80018c2:	0003      	movs	r3, r0
 80018c4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a4d      	ldr	r2, [pc, #308]	@ (8001a00 <HAL_ADC_ConfigChannel+0x364>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d122      	bne.n	8001916 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	2380      	movs	r3, #128	@ 0x80
 80018d4:	041b      	lsls	r3, r3, #16
 80018d6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80018d8:	d11d      	bne.n	8001916 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	2280      	movs	r2, #128	@ 0x80
 80018de:	0412      	lsls	r2, r2, #16
 80018e0:	4313      	orrs	r3, r2
 80018e2:	4a46      	ldr	r2, [pc, #280]	@ (80019fc <HAL_ADC_ConfigChannel+0x360>)
 80018e4:	0019      	movs	r1, r3
 80018e6:	0010      	movs	r0, r2
 80018e8:	f7ff fb0c 	bl	8000f04 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018ec:	4b45      	ldr	r3, [pc, #276]	@ (8001a04 <HAL_ADC_ConfigChannel+0x368>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4945      	ldr	r1, [pc, #276]	@ (8001a08 <HAL_ADC_ConfigChannel+0x36c>)
 80018f2:	0018      	movs	r0, r3
 80018f4:	f7fe fc0e 	bl	8000114 <__udivsi3>
 80018f8:	0003      	movs	r3, r0
 80018fa:	1c5a      	adds	r2, r3, #1
 80018fc:	0013      	movs	r3, r2
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	189b      	adds	r3, r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001906:	e002      	b.n	800190e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	3b01      	subs	r3, #1
 800190c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1f9      	bne.n	8001908 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001914:	e08e      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a3c      	ldr	r2, [pc, #240]	@ (8001a0c <HAL_ADC_ConfigChannel+0x370>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d10e      	bne.n	800193e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	2380      	movs	r3, #128	@ 0x80
 8001924:	045b      	lsls	r3, r3, #17
 8001926:	4013      	ands	r3, r2
 8001928:	d109      	bne.n	800193e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	2280      	movs	r2, #128	@ 0x80
 800192e:	0452      	lsls	r2, r2, #17
 8001930:	4313      	orrs	r3, r2
 8001932:	4a32      	ldr	r2, [pc, #200]	@ (80019fc <HAL_ADC_ConfigChannel+0x360>)
 8001934:	0019      	movs	r1, r3
 8001936:	0010      	movs	r0, r2
 8001938:	f7ff fae4 	bl	8000f04 <LL_ADC_SetCommonPathInternalCh>
 800193c:	e07a      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a33      	ldr	r2, [pc, #204]	@ (8001a10 <HAL_ADC_ConfigChannel+0x374>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d000      	beq.n	800194a <HAL_ADC_ConfigChannel+0x2ae>
 8001948:	e074      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	2380      	movs	r3, #128	@ 0x80
 800194e:	03db      	lsls	r3, r3, #15
 8001950:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001952:	d000      	beq.n	8001956 <HAL_ADC_ConfigChannel+0x2ba>
 8001954:	e06e      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	2280      	movs	r2, #128	@ 0x80
 800195a:	03d2      	lsls	r2, r2, #15
 800195c:	4313      	orrs	r3, r2
 800195e:	4a27      	ldr	r2, [pc, #156]	@ (80019fc <HAL_ADC_ConfigChannel+0x360>)
 8001960:	0019      	movs	r1, r3
 8001962:	0010      	movs	r0, r2
 8001964:	f7ff face 	bl	8000f04 <LL_ADC_SetCommonPathInternalCh>
 8001968:	e064      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	691a      	ldr	r2, [r3, #16]
 800196e:	2380      	movs	r3, #128	@ 0x80
 8001970:	061b      	lsls	r3, r3, #24
 8001972:	429a      	cmp	r2, r3
 8001974:	d004      	beq.n	8001980 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800197a:	4a1f      	ldr	r2, [pc, #124]	@ (80019f8 <HAL_ADC_ConfigChannel+0x35c>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d107      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	0019      	movs	r1, r3
 800198a:	0010      	movs	r0, r2
 800198c:	f7ff fb51 	bl	8001032 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	da4d      	bge.n	8001a34 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001998:	4b18      	ldr	r3, [pc, #96]	@ (80019fc <HAL_ADC_ConfigChannel+0x360>)
 800199a:	0018      	movs	r0, r3
 800199c:	f7ff fac6 	bl	8000f2c <LL_ADC_GetCommonPathInternalCh>
 80019a0:	0003      	movs	r3, r0
 80019a2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a15      	ldr	r2, [pc, #84]	@ (8001a00 <HAL_ADC_ConfigChannel+0x364>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d108      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	4a18      	ldr	r2, [pc, #96]	@ (8001a14 <HAL_ADC_ConfigChannel+0x378>)
 80019b2:	4013      	ands	r3, r2
 80019b4:	4a11      	ldr	r2, [pc, #68]	@ (80019fc <HAL_ADC_ConfigChannel+0x360>)
 80019b6:	0019      	movs	r1, r3
 80019b8:	0010      	movs	r0, r2
 80019ba:	f7ff faa3 	bl	8000f04 <LL_ADC_SetCommonPathInternalCh>
 80019be:	e039      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a11      	ldr	r2, [pc, #68]	@ (8001a0c <HAL_ADC_ConfigChannel+0x370>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d108      	bne.n	80019dc <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	4a12      	ldr	r2, [pc, #72]	@ (8001a18 <HAL_ADC_ConfigChannel+0x37c>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	4a0a      	ldr	r2, [pc, #40]	@ (80019fc <HAL_ADC_ConfigChannel+0x360>)
 80019d2:	0019      	movs	r1, r3
 80019d4:	0010      	movs	r0, r2
 80019d6:	f7ff fa95 	bl	8000f04 <LL_ADC_SetCommonPathInternalCh>
 80019da:	e02b      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001a10 <HAL_ADC_ConfigChannel+0x374>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d126      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	4a0c      	ldr	r2, [pc, #48]	@ (8001a1c <HAL_ADC_ConfigChannel+0x380>)
 80019ea:	4013      	ands	r3, r2
 80019ec:	4a03      	ldr	r2, [pc, #12]	@ (80019fc <HAL_ADC_ConfigChannel+0x360>)
 80019ee:	0019      	movs	r1, r3
 80019f0:	0010      	movs	r0, r2
 80019f2:	f7ff fa87 	bl	8000f04 <LL_ADC_SetCommonPathInternalCh>
 80019f6:	e01d      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x398>
 80019f8:	80000004 	.word	0x80000004
 80019fc:	40012708 	.word	0x40012708
 8001a00:	b0001000 	.word	0xb0001000
 8001a04:	20000000 	.word	0x20000000
 8001a08:	00030d40 	.word	0x00030d40
 8001a0c:	b8004000 	.word	0xb8004000
 8001a10:	b4002000 	.word	0xb4002000
 8001a14:	ff7fffff 	.word	0xff7fffff
 8001a18:	feffffff 	.word	0xfeffffff
 8001a1c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a24:	2220      	movs	r2, #32
 8001a26:	431a      	orrs	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001a2c:	2317      	movs	r3, #23
 8001a2e:	18fb      	adds	r3, r7, r3
 8001a30:	2201      	movs	r2, #1
 8001a32:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2254      	movs	r2, #84	@ 0x54
 8001a38:	2100      	movs	r1, #0
 8001a3a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001a3c:	2317      	movs	r3, #23
 8001a3e:	18fb      	adds	r3, r7, r3
 8001a40:	781b      	ldrb	r3, [r3, #0]
}
 8001a42:	0018      	movs	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	b006      	add	sp, #24
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	46c0      	nop			@ (mov r8, r8)

08001a4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f7ff fb51 	bl	8001104 <LL_ADC_IsEnabled>
 8001a62:	1e03      	subs	r3, r0, #0
 8001a64:	d000      	beq.n	8001a68 <ADC_Enable+0x1c>
 8001a66:	e069      	b.n	8001b3c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	4a36      	ldr	r2, [pc, #216]	@ (8001b48 <ADC_Enable+0xfc>)
 8001a70:	4013      	ands	r3, r2
 8001a72:	d00d      	beq.n	8001a90 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a78:	2210      	movs	r2, #16
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a84:	2201      	movs	r2, #1
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e056      	b.n	8001b3e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	0018      	movs	r0, r3
 8001a96:	f7ff fb23 	bl	80010e0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001a9a:	4b2c      	ldr	r3, [pc, #176]	@ (8001b4c <ADC_Enable+0x100>)
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f7ff fa45 	bl	8000f2c <LL_ADC_GetCommonPathInternalCh>
 8001aa2:	0002      	movs	r2, r0
 8001aa4:	2380      	movs	r3, #128	@ 0x80
 8001aa6:	041b      	lsls	r3, r3, #16
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d00f      	beq.n	8001acc <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001aac:	4b28      	ldr	r3, [pc, #160]	@ (8001b50 <ADC_Enable+0x104>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4928      	ldr	r1, [pc, #160]	@ (8001b54 <ADC_Enable+0x108>)
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	f7fe fb2e 	bl	8000114 <__udivsi3>
 8001ab8:	0003      	movs	r3, r0
 8001aba:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001abc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001abe:	e002      	b.n	8001ac6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1f9      	bne.n	8001ac0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	7e5b      	ldrb	r3, [r3, #25]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d033      	beq.n	8001b3c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001ad4:	f7ff f9e8 	bl	8000ea8 <HAL_GetTick>
 8001ad8:	0003      	movs	r3, r0
 8001ada:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001adc:	e027      	b.n	8001b2e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f7ff fb0e 	bl	8001104 <LL_ADC_IsEnabled>
 8001ae8:	1e03      	subs	r3, r0, #0
 8001aea:	d104      	bne.n	8001af6 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	0018      	movs	r0, r3
 8001af2:	f7ff faf5 	bl	80010e0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001af6:	f7ff f9d7 	bl	8000ea8 <HAL_GetTick>
 8001afa:	0002      	movs	r2, r0
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d914      	bls.n	8001b2e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d00d      	beq.n	8001b2e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b16:	2210      	movs	r2, #16
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b22:	2201      	movs	r2, #1
 8001b24:	431a      	orrs	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e007      	b.n	8001b3e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2201      	movs	r2, #1
 8001b36:	4013      	ands	r3, r2
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d1d0      	bne.n	8001ade <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	0018      	movs	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	b004      	add	sp, #16
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	46c0      	nop			@ (mov r8, r8)
 8001b48:	80000017 	.word	0x80000017
 8001b4c:	40012708 	.word	0x40012708
 8001b50:	20000000 	.word	0x20000000
 8001b54:	00030d40 	.word	0x00030d40

08001b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b58:	b590      	push	{r4, r7, lr}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	0002      	movs	r2, r0
 8001b60:	6039      	str	r1, [r7, #0]
 8001b62:	1dfb      	adds	r3, r7, #7
 8001b64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b66:	1dfb      	adds	r3, r7, #7
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b6c:	d828      	bhi.n	8001bc0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b6e:	4a2f      	ldr	r2, [pc, #188]	@ (8001c2c <__NVIC_SetPriority+0xd4>)
 8001b70:	1dfb      	adds	r3, r7, #7
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	b25b      	sxtb	r3, r3
 8001b76:	089b      	lsrs	r3, r3, #2
 8001b78:	33c0      	adds	r3, #192	@ 0xc0
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	589b      	ldr	r3, [r3, r2]
 8001b7e:	1dfa      	adds	r2, r7, #7
 8001b80:	7812      	ldrb	r2, [r2, #0]
 8001b82:	0011      	movs	r1, r2
 8001b84:	2203      	movs	r2, #3
 8001b86:	400a      	ands	r2, r1
 8001b88:	00d2      	lsls	r2, r2, #3
 8001b8a:	21ff      	movs	r1, #255	@ 0xff
 8001b8c:	4091      	lsls	r1, r2
 8001b8e:	000a      	movs	r2, r1
 8001b90:	43d2      	mvns	r2, r2
 8001b92:	401a      	ands	r2, r3
 8001b94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	019b      	lsls	r3, r3, #6
 8001b9a:	22ff      	movs	r2, #255	@ 0xff
 8001b9c:	401a      	ands	r2, r3
 8001b9e:	1dfb      	adds	r3, r7, #7
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	4003      	ands	r3, r0
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bac:	481f      	ldr	r0, [pc, #124]	@ (8001c2c <__NVIC_SetPriority+0xd4>)
 8001bae:	1dfb      	adds	r3, r7, #7
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	b25b      	sxtb	r3, r3
 8001bb4:	089b      	lsrs	r3, r3, #2
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	33c0      	adds	r3, #192	@ 0xc0
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001bbe:	e031      	b.n	8001c24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bc0:	4a1b      	ldr	r2, [pc, #108]	@ (8001c30 <__NVIC_SetPriority+0xd8>)
 8001bc2:	1dfb      	adds	r3, r7, #7
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	0019      	movs	r1, r3
 8001bc8:	230f      	movs	r3, #15
 8001bca:	400b      	ands	r3, r1
 8001bcc:	3b08      	subs	r3, #8
 8001bce:	089b      	lsrs	r3, r3, #2
 8001bd0:	3306      	adds	r3, #6
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	18d3      	adds	r3, r2, r3
 8001bd6:	3304      	adds	r3, #4
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	1dfa      	adds	r2, r7, #7
 8001bdc:	7812      	ldrb	r2, [r2, #0]
 8001bde:	0011      	movs	r1, r2
 8001be0:	2203      	movs	r2, #3
 8001be2:	400a      	ands	r2, r1
 8001be4:	00d2      	lsls	r2, r2, #3
 8001be6:	21ff      	movs	r1, #255	@ 0xff
 8001be8:	4091      	lsls	r1, r2
 8001bea:	000a      	movs	r2, r1
 8001bec:	43d2      	mvns	r2, r2
 8001bee:	401a      	ands	r2, r3
 8001bf0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	019b      	lsls	r3, r3, #6
 8001bf6:	22ff      	movs	r2, #255	@ 0xff
 8001bf8:	401a      	ands	r2, r3
 8001bfa:	1dfb      	adds	r3, r7, #7
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	0018      	movs	r0, r3
 8001c00:	2303      	movs	r3, #3
 8001c02:	4003      	ands	r3, r0
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c08:	4809      	ldr	r0, [pc, #36]	@ (8001c30 <__NVIC_SetPriority+0xd8>)
 8001c0a:	1dfb      	adds	r3, r7, #7
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	001c      	movs	r4, r3
 8001c10:	230f      	movs	r3, #15
 8001c12:	4023      	ands	r3, r4
 8001c14:	3b08      	subs	r3, #8
 8001c16:	089b      	lsrs	r3, r3, #2
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	3306      	adds	r3, #6
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	18c3      	adds	r3, r0, r3
 8001c20:	3304      	adds	r3, #4
 8001c22:	601a      	str	r2, [r3, #0]
}
 8001c24:	46c0      	nop			@ (mov r8, r8)
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b003      	add	sp, #12
 8001c2a:	bd90      	pop	{r4, r7, pc}
 8001c2c:	e000e100 	.word	0xe000e100
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	1e5a      	subs	r2, r3, #1
 8001c40:	2380      	movs	r3, #128	@ 0x80
 8001c42:	045b      	lsls	r3, r3, #17
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d301      	bcc.n	8001c4c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e010      	b.n	8001c6e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c78 <SysTick_Config+0x44>)
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	3a01      	subs	r2, #1
 8001c52:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c54:	2301      	movs	r3, #1
 8001c56:	425b      	negs	r3, r3
 8001c58:	2103      	movs	r1, #3
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	f7ff ff7c 	bl	8001b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c60:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <SysTick_Config+0x44>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c66:	4b04      	ldr	r3, [pc, #16]	@ (8001c78 <SysTick_Config+0x44>)
 8001c68:	2207      	movs	r2, #7
 8001c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	0018      	movs	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	b002      	add	sp, #8
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	46c0      	nop			@ (mov r8, r8)
 8001c78:	e000e010 	.word	0xe000e010

08001c7c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	210f      	movs	r1, #15
 8001c88:	187b      	adds	r3, r7, r1
 8001c8a:	1c02      	adds	r2, r0, #0
 8001c8c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	187b      	adds	r3, r7, r1
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	b25b      	sxtb	r3, r3
 8001c96:	0011      	movs	r1, r2
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f7ff ff5d 	bl	8001b58 <__NVIC_SetPriority>
}
 8001c9e:	46c0      	nop			@ (mov r8, r8)
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	b004      	add	sp, #16
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f7ff ffbf 	bl	8001c34 <SysTick_Config>
 8001cb6:	0003      	movs	r3, r0
}
 8001cb8:	0018      	movs	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	b002      	add	sp, #8
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cce:	e147      	b.n	8001f60 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	4091      	lsls	r1, r2
 8001cda:	000a      	movs	r2, r1
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d100      	bne.n	8001ce8 <HAL_GPIO_Init+0x28>
 8001ce6:	e138      	b.n	8001f5a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2203      	movs	r2, #3
 8001cee:	4013      	ands	r3, r2
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d005      	beq.n	8001d00 <HAL_GPIO_Init+0x40>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d130      	bne.n	8001d62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	409a      	lsls	r2, r3
 8001d0e:	0013      	movs	r3, r2
 8001d10:	43da      	mvns	r2, r3
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4013      	ands	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	68da      	ldr	r2, [r3, #12]
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	409a      	lsls	r2, r3
 8001d22:	0013      	movs	r3, r2
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d36:	2201      	movs	r2, #1
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	409a      	lsls	r2, r3
 8001d3c:	0013      	movs	r3, r2
 8001d3e:	43da      	mvns	r2, r3
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	4013      	ands	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	091b      	lsrs	r3, r3, #4
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	401a      	ands	r2, r3
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	409a      	lsls	r2, r3
 8001d54:	0013      	movs	r3, r2
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2203      	movs	r2, #3
 8001d68:	4013      	ands	r3, r2
 8001d6a:	2b03      	cmp	r3, #3
 8001d6c:	d017      	beq.n	8001d9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	2203      	movs	r2, #3
 8001d7a:	409a      	lsls	r2, r3
 8001d7c:	0013      	movs	r3, r2
 8001d7e:	43da      	mvns	r2, r3
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4013      	ands	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	0013      	movs	r3, r2
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2203      	movs	r2, #3
 8001da4:	4013      	ands	r3, r2
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d123      	bne.n	8001df2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	08da      	lsrs	r2, r3, #3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	3208      	adds	r2, #8
 8001db2:	0092      	lsls	r2, r2, #2
 8001db4:	58d3      	ldr	r3, [r2, r3]
 8001db6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	2207      	movs	r2, #7
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	220f      	movs	r2, #15
 8001dc2:	409a      	lsls	r2, r3
 8001dc4:	0013      	movs	r3, r2
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	691a      	ldr	r2, [r3, #16]
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	2107      	movs	r1, #7
 8001dd6:	400b      	ands	r3, r1
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	409a      	lsls	r2, r3
 8001ddc:	0013      	movs	r3, r2
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	08da      	lsrs	r2, r3, #3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3208      	adds	r2, #8
 8001dec:	0092      	lsls	r2, r2, #2
 8001dee:	6939      	ldr	r1, [r7, #16]
 8001df0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	2203      	movs	r2, #3
 8001dfe:	409a      	lsls	r2, r3
 8001e00:	0013      	movs	r3, r2
 8001e02:	43da      	mvns	r2, r3
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	4013      	ands	r3, r2
 8001e08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2203      	movs	r2, #3
 8001e10:	401a      	ands	r2, r3
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	409a      	lsls	r2, r3
 8001e18:	0013      	movs	r3, r2
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	23c0      	movs	r3, #192	@ 0xc0
 8001e2c:	029b      	lsls	r3, r3, #10
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d100      	bne.n	8001e34 <HAL_GPIO_Init+0x174>
 8001e32:	e092      	b.n	8001f5a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001e34:	4a50      	ldr	r2, [pc, #320]	@ (8001f78 <HAL_GPIO_Init+0x2b8>)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	089b      	lsrs	r3, r3, #2
 8001e3a:	3318      	adds	r3, #24
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	589b      	ldr	r3, [r3, r2]
 8001e40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	2203      	movs	r2, #3
 8001e46:	4013      	ands	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	220f      	movs	r2, #15
 8001e4c:	409a      	lsls	r2, r3
 8001e4e:	0013      	movs	r3, r2
 8001e50:	43da      	mvns	r2, r3
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4013      	ands	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	23a0      	movs	r3, #160	@ 0xa0
 8001e5c:	05db      	lsls	r3, r3, #23
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d013      	beq.n	8001e8a <HAL_GPIO_Init+0x1ca>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a45      	ldr	r2, [pc, #276]	@ (8001f7c <HAL_GPIO_Init+0x2bc>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00d      	beq.n	8001e86 <HAL_GPIO_Init+0x1c6>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a44      	ldr	r2, [pc, #272]	@ (8001f80 <HAL_GPIO_Init+0x2c0>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d007      	beq.n	8001e82 <HAL_GPIO_Init+0x1c2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a43      	ldr	r2, [pc, #268]	@ (8001f84 <HAL_GPIO_Init+0x2c4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d101      	bne.n	8001e7e <HAL_GPIO_Init+0x1be>
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e006      	b.n	8001e8c <HAL_GPIO_Init+0x1cc>
 8001e7e:	2305      	movs	r3, #5
 8001e80:	e004      	b.n	8001e8c <HAL_GPIO_Init+0x1cc>
 8001e82:	2302      	movs	r3, #2
 8001e84:	e002      	b.n	8001e8c <HAL_GPIO_Init+0x1cc>
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <HAL_GPIO_Init+0x1cc>
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	2103      	movs	r1, #3
 8001e90:	400a      	ands	r2, r1
 8001e92:	00d2      	lsls	r2, r2, #3
 8001e94:	4093      	lsls	r3, r2
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001e9c:	4936      	ldr	r1, [pc, #216]	@ (8001f78 <HAL_GPIO_Init+0x2b8>)
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	089b      	lsrs	r3, r3, #2
 8001ea2:	3318      	adds	r3, #24
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001eaa:	4b33      	ldr	r3, [pc, #204]	@ (8001f78 <HAL_GPIO_Init+0x2b8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	43da      	mvns	r2, r3
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	2380      	movs	r3, #128	@ 0x80
 8001ec0:	035b      	lsls	r3, r3, #13
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ece:	4b2a      	ldr	r3, [pc, #168]	@ (8001f78 <HAL_GPIO_Init+0x2b8>)
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001ed4:	4b28      	ldr	r3, [pc, #160]	@ (8001f78 <HAL_GPIO_Init+0x2b8>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	43da      	mvns	r2, r3
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	2380      	movs	r3, #128	@ 0x80
 8001eea:	039b      	lsls	r3, r3, #14
 8001eec:	4013      	ands	r3, r2
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ef8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f78 <HAL_GPIO_Init+0x2b8>)
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001efe:	4a1e      	ldr	r2, [pc, #120]	@ (8001f78 <HAL_GPIO_Init+0x2b8>)
 8001f00:	2384      	movs	r3, #132	@ 0x84
 8001f02:	58d3      	ldr	r3, [r2, r3]
 8001f04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	43da      	mvns	r2, r3
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	2380      	movs	r3, #128	@ 0x80
 8001f16:	029b      	lsls	r3, r3, #10
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d003      	beq.n	8001f24 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f24:	4914      	ldr	r1, [pc, #80]	@ (8001f78 <HAL_GPIO_Init+0x2b8>)
 8001f26:	2284      	movs	r2, #132	@ 0x84
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001f2c:	4a12      	ldr	r2, [pc, #72]	@ (8001f78 <HAL_GPIO_Init+0x2b8>)
 8001f2e:	2380      	movs	r3, #128	@ 0x80
 8001f30:	58d3      	ldr	r3, [r2, r3]
 8001f32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	43da      	mvns	r2, r3
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	2380      	movs	r3, #128	@ 0x80
 8001f44:	025b      	lsls	r3, r3, #9
 8001f46:	4013      	ands	r3, r2
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f52:	4909      	ldr	r1, [pc, #36]	@ (8001f78 <HAL_GPIO_Init+0x2b8>)
 8001f54:	2280      	movs	r2, #128	@ 0x80
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	40da      	lsrs	r2, r3
 8001f68:	1e13      	subs	r3, r2, #0
 8001f6a:	d000      	beq.n	8001f6e <HAL_GPIO_Init+0x2ae>
 8001f6c:	e6b0      	b.n	8001cd0 <HAL_GPIO_Init+0x10>
  }
}
 8001f6e:	46c0      	nop			@ (mov r8, r8)
 8001f70:	46c0      	nop			@ (mov r8, r8)
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b006      	add	sp, #24
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021800 	.word	0x40021800
 8001f7c:	50000400 	.word	0x50000400
 8001f80:	50000800 	.word	0x50000800
 8001f84:	50000c00 	.word	0x50000c00

08001f88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	000a      	movs	r2, r1
 8001f92:	1cbb      	adds	r3, r7, #2
 8001f94:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	1cba      	adds	r2, r7, #2
 8001f9c:	8812      	ldrh	r2, [r2, #0]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d004      	beq.n	8001fac <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001fa2:	230f      	movs	r3, #15
 8001fa4:	18fb      	adds	r3, r7, r3
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	701a      	strb	r2, [r3, #0]
 8001faa:	e003      	b.n	8001fb4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fac:	230f      	movs	r3, #15
 8001fae:	18fb      	adds	r3, r7, r3
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001fb4:	230f      	movs	r3, #15
 8001fb6:	18fb      	adds	r3, r7, r3
 8001fb8:	781b      	ldrb	r3, [r3, #0]
}
 8001fba:	0018      	movs	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	b004      	add	sp, #16
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001fcc:	4b19      	ldr	r3, [pc, #100]	@ (8002034 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a19      	ldr	r2, [pc, #100]	@ (8002038 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	0019      	movs	r1, r3
 8001fd6:	4b17      	ldr	r3, [pc, #92]	@ (8002034 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	2380      	movs	r3, #128	@ 0x80
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d11f      	bne.n	8002028 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001fe8:	4b14      	ldr	r3, [pc, #80]	@ (800203c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	0013      	movs	r3, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	189b      	adds	r3, r3, r2
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4912      	ldr	r1, [pc, #72]	@ (8002040 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f7fe f88c 	bl	8000114 <__udivsi3>
 8001ffc:	0003      	movs	r3, r0
 8001ffe:	3301      	adds	r3, #1
 8002000:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002002:	e008      	b.n	8002016 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	3b01      	subs	r3, #1
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	e001      	b.n	8002016 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e009      	b.n	800202a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002016:	4b07      	ldr	r3, [pc, #28]	@ (8002034 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002018:	695a      	ldr	r2, [r3, #20]
 800201a:	2380      	movs	r3, #128	@ 0x80
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	401a      	ands	r2, r3
 8002020:	2380      	movs	r3, #128	@ 0x80
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	429a      	cmp	r2, r3
 8002026:	d0ed      	beq.n	8002004 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	0018      	movs	r0, r3
 800202c:	46bd      	mov	sp, r7
 800202e:	b004      	add	sp, #16
 8002030:	bd80      	pop	{r7, pc}
 8002032:	46c0      	nop			@ (mov r8, r8)
 8002034:	40007000 	.word	0x40007000
 8002038:	fffff9ff 	.word	0xfffff9ff
 800203c:	20000000 	.word	0x20000000
 8002040:	000f4240 	.word	0x000f4240

08002044 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002048:	4b03      	ldr	r3, [pc, #12]	@ (8002058 <LL_RCC_GetAPB1Prescaler+0x14>)
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	23e0      	movs	r3, #224	@ 0xe0
 800204e:	01db      	lsls	r3, r3, #7
 8002050:	4013      	ands	r3, r2
}
 8002052:	0018      	movs	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40021000 	.word	0x40021000

0800205c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b088      	sub	sp, #32
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e2f3      	b.n	8002656 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2201      	movs	r2, #1
 8002074:	4013      	ands	r3, r2
 8002076:	d100      	bne.n	800207a <HAL_RCC_OscConfig+0x1e>
 8002078:	e07c      	b.n	8002174 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800207a:	4bc3      	ldr	r3, [pc, #780]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2238      	movs	r2, #56	@ 0x38
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002084:	4bc0      	ldr	r3, [pc, #768]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	2203      	movs	r2, #3
 800208a:	4013      	ands	r3, r2
 800208c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	2b10      	cmp	r3, #16
 8002092:	d102      	bne.n	800209a <HAL_RCC_OscConfig+0x3e>
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	2b03      	cmp	r3, #3
 8002098:	d002      	beq.n	80020a0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	2b08      	cmp	r3, #8
 800209e:	d10b      	bne.n	80020b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a0:	4bb9      	ldr	r3, [pc, #740]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	2380      	movs	r3, #128	@ 0x80
 80020a6:	029b      	lsls	r3, r3, #10
 80020a8:	4013      	ands	r3, r2
 80020aa:	d062      	beq.n	8002172 <HAL_RCC_OscConfig+0x116>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d15e      	bne.n	8002172 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e2ce      	b.n	8002656 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	2380      	movs	r3, #128	@ 0x80
 80020be:	025b      	lsls	r3, r3, #9
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d107      	bne.n	80020d4 <HAL_RCC_OscConfig+0x78>
 80020c4:	4bb0      	ldr	r3, [pc, #704]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4baf      	ldr	r3, [pc, #700]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 80020ca:	2180      	movs	r1, #128	@ 0x80
 80020cc:	0249      	lsls	r1, r1, #9
 80020ce:	430a      	orrs	r2, r1
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	e020      	b.n	8002116 <HAL_RCC_OscConfig+0xba>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	23a0      	movs	r3, #160	@ 0xa0
 80020da:	02db      	lsls	r3, r3, #11
 80020dc:	429a      	cmp	r2, r3
 80020de:	d10e      	bne.n	80020fe <HAL_RCC_OscConfig+0xa2>
 80020e0:	4ba9      	ldr	r3, [pc, #676]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4ba8      	ldr	r3, [pc, #672]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 80020e6:	2180      	movs	r1, #128	@ 0x80
 80020e8:	02c9      	lsls	r1, r1, #11
 80020ea:	430a      	orrs	r2, r1
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	4ba6      	ldr	r3, [pc, #664]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	4ba5      	ldr	r3, [pc, #660]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 80020f4:	2180      	movs	r1, #128	@ 0x80
 80020f6:	0249      	lsls	r1, r1, #9
 80020f8:	430a      	orrs	r2, r1
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	e00b      	b.n	8002116 <HAL_RCC_OscConfig+0xba>
 80020fe:	4ba2      	ldr	r3, [pc, #648]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	4ba1      	ldr	r3, [pc, #644]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 8002104:	49a1      	ldr	r1, [pc, #644]	@ (800238c <HAL_RCC_OscConfig+0x330>)
 8002106:	400a      	ands	r2, r1
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	4b9f      	ldr	r3, [pc, #636]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	4b9e      	ldr	r3, [pc, #632]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 8002110:	499f      	ldr	r1, [pc, #636]	@ (8002390 <HAL_RCC_OscConfig+0x334>)
 8002112:	400a      	ands	r2, r1
 8002114:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d014      	beq.n	8002148 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211e:	f7fe fec3 	bl	8000ea8 <HAL_GetTick>
 8002122:	0003      	movs	r3, r0
 8002124:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002128:	f7fe febe 	bl	8000ea8 <HAL_GetTick>
 800212c:	0002      	movs	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b64      	cmp	r3, #100	@ 0x64
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e28d      	b.n	8002656 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800213a:	4b93      	ldr	r3, [pc, #588]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	2380      	movs	r3, #128	@ 0x80
 8002140:	029b      	lsls	r3, r3, #10
 8002142:	4013      	ands	r3, r2
 8002144:	d0f0      	beq.n	8002128 <HAL_RCC_OscConfig+0xcc>
 8002146:	e015      	b.n	8002174 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002148:	f7fe feae 	bl	8000ea8 <HAL_GetTick>
 800214c:	0003      	movs	r3, r0
 800214e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002152:	f7fe fea9 	bl	8000ea8 <HAL_GetTick>
 8002156:	0002      	movs	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b64      	cmp	r3, #100	@ 0x64
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e278      	b.n	8002656 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002164:	4b88      	ldr	r3, [pc, #544]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	2380      	movs	r3, #128	@ 0x80
 800216a:	029b      	lsls	r3, r3, #10
 800216c:	4013      	ands	r3, r2
 800216e:	d1f0      	bne.n	8002152 <HAL_RCC_OscConfig+0xf6>
 8002170:	e000      	b.n	8002174 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002172:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2202      	movs	r2, #2
 800217a:	4013      	ands	r3, r2
 800217c:	d100      	bne.n	8002180 <HAL_RCC_OscConfig+0x124>
 800217e:	e099      	b.n	80022b4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002180:	4b81      	ldr	r3, [pc, #516]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	2238      	movs	r2, #56	@ 0x38
 8002186:	4013      	ands	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800218a:	4b7f      	ldr	r3, [pc, #508]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	2203      	movs	r2, #3
 8002190:	4013      	ands	r3, r2
 8002192:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	2b10      	cmp	r3, #16
 8002198:	d102      	bne.n	80021a0 <HAL_RCC_OscConfig+0x144>
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	2b02      	cmp	r3, #2
 800219e:	d002      	beq.n	80021a6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d135      	bne.n	8002212 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021a6:	4b78      	ldr	r3, [pc, #480]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	2380      	movs	r3, #128	@ 0x80
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	4013      	ands	r3, r2
 80021b0:	d005      	beq.n	80021be <HAL_RCC_OscConfig+0x162>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e24b      	b.n	8002656 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021be:	4b72      	ldr	r3, [pc, #456]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	4a74      	ldr	r2, [pc, #464]	@ (8002394 <HAL_RCC_OscConfig+0x338>)
 80021c4:	4013      	ands	r3, r2
 80021c6:	0019      	movs	r1, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	021a      	lsls	r2, r3, #8
 80021ce:	4b6e      	ldr	r3, [pc, #440]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 80021d0:	430a      	orrs	r2, r1
 80021d2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d112      	bne.n	8002200 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80021da:	4b6b      	ldr	r3, [pc, #428]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a6e      	ldr	r2, [pc, #440]	@ (8002398 <HAL_RCC_OscConfig+0x33c>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	0019      	movs	r1, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	4b67      	ldr	r3, [pc, #412]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 80021ea:	430a      	orrs	r2, r1
 80021ec:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80021ee:	4b66      	ldr	r3, [pc, #408]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	0adb      	lsrs	r3, r3, #11
 80021f4:	2207      	movs	r2, #7
 80021f6:	4013      	ands	r3, r2
 80021f8:	4a68      	ldr	r2, [pc, #416]	@ (800239c <HAL_RCC_OscConfig+0x340>)
 80021fa:	40da      	lsrs	r2, r3
 80021fc:	4b68      	ldr	r3, [pc, #416]	@ (80023a0 <HAL_RCC_OscConfig+0x344>)
 80021fe:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002200:	4b68      	ldr	r3, [pc, #416]	@ (80023a4 <HAL_RCC_OscConfig+0x348>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	0018      	movs	r0, r3
 8002206:	f7fe fdf3 	bl	8000df0 <HAL_InitTick>
 800220a:	1e03      	subs	r3, r0, #0
 800220c:	d051      	beq.n	80022b2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e221      	b.n	8002656 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d030      	beq.n	800227c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800221a:	4b5b      	ldr	r3, [pc, #364]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a5e      	ldr	r2, [pc, #376]	@ (8002398 <HAL_RCC_OscConfig+0x33c>)
 8002220:	4013      	ands	r3, r2
 8002222:	0019      	movs	r1, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	4b57      	ldr	r3, [pc, #348]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 800222a:	430a      	orrs	r2, r1
 800222c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800222e:	4b56      	ldr	r3, [pc, #344]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	4b55      	ldr	r3, [pc, #340]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 8002234:	2180      	movs	r1, #128	@ 0x80
 8002236:	0049      	lsls	r1, r1, #1
 8002238:	430a      	orrs	r2, r1
 800223a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223c:	f7fe fe34 	bl	8000ea8 <HAL_GetTick>
 8002240:	0003      	movs	r3, r0
 8002242:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002246:	f7fe fe2f 	bl	8000ea8 <HAL_GetTick>
 800224a:	0002      	movs	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e1fe      	b.n	8002656 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002258:	4b4b      	ldr	r3, [pc, #300]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	2380      	movs	r3, #128	@ 0x80
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	4013      	ands	r3, r2
 8002262:	d0f0      	beq.n	8002246 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002264:	4b48      	ldr	r3, [pc, #288]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	4a4a      	ldr	r2, [pc, #296]	@ (8002394 <HAL_RCC_OscConfig+0x338>)
 800226a:	4013      	ands	r3, r2
 800226c:	0019      	movs	r1, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	021a      	lsls	r2, r3, #8
 8002274:	4b44      	ldr	r3, [pc, #272]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 8002276:	430a      	orrs	r2, r1
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	e01b      	b.n	80022b4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800227c:	4b42      	ldr	r3, [pc, #264]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	4b41      	ldr	r3, [pc, #260]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 8002282:	4949      	ldr	r1, [pc, #292]	@ (80023a8 <HAL_RCC_OscConfig+0x34c>)
 8002284:	400a      	ands	r2, r1
 8002286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002288:	f7fe fe0e 	bl	8000ea8 <HAL_GetTick>
 800228c:	0003      	movs	r3, r0
 800228e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002292:	f7fe fe09 	bl	8000ea8 <HAL_GetTick>
 8002296:	0002      	movs	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e1d8      	b.n	8002656 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022a4:	4b38      	ldr	r3, [pc, #224]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	2380      	movs	r3, #128	@ 0x80
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	4013      	ands	r3, r2
 80022ae:	d1f0      	bne.n	8002292 <HAL_RCC_OscConfig+0x236>
 80022b0:	e000      	b.n	80022b4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022b2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2208      	movs	r2, #8
 80022ba:	4013      	ands	r3, r2
 80022bc:	d047      	beq.n	800234e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80022be:	4b32      	ldr	r3, [pc, #200]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2238      	movs	r2, #56	@ 0x38
 80022c4:	4013      	ands	r3, r2
 80022c6:	2b18      	cmp	r3, #24
 80022c8:	d10a      	bne.n	80022e0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80022ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 80022cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ce:	2202      	movs	r2, #2
 80022d0:	4013      	ands	r3, r2
 80022d2:	d03c      	beq.n	800234e <HAL_RCC_OscConfig+0x2f2>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d138      	bne.n	800234e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e1ba      	b.n	8002656 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d019      	beq.n	800231c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80022e8:	4b27      	ldr	r3, [pc, #156]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 80022ea:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80022ec:	4b26      	ldr	r3, [pc, #152]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 80022ee:	2101      	movs	r1, #1
 80022f0:	430a      	orrs	r2, r1
 80022f2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f4:	f7fe fdd8 	bl	8000ea8 <HAL_GetTick>
 80022f8:	0003      	movs	r3, r0
 80022fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022fe:	f7fe fdd3 	bl	8000ea8 <HAL_GetTick>
 8002302:	0002      	movs	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e1a2      	b.n	8002656 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002310:	4b1d      	ldr	r3, [pc, #116]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 8002312:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002314:	2202      	movs	r2, #2
 8002316:	4013      	ands	r3, r2
 8002318:	d0f1      	beq.n	80022fe <HAL_RCC_OscConfig+0x2a2>
 800231a:	e018      	b.n	800234e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800231c:	4b1a      	ldr	r3, [pc, #104]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 800231e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002320:	4b19      	ldr	r3, [pc, #100]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 8002322:	2101      	movs	r1, #1
 8002324:	438a      	bics	r2, r1
 8002326:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002328:	f7fe fdbe 	bl	8000ea8 <HAL_GetTick>
 800232c:	0003      	movs	r3, r0
 800232e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002332:	f7fe fdb9 	bl	8000ea8 <HAL_GetTick>
 8002336:	0002      	movs	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e188      	b.n	8002656 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002344:	4b10      	ldr	r3, [pc, #64]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 8002346:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002348:	2202      	movs	r2, #2
 800234a:	4013      	ands	r3, r2
 800234c:	d1f1      	bne.n	8002332 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2204      	movs	r2, #4
 8002354:	4013      	ands	r3, r2
 8002356:	d100      	bne.n	800235a <HAL_RCC_OscConfig+0x2fe>
 8002358:	e0c6      	b.n	80024e8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800235a:	231f      	movs	r3, #31
 800235c:	18fb      	adds	r3, r7, r3
 800235e:	2200      	movs	r2, #0
 8002360:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002362:	4b09      	ldr	r3, [pc, #36]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	2238      	movs	r2, #56	@ 0x38
 8002368:	4013      	ands	r3, r2
 800236a:	2b20      	cmp	r3, #32
 800236c:	d11e      	bne.n	80023ac <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800236e:	4b06      	ldr	r3, [pc, #24]	@ (8002388 <HAL_RCC_OscConfig+0x32c>)
 8002370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002372:	2202      	movs	r2, #2
 8002374:	4013      	ands	r3, r2
 8002376:	d100      	bne.n	800237a <HAL_RCC_OscConfig+0x31e>
 8002378:	e0b6      	b.n	80024e8 <HAL_RCC_OscConfig+0x48c>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d000      	beq.n	8002384 <HAL_RCC_OscConfig+0x328>
 8002382:	e0b1      	b.n	80024e8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e166      	b.n	8002656 <HAL_RCC_OscConfig+0x5fa>
 8002388:	40021000 	.word	0x40021000
 800238c:	fffeffff 	.word	0xfffeffff
 8002390:	fffbffff 	.word	0xfffbffff
 8002394:	ffff80ff 	.word	0xffff80ff
 8002398:	ffffc7ff 	.word	0xffffc7ff
 800239c:	00f42400 	.word	0x00f42400
 80023a0:	20000000 	.word	0x20000000
 80023a4:	20000004 	.word	0x20000004
 80023a8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023ac:	4bac      	ldr	r3, [pc, #688]	@ (8002660 <HAL_RCC_OscConfig+0x604>)
 80023ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023b0:	2380      	movs	r3, #128	@ 0x80
 80023b2:	055b      	lsls	r3, r3, #21
 80023b4:	4013      	ands	r3, r2
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_OscConfig+0x360>
 80023b8:	2301      	movs	r3, #1
 80023ba:	e000      	b.n	80023be <HAL_RCC_OscConfig+0x362>
 80023bc:	2300      	movs	r3, #0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d011      	beq.n	80023e6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80023c2:	4ba7      	ldr	r3, [pc, #668]	@ (8002660 <HAL_RCC_OscConfig+0x604>)
 80023c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023c6:	4ba6      	ldr	r3, [pc, #664]	@ (8002660 <HAL_RCC_OscConfig+0x604>)
 80023c8:	2180      	movs	r1, #128	@ 0x80
 80023ca:	0549      	lsls	r1, r1, #21
 80023cc:	430a      	orrs	r2, r1
 80023ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80023d0:	4ba3      	ldr	r3, [pc, #652]	@ (8002660 <HAL_RCC_OscConfig+0x604>)
 80023d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023d4:	2380      	movs	r3, #128	@ 0x80
 80023d6:	055b      	lsls	r3, r3, #21
 80023d8:	4013      	ands	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80023de:	231f      	movs	r3, #31
 80023e0:	18fb      	adds	r3, r7, r3
 80023e2:	2201      	movs	r2, #1
 80023e4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023e6:	4b9f      	ldr	r3, [pc, #636]	@ (8002664 <HAL_RCC_OscConfig+0x608>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	2380      	movs	r3, #128	@ 0x80
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	4013      	ands	r3, r2
 80023f0:	d11a      	bne.n	8002428 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023f2:	4b9c      	ldr	r3, [pc, #624]	@ (8002664 <HAL_RCC_OscConfig+0x608>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	4b9b      	ldr	r3, [pc, #620]	@ (8002664 <HAL_RCC_OscConfig+0x608>)
 80023f8:	2180      	movs	r1, #128	@ 0x80
 80023fa:	0049      	lsls	r1, r1, #1
 80023fc:	430a      	orrs	r2, r1
 80023fe:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002400:	f7fe fd52 	bl	8000ea8 <HAL_GetTick>
 8002404:	0003      	movs	r3, r0
 8002406:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800240a:	f7fe fd4d 	bl	8000ea8 <HAL_GetTick>
 800240e:	0002      	movs	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e11c      	b.n	8002656 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800241c:	4b91      	ldr	r3, [pc, #580]	@ (8002664 <HAL_RCC_OscConfig+0x608>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	2380      	movs	r3, #128	@ 0x80
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	4013      	ands	r3, r2
 8002426:	d0f0      	beq.n	800240a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d106      	bne.n	800243e <HAL_RCC_OscConfig+0x3e2>
 8002430:	4b8b      	ldr	r3, [pc, #556]	@ (8002660 <HAL_RCC_OscConfig+0x604>)
 8002432:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002434:	4b8a      	ldr	r3, [pc, #552]	@ (8002660 <HAL_RCC_OscConfig+0x604>)
 8002436:	2101      	movs	r1, #1
 8002438:	430a      	orrs	r2, r1
 800243a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800243c:	e01c      	b.n	8002478 <HAL_RCC_OscConfig+0x41c>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	2b05      	cmp	r3, #5
 8002444:	d10c      	bne.n	8002460 <HAL_RCC_OscConfig+0x404>
 8002446:	4b86      	ldr	r3, [pc, #536]	@ (8002660 <HAL_RCC_OscConfig+0x604>)
 8002448:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800244a:	4b85      	ldr	r3, [pc, #532]	@ (8002660 <HAL_RCC_OscConfig+0x604>)
 800244c:	2104      	movs	r1, #4
 800244e:	430a      	orrs	r2, r1
 8002450:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002452:	4b83      	ldr	r3, [pc, #524]	@ (8002660 <HAL_RCC_OscConfig+0x604>)
 8002454:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002456:	4b82      	ldr	r3, [pc, #520]	@ (8002660 <HAL_RCC_OscConfig+0x604>)
 8002458:	2101      	movs	r1, #1
 800245a:	430a      	orrs	r2, r1
 800245c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800245e:	e00b      	b.n	8002478 <HAL_RCC_OscConfig+0x41c>
 8002460:	4b7f      	ldr	r3, [pc, #508]	@ (8002660 <HAL_RCC_OscConfig+0x604>)
 8002462:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002464:	4b7e      	ldr	r3, [pc, #504]	@ (8002660 <HAL_RCC_OscConfig+0x604>)
 8002466:	2101      	movs	r1, #1
 8002468:	438a      	bics	r2, r1
 800246a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800246c:	4b7c      	ldr	r3, [pc, #496]	@ (8002660 <HAL_RCC_OscConfig+0x604>)
 800246e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002470:	4b7b      	ldr	r3, [pc, #492]	@ (8002660 <HAL_RCC_OscConfig+0x604>)
 8002472:	2104      	movs	r1, #4
 8002474:	438a      	bics	r2, r1
 8002476:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d014      	beq.n	80024aa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002480:	f7fe fd12 	bl	8000ea8 <HAL_GetTick>
 8002484:	0003      	movs	r3, r0
 8002486:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002488:	e009      	b.n	800249e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800248a:	f7fe fd0d 	bl	8000ea8 <HAL_GetTick>
 800248e:	0002      	movs	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	4a74      	ldr	r2, [pc, #464]	@ (8002668 <HAL_RCC_OscConfig+0x60c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e0db      	b.n	8002656 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800249e:	4b70      	ldr	r3, [pc, #448]	@ (8002660 <HAL_RCC_OscConfig+0x604>)
 80024a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a2:	2202      	movs	r2, #2
 80024a4:	4013      	ands	r3, r2
 80024a6:	d0f0      	beq.n	800248a <HAL_RCC_OscConfig+0x42e>
 80024a8:	e013      	b.n	80024d2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024aa:	f7fe fcfd 	bl	8000ea8 <HAL_GetTick>
 80024ae:	0003      	movs	r3, r0
 80024b0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024b2:	e009      	b.n	80024c8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b4:	f7fe fcf8 	bl	8000ea8 <HAL_GetTick>
 80024b8:	0002      	movs	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	4a6a      	ldr	r2, [pc, #424]	@ (8002668 <HAL_RCC_OscConfig+0x60c>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e0c6      	b.n	8002656 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024c8:	4b65      	ldr	r3, [pc, #404]	@ (8002660 <HAL_RCC_OscConfig+0x604>)
 80024ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024cc:	2202      	movs	r2, #2
 80024ce:	4013      	ands	r3, r2
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80024d2:	231f      	movs	r3, #31
 80024d4:	18fb      	adds	r3, r7, r3
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d105      	bne.n	80024e8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80024dc:	4b60      	ldr	r3, [pc, #384]	@ (8002660 <HAL_RCC_OscConfig+0x604>)
 80024de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024e0:	4b5f      	ldr	r3, [pc, #380]	@ (8002660 <HAL_RCC_OscConfig+0x604>)
 80024e2:	4962      	ldr	r1, [pc, #392]	@ (800266c <HAL_RCC_OscConfig+0x610>)
 80024e4:	400a      	ands	r2, r1
 80024e6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d100      	bne.n	80024f2 <HAL_RCC_OscConfig+0x496>
 80024f0:	e0b0      	b.n	8002654 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002660 <HAL_RCC_OscConfig+0x604>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2238      	movs	r2, #56	@ 0x38
 80024f8:	4013      	ands	r3, r2
 80024fa:	2b10      	cmp	r3, #16
 80024fc:	d100      	bne.n	8002500 <HAL_RCC_OscConfig+0x4a4>
 80024fe:	e078      	b.n	80025f2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	2b02      	cmp	r3, #2
 8002506:	d153      	bne.n	80025b0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002508:	4b55      	ldr	r3, [pc, #340]	@ (8002660 <HAL_RCC_OscConfig+0x604>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4b54      	ldr	r3, [pc, #336]	@ (8002660 <HAL_RCC_OscConfig+0x604>)
 800250e:	4958      	ldr	r1, [pc, #352]	@ (8002670 <HAL_RCC_OscConfig+0x614>)
 8002510:	400a      	ands	r2, r1
 8002512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002514:	f7fe fcc8 	bl	8000ea8 <HAL_GetTick>
 8002518:	0003      	movs	r3, r0
 800251a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800251e:	f7fe fcc3 	bl	8000ea8 <HAL_GetTick>
 8002522:	0002      	movs	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e092      	b.n	8002656 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002530:	4b4b      	ldr	r3, [pc, #300]	@ (8002660 <HAL_RCC_OscConfig+0x604>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	2380      	movs	r3, #128	@ 0x80
 8002536:	049b      	lsls	r3, r3, #18
 8002538:	4013      	ands	r3, r2
 800253a:	d1f0      	bne.n	800251e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800253c:	4b48      	ldr	r3, [pc, #288]	@ (8002660 <HAL_RCC_OscConfig+0x604>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	4a4c      	ldr	r2, [pc, #304]	@ (8002674 <HAL_RCC_OscConfig+0x618>)
 8002542:	4013      	ands	r3, r2
 8002544:	0019      	movs	r1, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a1a      	ldr	r2, [r3, #32]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002554:	021b      	lsls	r3, r3, #8
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255c:	431a      	orrs	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002562:	431a      	orrs	r2, r3
 8002564:	4b3e      	ldr	r3, [pc, #248]	@ (8002660 <HAL_RCC_OscConfig+0x604>)
 8002566:	430a      	orrs	r2, r1
 8002568:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800256a:	4b3d      	ldr	r3, [pc, #244]	@ (8002660 <HAL_RCC_OscConfig+0x604>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	4b3c      	ldr	r3, [pc, #240]	@ (8002660 <HAL_RCC_OscConfig+0x604>)
 8002570:	2180      	movs	r1, #128	@ 0x80
 8002572:	0449      	lsls	r1, r1, #17
 8002574:	430a      	orrs	r2, r1
 8002576:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002578:	4b39      	ldr	r3, [pc, #228]	@ (8002660 <HAL_RCC_OscConfig+0x604>)
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	4b38      	ldr	r3, [pc, #224]	@ (8002660 <HAL_RCC_OscConfig+0x604>)
 800257e:	2180      	movs	r1, #128	@ 0x80
 8002580:	0549      	lsls	r1, r1, #21
 8002582:	430a      	orrs	r2, r1
 8002584:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002586:	f7fe fc8f 	bl	8000ea8 <HAL_GetTick>
 800258a:	0003      	movs	r3, r0
 800258c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002590:	f7fe fc8a 	bl	8000ea8 <HAL_GetTick>
 8002594:	0002      	movs	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e059      	b.n	8002656 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025a2:	4b2f      	ldr	r3, [pc, #188]	@ (8002660 <HAL_RCC_OscConfig+0x604>)
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	2380      	movs	r3, #128	@ 0x80
 80025a8:	049b      	lsls	r3, r3, #18
 80025aa:	4013      	ands	r3, r2
 80025ac:	d0f0      	beq.n	8002590 <HAL_RCC_OscConfig+0x534>
 80025ae:	e051      	b.n	8002654 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002660 <HAL_RCC_OscConfig+0x604>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002660 <HAL_RCC_OscConfig+0x604>)
 80025b6:	492e      	ldr	r1, [pc, #184]	@ (8002670 <HAL_RCC_OscConfig+0x614>)
 80025b8:	400a      	ands	r2, r1
 80025ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025bc:	f7fe fc74 	bl	8000ea8 <HAL_GetTick>
 80025c0:	0003      	movs	r3, r0
 80025c2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c6:	f7fe fc6f 	bl	8000ea8 <HAL_GetTick>
 80025ca:	0002      	movs	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e03e      	b.n	8002656 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025d8:	4b21      	ldr	r3, [pc, #132]	@ (8002660 <HAL_RCC_OscConfig+0x604>)
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	2380      	movs	r3, #128	@ 0x80
 80025de:	049b      	lsls	r3, r3, #18
 80025e0:	4013      	ands	r3, r2
 80025e2:	d1f0      	bne.n	80025c6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80025e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002660 <HAL_RCC_OscConfig+0x604>)
 80025e6:	68da      	ldr	r2, [r3, #12]
 80025e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002660 <HAL_RCC_OscConfig+0x604>)
 80025ea:	4923      	ldr	r1, [pc, #140]	@ (8002678 <HAL_RCC_OscConfig+0x61c>)
 80025ec:	400a      	ands	r2, r1
 80025ee:	60da      	str	r2, [r3, #12]
 80025f0:	e030      	b.n	8002654 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d101      	bne.n	80025fe <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e02b      	b.n	8002656 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80025fe:	4b18      	ldr	r3, [pc, #96]	@ (8002660 <HAL_RCC_OscConfig+0x604>)
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	2203      	movs	r2, #3
 8002608:	401a      	ands	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	429a      	cmp	r2, r3
 8002610:	d11e      	bne.n	8002650 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	2270      	movs	r2, #112	@ 0x70
 8002616:	401a      	ands	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261c:	429a      	cmp	r2, r3
 800261e:	d117      	bne.n	8002650 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	23fe      	movs	r3, #254	@ 0xfe
 8002624:	01db      	lsls	r3, r3, #7
 8002626:	401a      	ands	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800262e:	429a      	cmp	r2, r3
 8002630:	d10e      	bne.n	8002650 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	23f8      	movs	r3, #248	@ 0xf8
 8002636:	039b      	lsls	r3, r3, #14
 8002638:	401a      	ands	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800263e:	429a      	cmp	r2, r3
 8002640:	d106      	bne.n	8002650 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	0f5b      	lsrs	r3, r3, #29
 8002646:	075a      	lsls	r2, r3, #29
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800264c:	429a      	cmp	r2, r3
 800264e:	d001      	beq.n	8002654 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	0018      	movs	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	b008      	add	sp, #32
 800265c:	bd80      	pop	{r7, pc}
 800265e:	46c0      	nop			@ (mov r8, r8)
 8002660:	40021000 	.word	0x40021000
 8002664:	40007000 	.word	0x40007000
 8002668:	00001388 	.word	0x00001388
 800266c:	efffffff 	.word	0xefffffff
 8002670:	feffffff 	.word	0xfeffffff
 8002674:	1fc1808c 	.word	0x1fc1808c
 8002678:	effefffc 	.word	0xeffefffc

0800267c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e0e9      	b.n	8002864 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002690:	4b76      	ldr	r3, [pc, #472]	@ (800286c <HAL_RCC_ClockConfig+0x1f0>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2207      	movs	r2, #7
 8002696:	4013      	ands	r3, r2
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d91e      	bls.n	80026dc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269e:	4b73      	ldr	r3, [pc, #460]	@ (800286c <HAL_RCC_ClockConfig+0x1f0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2207      	movs	r2, #7
 80026a4:	4393      	bics	r3, r2
 80026a6:	0019      	movs	r1, r3
 80026a8:	4b70      	ldr	r3, [pc, #448]	@ (800286c <HAL_RCC_ClockConfig+0x1f0>)
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026b0:	f7fe fbfa 	bl	8000ea8 <HAL_GetTick>
 80026b4:	0003      	movs	r3, r0
 80026b6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026b8:	e009      	b.n	80026ce <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ba:	f7fe fbf5 	bl	8000ea8 <HAL_GetTick>
 80026be:	0002      	movs	r2, r0
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	4a6a      	ldr	r2, [pc, #424]	@ (8002870 <HAL_RCC_ClockConfig+0x1f4>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e0ca      	b.n	8002864 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026ce:	4b67      	ldr	r3, [pc, #412]	@ (800286c <HAL_RCC_ClockConfig+0x1f0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2207      	movs	r2, #7
 80026d4:	4013      	ands	r3, r2
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d1ee      	bne.n	80026ba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2202      	movs	r2, #2
 80026e2:	4013      	ands	r3, r2
 80026e4:	d015      	beq.n	8002712 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2204      	movs	r2, #4
 80026ec:	4013      	ands	r3, r2
 80026ee:	d006      	beq.n	80026fe <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80026f0:	4b60      	ldr	r3, [pc, #384]	@ (8002874 <HAL_RCC_ClockConfig+0x1f8>)
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	4b5f      	ldr	r3, [pc, #380]	@ (8002874 <HAL_RCC_ClockConfig+0x1f8>)
 80026f6:	21e0      	movs	r1, #224	@ 0xe0
 80026f8:	01c9      	lsls	r1, r1, #7
 80026fa:	430a      	orrs	r2, r1
 80026fc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026fe:	4b5d      	ldr	r3, [pc, #372]	@ (8002874 <HAL_RCC_ClockConfig+0x1f8>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	4a5d      	ldr	r2, [pc, #372]	@ (8002878 <HAL_RCC_ClockConfig+0x1fc>)
 8002704:	4013      	ands	r3, r2
 8002706:	0019      	movs	r1, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	4b59      	ldr	r3, [pc, #356]	@ (8002874 <HAL_RCC_ClockConfig+0x1f8>)
 800270e:	430a      	orrs	r2, r1
 8002710:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2201      	movs	r2, #1
 8002718:	4013      	ands	r3, r2
 800271a:	d057      	beq.n	80027cc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d107      	bne.n	8002734 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002724:	4b53      	ldr	r3, [pc, #332]	@ (8002874 <HAL_RCC_ClockConfig+0x1f8>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	2380      	movs	r3, #128	@ 0x80
 800272a:	029b      	lsls	r3, r3, #10
 800272c:	4013      	ands	r3, r2
 800272e:	d12b      	bne.n	8002788 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e097      	b.n	8002864 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b02      	cmp	r3, #2
 800273a:	d107      	bne.n	800274c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800273c:	4b4d      	ldr	r3, [pc, #308]	@ (8002874 <HAL_RCC_ClockConfig+0x1f8>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	2380      	movs	r3, #128	@ 0x80
 8002742:	049b      	lsls	r3, r3, #18
 8002744:	4013      	ands	r3, r2
 8002746:	d11f      	bne.n	8002788 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e08b      	b.n	8002864 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d107      	bne.n	8002764 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002754:	4b47      	ldr	r3, [pc, #284]	@ (8002874 <HAL_RCC_ClockConfig+0x1f8>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	2380      	movs	r3, #128	@ 0x80
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	4013      	ands	r3, r2
 800275e:	d113      	bne.n	8002788 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e07f      	b.n	8002864 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b03      	cmp	r3, #3
 800276a:	d106      	bne.n	800277a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800276c:	4b41      	ldr	r3, [pc, #260]	@ (8002874 <HAL_RCC_ClockConfig+0x1f8>)
 800276e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002770:	2202      	movs	r2, #2
 8002772:	4013      	ands	r3, r2
 8002774:	d108      	bne.n	8002788 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e074      	b.n	8002864 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800277a:	4b3e      	ldr	r3, [pc, #248]	@ (8002874 <HAL_RCC_ClockConfig+0x1f8>)
 800277c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800277e:	2202      	movs	r2, #2
 8002780:	4013      	ands	r3, r2
 8002782:	d101      	bne.n	8002788 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e06d      	b.n	8002864 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002788:	4b3a      	ldr	r3, [pc, #232]	@ (8002874 <HAL_RCC_ClockConfig+0x1f8>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2207      	movs	r2, #7
 800278e:	4393      	bics	r3, r2
 8002790:	0019      	movs	r1, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	4b37      	ldr	r3, [pc, #220]	@ (8002874 <HAL_RCC_ClockConfig+0x1f8>)
 8002798:	430a      	orrs	r2, r1
 800279a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800279c:	f7fe fb84 	bl	8000ea8 <HAL_GetTick>
 80027a0:	0003      	movs	r3, r0
 80027a2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a4:	e009      	b.n	80027ba <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a6:	f7fe fb7f 	bl	8000ea8 <HAL_GetTick>
 80027aa:	0002      	movs	r2, r0
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	4a2f      	ldr	r2, [pc, #188]	@ (8002870 <HAL_RCC_ClockConfig+0x1f4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e054      	b.n	8002864 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ba:	4b2e      	ldr	r3, [pc, #184]	@ (8002874 <HAL_RCC_ClockConfig+0x1f8>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	2238      	movs	r2, #56	@ 0x38
 80027c0:	401a      	ands	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d1ec      	bne.n	80027a6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027cc:	4b27      	ldr	r3, [pc, #156]	@ (800286c <HAL_RCC_ClockConfig+0x1f0>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2207      	movs	r2, #7
 80027d2:	4013      	ands	r3, r2
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d21e      	bcs.n	8002818 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027da:	4b24      	ldr	r3, [pc, #144]	@ (800286c <HAL_RCC_ClockConfig+0x1f0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2207      	movs	r2, #7
 80027e0:	4393      	bics	r3, r2
 80027e2:	0019      	movs	r1, r3
 80027e4:	4b21      	ldr	r3, [pc, #132]	@ (800286c <HAL_RCC_ClockConfig+0x1f0>)
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027ec:	f7fe fb5c 	bl	8000ea8 <HAL_GetTick>
 80027f0:	0003      	movs	r3, r0
 80027f2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027f4:	e009      	b.n	800280a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f6:	f7fe fb57 	bl	8000ea8 <HAL_GetTick>
 80027fa:	0002      	movs	r2, r0
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	4a1b      	ldr	r2, [pc, #108]	@ (8002870 <HAL_RCC_ClockConfig+0x1f4>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d901      	bls.n	800280a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e02c      	b.n	8002864 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800280a:	4b18      	ldr	r3, [pc, #96]	@ (800286c <HAL_RCC_ClockConfig+0x1f0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2207      	movs	r2, #7
 8002810:	4013      	ands	r3, r2
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	429a      	cmp	r2, r3
 8002816:	d1ee      	bne.n	80027f6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2204      	movs	r2, #4
 800281e:	4013      	ands	r3, r2
 8002820:	d009      	beq.n	8002836 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002822:	4b14      	ldr	r3, [pc, #80]	@ (8002874 <HAL_RCC_ClockConfig+0x1f8>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	4a15      	ldr	r2, [pc, #84]	@ (800287c <HAL_RCC_ClockConfig+0x200>)
 8002828:	4013      	ands	r3, r2
 800282a:	0019      	movs	r1, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68da      	ldr	r2, [r3, #12]
 8002830:	4b10      	ldr	r3, [pc, #64]	@ (8002874 <HAL_RCC_ClockConfig+0x1f8>)
 8002832:	430a      	orrs	r2, r1
 8002834:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002836:	f000 f829 	bl	800288c <HAL_RCC_GetSysClockFreq>
 800283a:	0001      	movs	r1, r0
 800283c:	4b0d      	ldr	r3, [pc, #52]	@ (8002874 <HAL_RCC_ClockConfig+0x1f8>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	0a1b      	lsrs	r3, r3, #8
 8002842:	220f      	movs	r2, #15
 8002844:	401a      	ands	r2, r3
 8002846:	4b0e      	ldr	r3, [pc, #56]	@ (8002880 <HAL_RCC_ClockConfig+0x204>)
 8002848:	0092      	lsls	r2, r2, #2
 800284a:	58d3      	ldr	r3, [r2, r3]
 800284c:	221f      	movs	r2, #31
 800284e:	4013      	ands	r3, r2
 8002850:	000a      	movs	r2, r1
 8002852:	40da      	lsrs	r2, r3
 8002854:	4b0b      	ldr	r3, [pc, #44]	@ (8002884 <HAL_RCC_ClockConfig+0x208>)
 8002856:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002858:	4b0b      	ldr	r3, [pc, #44]	@ (8002888 <HAL_RCC_ClockConfig+0x20c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	0018      	movs	r0, r3
 800285e:	f7fe fac7 	bl	8000df0 <HAL_InitTick>
 8002862:	0003      	movs	r3, r0
}
 8002864:	0018      	movs	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	b004      	add	sp, #16
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40022000 	.word	0x40022000
 8002870:	00001388 	.word	0x00001388
 8002874:	40021000 	.word	0x40021000
 8002878:	fffff0ff 	.word	0xfffff0ff
 800287c:	ffff8fff 	.word	0xffff8fff
 8002880:	08004ec0 	.word	0x08004ec0
 8002884:	20000000 	.word	0x20000000
 8002888:	20000004 	.word	0x20000004

0800288c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002892:	4b3c      	ldr	r3, [pc, #240]	@ (8002984 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	2238      	movs	r2, #56	@ 0x38
 8002898:	4013      	ands	r3, r2
 800289a:	d10f      	bne.n	80028bc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800289c:	4b39      	ldr	r3, [pc, #228]	@ (8002984 <HAL_RCC_GetSysClockFreq+0xf8>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	0adb      	lsrs	r3, r3, #11
 80028a2:	2207      	movs	r2, #7
 80028a4:	4013      	ands	r3, r2
 80028a6:	2201      	movs	r2, #1
 80028a8:	409a      	lsls	r2, r3
 80028aa:	0013      	movs	r3, r2
 80028ac:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80028ae:	6839      	ldr	r1, [r7, #0]
 80028b0:	4835      	ldr	r0, [pc, #212]	@ (8002988 <HAL_RCC_GetSysClockFreq+0xfc>)
 80028b2:	f7fd fc2f 	bl	8000114 <__udivsi3>
 80028b6:	0003      	movs	r3, r0
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	e05d      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028bc:	4b31      	ldr	r3, [pc, #196]	@ (8002984 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2238      	movs	r2, #56	@ 0x38
 80028c2:	4013      	ands	r3, r2
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d102      	bne.n	80028ce <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028c8:	4b30      	ldr	r3, [pc, #192]	@ (800298c <HAL_RCC_GetSysClockFreq+0x100>)
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	e054      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002984 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	2238      	movs	r2, #56	@ 0x38
 80028d4:	4013      	ands	r3, r2
 80028d6:	2b10      	cmp	r3, #16
 80028d8:	d138      	bne.n	800294c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80028da:	4b2a      	ldr	r3, [pc, #168]	@ (8002984 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	2203      	movs	r2, #3
 80028e0:	4013      	ands	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028e4:	4b27      	ldr	r3, [pc, #156]	@ (8002984 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	091b      	lsrs	r3, r3, #4
 80028ea:	2207      	movs	r2, #7
 80028ec:	4013      	ands	r3, r2
 80028ee:	3301      	adds	r3, #1
 80028f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d10d      	bne.n	8002914 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028f8:	68b9      	ldr	r1, [r7, #8]
 80028fa:	4824      	ldr	r0, [pc, #144]	@ (800298c <HAL_RCC_GetSysClockFreq+0x100>)
 80028fc:	f7fd fc0a 	bl	8000114 <__udivsi3>
 8002900:	0003      	movs	r3, r0
 8002902:	0019      	movs	r1, r3
 8002904:	4b1f      	ldr	r3, [pc, #124]	@ (8002984 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	0a1b      	lsrs	r3, r3, #8
 800290a:	227f      	movs	r2, #127	@ 0x7f
 800290c:	4013      	ands	r3, r2
 800290e:	434b      	muls	r3, r1
 8002910:	617b      	str	r3, [r7, #20]
        break;
 8002912:	e00d      	b.n	8002930 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002914:	68b9      	ldr	r1, [r7, #8]
 8002916:	481c      	ldr	r0, [pc, #112]	@ (8002988 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002918:	f7fd fbfc 	bl	8000114 <__udivsi3>
 800291c:	0003      	movs	r3, r0
 800291e:	0019      	movs	r1, r3
 8002920:	4b18      	ldr	r3, [pc, #96]	@ (8002984 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	0a1b      	lsrs	r3, r3, #8
 8002926:	227f      	movs	r2, #127	@ 0x7f
 8002928:	4013      	ands	r3, r2
 800292a:	434b      	muls	r3, r1
 800292c:	617b      	str	r3, [r7, #20]
        break;
 800292e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002930:	4b14      	ldr	r3, [pc, #80]	@ (8002984 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	0f5b      	lsrs	r3, r3, #29
 8002936:	2207      	movs	r2, #7
 8002938:	4013      	ands	r3, r2
 800293a:	3301      	adds	r3, #1
 800293c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	6978      	ldr	r0, [r7, #20]
 8002942:	f7fd fbe7 	bl	8000114 <__udivsi3>
 8002946:	0003      	movs	r3, r0
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	e015      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800294c:	4b0d      	ldr	r3, [pc, #52]	@ (8002984 <HAL_RCC_GetSysClockFreq+0xf8>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	2238      	movs	r2, #56	@ 0x38
 8002952:	4013      	ands	r3, r2
 8002954:	2b20      	cmp	r3, #32
 8002956:	d103      	bne.n	8002960 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002958:	2380      	movs	r3, #128	@ 0x80
 800295a:	021b      	lsls	r3, r3, #8
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	e00b      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002960:	4b08      	ldr	r3, [pc, #32]	@ (8002984 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2238      	movs	r2, #56	@ 0x38
 8002966:	4013      	ands	r3, r2
 8002968:	2b18      	cmp	r3, #24
 800296a:	d103      	bne.n	8002974 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800296c:	23fa      	movs	r3, #250	@ 0xfa
 800296e:	01db      	lsls	r3, r3, #7
 8002970:	613b      	str	r3, [r7, #16]
 8002972:	e001      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002974:	2300      	movs	r3, #0
 8002976:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002978:	693b      	ldr	r3, [r7, #16]
}
 800297a:	0018      	movs	r0, r3
 800297c:	46bd      	mov	sp, r7
 800297e:	b006      	add	sp, #24
 8002980:	bd80      	pop	{r7, pc}
 8002982:	46c0      	nop			@ (mov r8, r8)
 8002984:	40021000 	.word	0x40021000
 8002988:	00f42400 	.word	0x00f42400
 800298c:	007a1200 	.word	0x007a1200

08002990 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002994:	4b02      	ldr	r3, [pc, #8]	@ (80029a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002996:	681b      	ldr	r3, [r3, #0]
}
 8002998:	0018      	movs	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	46c0      	nop			@ (mov r8, r8)
 80029a0:	20000000 	.word	0x20000000

080029a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029a4:	b5b0      	push	{r4, r5, r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80029a8:	f7ff fff2 	bl	8002990 <HAL_RCC_GetHCLKFreq>
 80029ac:	0004      	movs	r4, r0
 80029ae:	f7ff fb49 	bl	8002044 <LL_RCC_GetAPB1Prescaler>
 80029b2:	0003      	movs	r3, r0
 80029b4:	0b1a      	lsrs	r2, r3, #12
 80029b6:	4b05      	ldr	r3, [pc, #20]	@ (80029cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80029b8:	0092      	lsls	r2, r2, #2
 80029ba:	58d3      	ldr	r3, [r2, r3]
 80029bc:	221f      	movs	r2, #31
 80029be:	4013      	ands	r3, r2
 80029c0:	40dc      	lsrs	r4, r3
 80029c2:	0023      	movs	r3, r4
}
 80029c4:	0018      	movs	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bdb0      	pop	{r4, r5, r7, pc}
 80029ca:	46c0      	nop			@ (mov r8, r8)
 80029cc:	08004f00 	.word	0x08004f00

080029d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80029d8:	2313      	movs	r3, #19
 80029da:	18fb      	adds	r3, r7, r3
 80029dc:	2200      	movs	r2, #0
 80029de:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029e0:	2312      	movs	r3, #18
 80029e2:	18fb      	adds	r3, r7, r3
 80029e4:	2200      	movs	r2, #0
 80029e6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	2380      	movs	r3, #128	@ 0x80
 80029ee:	029b      	lsls	r3, r3, #10
 80029f0:	4013      	ands	r3, r2
 80029f2:	d100      	bne.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80029f4:	e0a3      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029f6:	2011      	movs	r0, #17
 80029f8:	183b      	adds	r3, r7, r0
 80029fa:	2200      	movs	r2, #0
 80029fc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029fe:	4b86      	ldr	r3, [pc, #536]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a02:	2380      	movs	r3, #128	@ 0x80
 8002a04:	055b      	lsls	r3, r3, #21
 8002a06:	4013      	ands	r3, r2
 8002a08:	d110      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a0a:	4b83      	ldr	r3, [pc, #524]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a0e:	4b82      	ldr	r3, [pc, #520]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a10:	2180      	movs	r1, #128	@ 0x80
 8002a12:	0549      	lsls	r1, r1, #21
 8002a14:	430a      	orrs	r2, r1
 8002a16:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a18:	4b7f      	ldr	r3, [pc, #508]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a1c:	2380      	movs	r3, #128	@ 0x80
 8002a1e:	055b      	lsls	r3, r3, #21
 8002a20:	4013      	ands	r3, r2
 8002a22:	60bb      	str	r3, [r7, #8]
 8002a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a26:	183b      	adds	r3, r7, r0
 8002a28:	2201      	movs	r2, #1
 8002a2a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a2c:	4b7b      	ldr	r3, [pc, #492]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	4b7a      	ldr	r3, [pc, #488]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002a32:	2180      	movs	r1, #128	@ 0x80
 8002a34:	0049      	lsls	r1, r1, #1
 8002a36:	430a      	orrs	r2, r1
 8002a38:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a3a:	f7fe fa35 	bl	8000ea8 <HAL_GetTick>
 8002a3e:	0003      	movs	r3, r0
 8002a40:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a42:	e00b      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a44:	f7fe fa30 	bl	8000ea8 <HAL_GetTick>
 8002a48:	0002      	movs	r2, r0
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d904      	bls.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002a52:	2313      	movs	r3, #19
 8002a54:	18fb      	adds	r3, r7, r3
 8002a56:	2203      	movs	r2, #3
 8002a58:	701a      	strb	r2, [r3, #0]
        break;
 8002a5a:	e005      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a5c:	4b6f      	ldr	r3, [pc, #444]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	2380      	movs	r3, #128	@ 0x80
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	4013      	ands	r3, r2
 8002a66:	d0ed      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002a68:	2313      	movs	r3, #19
 8002a6a:	18fb      	adds	r3, r7, r3
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d154      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a72:	4b69      	ldr	r3, [pc, #420]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a74:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a76:	23c0      	movs	r3, #192	@ 0xc0
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d019      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d014      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a8e:	4b62      	ldr	r3, [pc, #392]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a92:	4a63      	ldr	r2, [pc, #396]	@ (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a98:	4b5f      	ldr	r3, [pc, #380]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a9a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a9c:	4b5e      	ldr	r3, [pc, #376]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a9e:	2180      	movs	r1, #128	@ 0x80
 8002aa0:	0249      	lsls	r1, r1, #9
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002aa6:	4b5c      	ldr	r3, [pc, #368]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002aa8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002aaa:	4b5b      	ldr	r3, [pc, #364]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002aac:	495d      	ldr	r1, [pc, #372]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002aae:	400a      	ands	r2, r1
 8002ab0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ab2:	4b59      	ldr	r3, [pc, #356]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	2201      	movs	r2, #1
 8002abc:	4013      	ands	r3, r2
 8002abe:	d016      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac0:	f7fe f9f2 	bl	8000ea8 <HAL_GetTick>
 8002ac4:	0003      	movs	r3, r0
 8002ac6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ac8:	e00c      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aca:	f7fe f9ed 	bl	8000ea8 <HAL_GetTick>
 8002ace:	0002      	movs	r2, r0
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	4a54      	ldr	r2, [pc, #336]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d904      	bls.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002ada:	2313      	movs	r3, #19
 8002adc:	18fb      	adds	r3, r7, r3
 8002ade:	2203      	movs	r2, #3
 8002ae0:	701a      	strb	r2, [r3, #0]
            break;
 8002ae2:	e004      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ae4:	4b4c      	ldr	r3, [pc, #304]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae8:	2202      	movs	r2, #2
 8002aea:	4013      	ands	r3, r2
 8002aec:	d0ed      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002aee:	2313      	movs	r3, #19
 8002af0:	18fb      	adds	r3, r7, r3
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10a      	bne.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002af8:	4b47      	ldr	r3, [pc, #284]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afc:	4a48      	ldr	r2, [pc, #288]	@ (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	0019      	movs	r1, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699a      	ldr	r2, [r3, #24]
 8002b06:	4b44      	ldr	r3, [pc, #272]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b0c:	e00c      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b0e:	2312      	movs	r3, #18
 8002b10:	18fb      	adds	r3, r7, r3
 8002b12:	2213      	movs	r2, #19
 8002b14:	18ba      	adds	r2, r7, r2
 8002b16:	7812      	ldrb	r2, [r2, #0]
 8002b18:	701a      	strb	r2, [r3, #0]
 8002b1a:	e005      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b1c:	2312      	movs	r3, #18
 8002b1e:	18fb      	adds	r3, r7, r3
 8002b20:	2213      	movs	r2, #19
 8002b22:	18ba      	adds	r2, r7, r2
 8002b24:	7812      	ldrb	r2, [r2, #0]
 8002b26:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b28:	2311      	movs	r3, #17
 8002b2a:	18fb      	adds	r3, r7, r3
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d105      	bne.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b32:	4b39      	ldr	r3, [pc, #228]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b36:	4b38      	ldr	r3, [pc, #224]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b38:	493c      	ldr	r1, [pc, #240]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002b3a:	400a      	ands	r2, r1
 8002b3c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2201      	movs	r2, #1
 8002b44:	4013      	ands	r3, r2
 8002b46:	d009      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b48:	4b33      	ldr	r3, [pc, #204]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b4c:	2203      	movs	r2, #3
 8002b4e:	4393      	bics	r3, r2
 8002b50:	0019      	movs	r1, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	4b30      	ldr	r3, [pc, #192]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2202      	movs	r2, #2
 8002b62:	4013      	ands	r3, r2
 8002b64:	d009      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b66:	4b2c      	ldr	r3, [pc, #176]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b6a:	220c      	movs	r2, #12
 8002b6c:	4393      	bics	r3, r2
 8002b6e:	0019      	movs	r1, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	4b28      	ldr	r3, [pc, #160]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b76:	430a      	orrs	r2, r1
 8002b78:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	4013      	ands	r3, r2
 8002b82:	d009      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b84:	4b24      	ldr	r3, [pc, #144]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b88:	4a29      	ldr	r2, [pc, #164]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	0019      	movs	r1, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	4b21      	ldr	r3, [pc, #132]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b94:	430a      	orrs	r2, r1
 8002b96:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	2380      	movs	r3, #128	@ 0x80
 8002b9e:	01db      	lsls	r3, r3, #7
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	d015      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	0899      	lsrs	r1, r3, #2
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	695a      	ldr	r2, [r3, #20]
 8002bb0:	4b19      	ldr	r3, [pc, #100]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695a      	ldr	r2, [r3, #20]
 8002bba:	2380      	movs	r3, #128	@ 0x80
 8002bbc:	05db      	lsls	r3, r3, #23
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d106      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002bc2:	4b15      	ldr	r3, [pc, #84]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	4b14      	ldr	r3, [pc, #80]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002bc8:	2180      	movs	r1, #128	@ 0x80
 8002bca:	0249      	lsls	r1, r1, #9
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	2380      	movs	r3, #128	@ 0x80
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d016      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002bde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be0:	4a14      	ldr	r2, [pc, #80]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002be2:	4013      	ands	r3, r2
 8002be4:	0019      	movs	r1, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691a      	ldr	r2, [r3, #16]
 8002bea:	4b0b      	ldr	r3, [pc, #44]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002bec:	430a      	orrs	r2, r1
 8002bee:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	2380      	movs	r3, #128	@ 0x80
 8002bf6:	01db      	lsls	r3, r3, #7
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d106      	bne.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002bfc:	4b06      	ldr	r3, [pc, #24]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	4b05      	ldr	r3, [pc, #20]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c02:	2180      	movs	r1, #128	@ 0x80
 8002c04:	0249      	lsls	r1, r1, #9
 8002c06:	430a      	orrs	r2, r1
 8002c08:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002c0a:	2312      	movs	r3, #18
 8002c0c:	18fb      	adds	r3, r7, r3
 8002c0e:	781b      	ldrb	r3, [r3, #0]
}
 8002c10:	0018      	movs	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b006      	add	sp, #24
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	40007000 	.word	0x40007000
 8002c20:	fffffcff 	.word	0xfffffcff
 8002c24:	fffeffff 	.word	0xfffeffff
 8002c28:	00001388 	.word	0x00001388
 8002c2c:	efffffff 	.word	0xefffffff
 8002c30:	ffffcfff 	.word	0xffffcfff
 8002c34:	ffff3fff 	.word	0xffff3fff

08002c38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e04a      	b.n	8002ce0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	223d      	movs	r2, #61	@ 0x3d
 8002c4e:	5c9b      	ldrb	r3, [r3, r2]
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d107      	bne.n	8002c66 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	223c      	movs	r2, #60	@ 0x3c
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	0018      	movs	r0, r3
 8002c62:	f7fd ff29 	bl	8000ab8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	223d      	movs	r2, #61	@ 0x3d
 8002c6a:	2102      	movs	r1, #2
 8002c6c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	3304      	adds	r3, #4
 8002c76:	0019      	movs	r1, r3
 8002c78:	0010      	movs	r0, r2
 8002c7a:	f000 faa5 	bl	80031c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2248      	movs	r2, #72	@ 0x48
 8002c82:	2101      	movs	r1, #1
 8002c84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	223e      	movs	r2, #62	@ 0x3e
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	5499      	strb	r1, [r3, r2]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	223f      	movs	r2, #63	@ 0x3f
 8002c92:	2101      	movs	r1, #1
 8002c94:	5499      	strb	r1, [r3, r2]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2240      	movs	r2, #64	@ 0x40
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	5499      	strb	r1, [r3, r2]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2241      	movs	r2, #65	@ 0x41
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	5499      	strb	r1, [r3, r2]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2242      	movs	r2, #66	@ 0x42
 8002caa:	2101      	movs	r1, #1
 8002cac:	5499      	strb	r1, [r3, r2]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2243      	movs	r2, #67	@ 0x43
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2244      	movs	r2, #68	@ 0x44
 8002cba:	2101      	movs	r1, #1
 8002cbc:	5499      	strb	r1, [r3, r2]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2245      	movs	r2, #69	@ 0x45
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	5499      	strb	r1, [r3, r2]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2246      	movs	r2, #70	@ 0x46
 8002cca:	2101      	movs	r1, #1
 8002ccc:	5499      	strb	r1, [r3, r2]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2247      	movs	r2, #71	@ 0x47
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	223d      	movs	r2, #61	@ 0x3d
 8002cda:	2101      	movs	r1, #1
 8002cdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	b002      	add	sp, #8
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d108      	bne.n	8002d0a <HAL_TIM_PWM_Start+0x22>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	223e      	movs	r2, #62	@ 0x3e
 8002cfc:	5c9b      	ldrb	r3, [r3, r2]
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	3b01      	subs	r3, #1
 8002d02:	1e5a      	subs	r2, r3, #1
 8002d04:	4193      	sbcs	r3, r2
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	e037      	b.n	8002d7a <HAL_TIM_PWM_Start+0x92>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	2b04      	cmp	r3, #4
 8002d0e:	d108      	bne.n	8002d22 <HAL_TIM_PWM_Start+0x3a>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	223f      	movs	r2, #63	@ 0x3f
 8002d14:	5c9b      	ldrb	r3, [r3, r2]
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	1e5a      	subs	r2, r3, #1
 8002d1c:	4193      	sbcs	r3, r2
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	e02b      	b.n	8002d7a <HAL_TIM_PWM_Start+0x92>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d108      	bne.n	8002d3a <HAL_TIM_PWM_Start+0x52>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2240      	movs	r2, #64	@ 0x40
 8002d2c:	5c9b      	ldrb	r3, [r3, r2]
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	1e5a      	subs	r2, r3, #1
 8002d34:	4193      	sbcs	r3, r2
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	e01f      	b.n	8002d7a <HAL_TIM_PWM_Start+0x92>
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	2b0c      	cmp	r3, #12
 8002d3e:	d108      	bne.n	8002d52 <HAL_TIM_PWM_Start+0x6a>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2241      	movs	r2, #65	@ 0x41
 8002d44:	5c9b      	ldrb	r3, [r3, r2]
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	1e5a      	subs	r2, r3, #1
 8002d4c:	4193      	sbcs	r3, r2
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	e013      	b.n	8002d7a <HAL_TIM_PWM_Start+0x92>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b10      	cmp	r3, #16
 8002d56:	d108      	bne.n	8002d6a <HAL_TIM_PWM_Start+0x82>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2242      	movs	r2, #66	@ 0x42
 8002d5c:	5c9b      	ldrb	r3, [r3, r2]
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	3b01      	subs	r3, #1
 8002d62:	1e5a      	subs	r2, r3, #1
 8002d64:	4193      	sbcs	r3, r2
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	e007      	b.n	8002d7a <HAL_TIM_PWM_Start+0x92>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2243      	movs	r2, #67	@ 0x43
 8002d6e:	5c9b      	ldrb	r3, [r3, r2]
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	3b01      	subs	r3, #1
 8002d74:	1e5a      	subs	r2, r3, #1
 8002d76:	4193      	sbcs	r3, r2
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e085      	b.n	8002e8e <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d104      	bne.n	8002d92 <HAL_TIM_PWM_Start+0xaa>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	223e      	movs	r2, #62	@ 0x3e
 8002d8c:	2102      	movs	r1, #2
 8002d8e:	5499      	strb	r1, [r3, r2]
 8002d90:	e023      	b.n	8002dda <HAL_TIM_PWM_Start+0xf2>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d104      	bne.n	8002da2 <HAL_TIM_PWM_Start+0xba>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	223f      	movs	r2, #63	@ 0x3f
 8002d9c:	2102      	movs	r1, #2
 8002d9e:	5499      	strb	r1, [r3, r2]
 8002da0:	e01b      	b.n	8002dda <HAL_TIM_PWM_Start+0xf2>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d104      	bne.n	8002db2 <HAL_TIM_PWM_Start+0xca>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2240      	movs	r2, #64	@ 0x40
 8002dac:	2102      	movs	r1, #2
 8002dae:	5499      	strb	r1, [r3, r2]
 8002db0:	e013      	b.n	8002dda <HAL_TIM_PWM_Start+0xf2>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2b0c      	cmp	r3, #12
 8002db6:	d104      	bne.n	8002dc2 <HAL_TIM_PWM_Start+0xda>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2241      	movs	r2, #65	@ 0x41
 8002dbc:	2102      	movs	r1, #2
 8002dbe:	5499      	strb	r1, [r3, r2]
 8002dc0:	e00b      	b.n	8002dda <HAL_TIM_PWM_Start+0xf2>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2b10      	cmp	r3, #16
 8002dc6:	d104      	bne.n	8002dd2 <HAL_TIM_PWM_Start+0xea>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2242      	movs	r2, #66	@ 0x42
 8002dcc:	2102      	movs	r1, #2
 8002dce:	5499      	strb	r1, [r3, r2]
 8002dd0:	e003      	b.n	8002dda <HAL_TIM_PWM_Start+0xf2>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2243      	movs	r2, #67	@ 0x43
 8002dd6:	2102      	movs	r1, #2
 8002dd8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6839      	ldr	r1, [r7, #0]
 8002de0:	2201      	movs	r2, #1
 8002de2:	0018      	movs	r0, r3
 8002de4:	f000 fd38 	bl	8003858 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a2a      	ldr	r2, [pc, #168]	@ (8002e98 <HAL_TIM_PWM_Start+0x1b0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d00e      	beq.n	8002e10 <HAL_TIM_PWM_Start+0x128>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a29      	ldr	r2, [pc, #164]	@ (8002e9c <HAL_TIM_PWM_Start+0x1b4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d009      	beq.n	8002e10 <HAL_TIM_PWM_Start+0x128>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a27      	ldr	r2, [pc, #156]	@ (8002ea0 <HAL_TIM_PWM_Start+0x1b8>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d004      	beq.n	8002e10 <HAL_TIM_PWM_Start+0x128>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a26      	ldr	r2, [pc, #152]	@ (8002ea4 <HAL_TIM_PWM_Start+0x1bc>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d101      	bne.n	8002e14 <HAL_TIM_PWM_Start+0x12c>
 8002e10:	2301      	movs	r3, #1
 8002e12:	e000      	b.n	8002e16 <HAL_TIM_PWM_Start+0x12e>
 8002e14:	2300      	movs	r3, #0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d008      	beq.n	8002e2c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2180      	movs	r1, #128	@ 0x80
 8002e26:	0209      	lsls	r1, r1, #8
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a19      	ldr	r2, [pc, #100]	@ (8002e98 <HAL_TIM_PWM_Start+0x1b0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d009      	beq.n	8002e4a <HAL_TIM_PWM_Start+0x162>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ea8 <HAL_TIM_PWM_Start+0x1c0>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d004      	beq.n	8002e4a <HAL_TIM_PWM_Start+0x162>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a15      	ldr	r2, [pc, #84]	@ (8002e9c <HAL_TIM_PWM_Start+0x1b4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d116      	bne.n	8002e78 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	4a16      	ldr	r2, [pc, #88]	@ (8002eac <HAL_TIM_PWM_Start+0x1c4>)
 8002e52:	4013      	ands	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2b06      	cmp	r3, #6
 8002e5a:	d016      	beq.n	8002e8a <HAL_TIM_PWM_Start+0x1a2>
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	2380      	movs	r3, #128	@ 0x80
 8002e60:	025b      	lsls	r3, r3, #9
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d011      	beq.n	8002e8a <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2101      	movs	r1, #1
 8002e72:	430a      	orrs	r2, r1
 8002e74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e76:	e008      	b.n	8002e8a <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2101      	movs	r1, #1
 8002e84:	430a      	orrs	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	e000      	b.n	8002e8c <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e8a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	0018      	movs	r0, r3
 8002e90:	46bd      	mov	sp, r7
 8002e92:	b004      	add	sp, #16
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	46c0      	nop			@ (mov r8, r8)
 8002e98:	40012c00 	.word	0x40012c00
 8002e9c:	40014000 	.word	0x40014000
 8002ea0:	40014400 	.word	0x40014400
 8002ea4:	40014800 	.word	0x40014800
 8002ea8:	40000400 	.word	0x40000400
 8002eac:	00010007 	.word	0x00010007

08002eb0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6839      	ldr	r1, [r7, #0]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f000 fcc8 	bl	8003858 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a37      	ldr	r2, [pc, #220]	@ (8002fac <HAL_TIM_PWM_Stop+0xfc>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00e      	beq.n	8002ef0 <HAL_TIM_PWM_Stop+0x40>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a36      	ldr	r2, [pc, #216]	@ (8002fb0 <HAL_TIM_PWM_Stop+0x100>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d009      	beq.n	8002ef0 <HAL_TIM_PWM_Stop+0x40>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a34      	ldr	r2, [pc, #208]	@ (8002fb4 <HAL_TIM_PWM_Stop+0x104>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d004      	beq.n	8002ef0 <HAL_TIM_PWM_Stop+0x40>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a33      	ldr	r2, [pc, #204]	@ (8002fb8 <HAL_TIM_PWM_Stop+0x108>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d101      	bne.n	8002ef4 <HAL_TIM_PWM_Stop+0x44>
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e000      	b.n	8002ef6 <HAL_TIM_PWM_Stop+0x46>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d013      	beq.n	8002f22 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	4a2e      	ldr	r2, [pc, #184]	@ (8002fbc <HAL_TIM_PWM_Stop+0x10c>)
 8002f02:	4013      	ands	r3, r2
 8002f04:	d10d      	bne.n	8002f22 <HAL_TIM_PWM_Stop+0x72>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	4a2c      	ldr	r2, [pc, #176]	@ (8002fc0 <HAL_TIM_PWM_Stop+0x110>)
 8002f0e:	4013      	ands	r3, r2
 8002f10:	d107      	bne.n	8002f22 <HAL_TIM_PWM_Stop+0x72>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4929      	ldr	r1, [pc, #164]	@ (8002fc4 <HAL_TIM_PWM_Stop+0x114>)
 8002f1e:	400a      	ands	r2, r1
 8002f20:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	4a24      	ldr	r2, [pc, #144]	@ (8002fbc <HAL_TIM_PWM_Stop+0x10c>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	d10d      	bne.n	8002f4a <HAL_TIM_PWM_Stop+0x9a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	4a22      	ldr	r2, [pc, #136]	@ (8002fc0 <HAL_TIM_PWM_Stop+0x110>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	d107      	bne.n	8002f4a <HAL_TIM_PWM_Stop+0x9a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2101      	movs	r1, #1
 8002f46:	438a      	bics	r2, r1
 8002f48:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d104      	bne.n	8002f5a <HAL_TIM_PWM_Stop+0xaa>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	223e      	movs	r2, #62	@ 0x3e
 8002f54:	2101      	movs	r1, #1
 8002f56:	5499      	strb	r1, [r3, r2]
 8002f58:	e023      	b.n	8002fa2 <HAL_TIM_PWM_Stop+0xf2>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d104      	bne.n	8002f6a <HAL_TIM_PWM_Stop+0xba>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	223f      	movs	r2, #63	@ 0x3f
 8002f64:	2101      	movs	r1, #1
 8002f66:	5499      	strb	r1, [r3, r2]
 8002f68:	e01b      	b.n	8002fa2 <HAL_TIM_PWM_Stop+0xf2>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d104      	bne.n	8002f7a <HAL_TIM_PWM_Stop+0xca>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2240      	movs	r2, #64	@ 0x40
 8002f74:	2101      	movs	r1, #1
 8002f76:	5499      	strb	r1, [r3, r2]
 8002f78:	e013      	b.n	8002fa2 <HAL_TIM_PWM_Stop+0xf2>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	2b0c      	cmp	r3, #12
 8002f7e:	d104      	bne.n	8002f8a <HAL_TIM_PWM_Stop+0xda>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2241      	movs	r2, #65	@ 0x41
 8002f84:	2101      	movs	r1, #1
 8002f86:	5499      	strb	r1, [r3, r2]
 8002f88:	e00b      	b.n	8002fa2 <HAL_TIM_PWM_Stop+0xf2>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b10      	cmp	r3, #16
 8002f8e:	d104      	bne.n	8002f9a <HAL_TIM_PWM_Stop+0xea>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2242      	movs	r2, #66	@ 0x42
 8002f94:	2101      	movs	r1, #1
 8002f96:	5499      	strb	r1, [r3, r2]
 8002f98:	e003      	b.n	8002fa2 <HAL_TIM_PWM_Stop+0xf2>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2243      	movs	r2, #67	@ 0x43
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	b002      	add	sp, #8
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40012c00 	.word	0x40012c00
 8002fb0:	40014000 	.word	0x40014000
 8002fb4:	40014400 	.word	0x40014400
 8002fb8:	40014800 	.word	0x40014800
 8002fbc:	00001111 	.word	0x00001111
 8002fc0:	00000444 	.word	0x00000444
 8002fc4:	ffff7fff 	.word	0xffff7fff

08002fc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd4:	2317      	movs	r3, #23
 8002fd6:	18fb      	adds	r3, r7, r3
 8002fd8:	2200      	movs	r2, #0
 8002fda:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	223c      	movs	r2, #60	@ 0x3c
 8002fe0:	5c9b      	ldrb	r3, [r3, r2]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d101      	bne.n	8002fea <HAL_TIM_PWM_ConfigChannel+0x22>
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	e0e5      	b.n	80031b6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	223c      	movs	r2, #60	@ 0x3c
 8002fee:	2101      	movs	r1, #1
 8002ff0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b14      	cmp	r3, #20
 8002ff6:	d900      	bls.n	8002ffa <HAL_TIM_PWM_ConfigChannel+0x32>
 8002ff8:	e0d1      	b.n	800319e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	009a      	lsls	r2, r3, #2
 8002ffe:	4b70      	ldr	r3, [pc, #448]	@ (80031c0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003000:	18d3      	adds	r3, r2, r3
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	0011      	movs	r1, r2
 800300e:	0018      	movs	r0, r3
 8003010:	f000 f95e 	bl	80032d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	699a      	ldr	r2, [r3, #24]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2108      	movs	r1, #8
 8003020:	430a      	orrs	r2, r1
 8003022:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699a      	ldr	r2, [r3, #24]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2104      	movs	r1, #4
 8003030:	438a      	bics	r2, r1
 8003032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6999      	ldr	r1, [r3, #24]
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	691a      	ldr	r2, [r3, #16]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	619a      	str	r2, [r3, #24]
      break;
 8003046:	e0af      	b.n	80031a8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	0011      	movs	r1, r2
 8003050:	0018      	movs	r0, r3
 8003052:	f000 f9c7 	bl	80033e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	699a      	ldr	r2, [r3, #24]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2180      	movs	r1, #128	@ 0x80
 8003062:	0109      	lsls	r1, r1, #4
 8003064:	430a      	orrs	r2, r1
 8003066:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699a      	ldr	r2, [r3, #24]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4954      	ldr	r1, [pc, #336]	@ (80031c4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003074:	400a      	ands	r2, r1
 8003076:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6999      	ldr	r1, [r3, #24]
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	021a      	lsls	r2, r3, #8
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	619a      	str	r2, [r3, #24]
      break;
 800308c:	e08c      	b.n	80031a8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	0011      	movs	r1, r2
 8003096:	0018      	movs	r0, r3
 8003098:	f000 fa28 	bl	80034ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	69da      	ldr	r2, [r3, #28]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2108      	movs	r1, #8
 80030a8:	430a      	orrs	r2, r1
 80030aa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	69da      	ldr	r2, [r3, #28]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2104      	movs	r1, #4
 80030b8:	438a      	bics	r2, r1
 80030ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	69d9      	ldr	r1, [r3, #28]
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	691a      	ldr	r2, [r3, #16]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	61da      	str	r2, [r3, #28]
      break;
 80030ce:	e06b      	b.n	80031a8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	0011      	movs	r1, r2
 80030d8:	0018      	movs	r0, r3
 80030da:	f000 fa8f 	bl	80035fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	69da      	ldr	r2, [r3, #28]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2180      	movs	r1, #128	@ 0x80
 80030ea:	0109      	lsls	r1, r1, #4
 80030ec:	430a      	orrs	r2, r1
 80030ee:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	69da      	ldr	r2, [r3, #28]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4932      	ldr	r1, [pc, #200]	@ (80031c4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80030fc:	400a      	ands	r2, r1
 80030fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	69d9      	ldr	r1, [r3, #28]
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	021a      	lsls	r2, r3, #8
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	61da      	str	r2, [r3, #28]
      break;
 8003114:	e048      	b.n	80031a8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	0011      	movs	r1, r2
 800311e:	0018      	movs	r0, r3
 8003120:	f000 fad6 	bl	80036d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2108      	movs	r1, #8
 8003130:	430a      	orrs	r2, r1
 8003132:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2104      	movs	r1, #4
 8003140:	438a      	bics	r2, r1
 8003142:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	691a      	ldr	r2, [r3, #16]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003156:	e027      	b.n	80031a8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	0011      	movs	r1, r2
 8003160:	0018      	movs	r0, r3
 8003162:	f000 fb15 	bl	8003790 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2180      	movs	r1, #128	@ 0x80
 8003172:	0109      	lsls	r1, r1, #4
 8003174:	430a      	orrs	r2, r1
 8003176:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4910      	ldr	r1, [pc, #64]	@ (80031c4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003184:	400a      	ands	r2, r1
 8003186:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	021a      	lsls	r2, r3, #8
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800319c:	e004      	b.n	80031a8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800319e:	2317      	movs	r3, #23
 80031a0:	18fb      	adds	r3, r7, r3
 80031a2:	2201      	movs	r2, #1
 80031a4:	701a      	strb	r2, [r3, #0]
      break;
 80031a6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	223c      	movs	r2, #60	@ 0x3c
 80031ac:	2100      	movs	r1, #0
 80031ae:	5499      	strb	r1, [r3, r2]

  return status;
 80031b0:	2317      	movs	r3, #23
 80031b2:	18fb      	adds	r3, r7, r3
 80031b4:	781b      	ldrb	r3, [r3, #0]
}
 80031b6:	0018      	movs	r0, r3
 80031b8:	46bd      	mov	sp, r7
 80031ba:	b006      	add	sp, #24
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	46c0      	nop			@ (mov r8, r8)
 80031c0:	08004f20 	.word	0x08004f20
 80031c4:	fffffbff 	.word	0xfffffbff

080031c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a36      	ldr	r2, [pc, #216]	@ (80032b4 <TIM_Base_SetConfig+0xec>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d003      	beq.n	80031e8 <TIM_Base_SetConfig+0x20>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a35      	ldr	r2, [pc, #212]	@ (80032b8 <TIM_Base_SetConfig+0xf0>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d108      	bne.n	80031fa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2270      	movs	r2, #112	@ 0x70
 80031ec:	4393      	bics	r3, r2
 80031ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a2d      	ldr	r2, [pc, #180]	@ (80032b4 <TIM_Base_SetConfig+0xec>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d013      	beq.n	800322a <TIM_Base_SetConfig+0x62>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a2c      	ldr	r2, [pc, #176]	@ (80032b8 <TIM_Base_SetConfig+0xf0>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d00f      	beq.n	800322a <TIM_Base_SetConfig+0x62>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a2b      	ldr	r2, [pc, #172]	@ (80032bc <TIM_Base_SetConfig+0xf4>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d00b      	beq.n	800322a <TIM_Base_SetConfig+0x62>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a2a      	ldr	r2, [pc, #168]	@ (80032c0 <TIM_Base_SetConfig+0xf8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d007      	beq.n	800322a <TIM_Base_SetConfig+0x62>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a29      	ldr	r2, [pc, #164]	@ (80032c4 <TIM_Base_SetConfig+0xfc>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d003      	beq.n	800322a <TIM_Base_SetConfig+0x62>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a28      	ldr	r2, [pc, #160]	@ (80032c8 <TIM_Base_SetConfig+0x100>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d108      	bne.n	800323c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4a27      	ldr	r2, [pc, #156]	@ (80032cc <TIM_Base_SetConfig+0x104>)
 800322e:	4013      	ands	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4313      	orrs	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2280      	movs	r2, #128	@ 0x80
 8003240:	4393      	bics	r3, r2
 8003242:	001a      	movs	r2, r3
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	4313      	orrs	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a13      	ldr	r2, [pc, #76]	@ (80032b4 <TIM_Base_SetConfig+0xec>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d00b      	beq.n	8003282 <TIM_Base_SetConfig+0xba>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a14      	ldr	r2, [pc, #80]	@ (80032c0 <TIM_Base_SetConfig+0xf8>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d007      	beq.n	8003282 <TIM_Base_SetConfig+0xba>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a13      	ldr	r2, [pc, #76]	@ (80032c4 <TIM_Base_SetConfig+0xfc>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d003      	beq.n	8003282 <TIM_Base_SetConfig+0xba>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a12      	ldr	r2, [pc, #72]	@ (80032c8 <TIM_Base_SetConfig+0x100>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d103      	bne.n	800328a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	691a      	ldr	r2, [r3, #16]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	2201      	movs	r2, #1
 8003296:	4013      	ands	r3, r2
 8003298:	2b01      	cmp	r3, #1
 800329a:	d106      	bne.n	80032aa <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	2201      	movs	r2, #1
 80032a2:	4393      	bics	r3, r2
 80032a4:	001a      	movs	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	611a      	str	r2, [r3, #16]
  }
}
 80032aa:	46c0      	nop			@ (mov r8, r8)
 80032ac:	46bd      	mov	sp, r7
 80032ae:	b004      	add	sp, #16
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	46c0      	nop			@ (mov r8, r8)
 80032b4:	40012c00 	.word	0x40012c00
 80032b8:	40000400 	.word	0x40000400
 80032bc:	40002000 	.word	0x40002000
 80032c0:	40014000 	.word	0x40014000
 80032c4:	40014400 	.word	0x40014400
 80032c8:	40014800 	.word	0x40014800
 80032cc:	fffffcff 	.word	0xfffffcff

080032d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	2201      	movs	r2, #1
 80032e6:	4393      	bics	r3, r2
 80032e8:	001a      	movs	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4a32      	ldr	r2, [pc, #200]	@ (80033c8 <TIM_OC1_SetConfig+0xf8>)
 80032fe:	4013      	ands	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2203      	movs	r2, #3
 8003306:	4393      	bics	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4313      	orrs	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	2202      	movs	r2, #2
 8003318:	4393      	bics	r3, r2
 800331a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	4313      	orrs	r3, r2
 8003324:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a28      	ldr	r2, [pc, #160]	@ (80033cc <TIM_OC1_SetConfig+0xfc>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00b      	beq.n	8003346 <TIM_OC1_SetConfig+0x76>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a27      	ldr	r2, [pc, #156]	@ (80033d0 <TIM_OC1_SetConfig+0x100>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d007      	beq.n	8003346 <TIM_OC1_SetConfig+0x76>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a26      	ldr	r2, [pc, #152]	@ (80033d4 <TIM_OC1_SetConfig+0x104>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d003      	beq.n	8003346 <TIM_OC1_SetConfig+0x76>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a25      	ldr	r2, [pc, #148]	@ (80033d8 <TIM_OC1_SetConfig+0x108>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d10c      	bne.n	8003360 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2208      	movs	r2, #8
 800334a:	4393      	bics	r3, r2
 800334c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	4313      	orrs	r3, r2
 8003356:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	2204      	movs	r2, #4
 800335c:	4393      	bics	r3, r2
 800335e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a1a      	ldr	r2, [pc, #104]	@ (80033cc <TIM_OC1_SetConfig+0xfc>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d00b      	beq.n	8003380 <TIM_OC1_SetConfig+0xb0>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a19      	ldr	r2, [pc, #100]	@ (80033d0 <TIM_OC1_SetConfig+0x100>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d007      	beq.n	8003380 <TIM_OC1_SetConfig+0xb0>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a18      	ldr	r2, [pc, #96]	@ (80033d4 <TIM_OC1_SetConfig+0x104>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d003      	beq.n	8003380 <TIM_OC1_SetConfig+0xb0>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a17      	ldr	r2, [pc, #92]	@ (80033d8 <TIM_OC1_SetConfig+0x108>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d111      	bne.n	80033a4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	4a16      	ldr	r2, [pc, #88]	@ (80033dc <TIM_OC1_SetConfig+0x10c>)
 8003384:	4013      	ands	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4a15      	ldr	r2, [pc, #84]	@ (80033e0 <TIM_OC1_SetConfig+0x110>)
 800338c:	4013      	ands	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4313      	orrs	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	621a      	str	r2, [r3, #32]
}
 80033be:	46c0      	nop			@ (mov r8, r8)
 80033c0:	46bd      	mov	sp, r7
 80033c2:	b006      	add	sp, #24
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	46c0      	nop			@ (mov r8, r8)
 80033c8:	fffeff8f 	.word	0xfffeff8f
 80033cc:	40012c00 	.word	0x40012c00
 80033d0:	40014000 	.word	0x40014000
 80033d4:	40014400 	.word	0x40014400
 80033d8:	40014800 	.word	0x40014800
 80033dc:	fffffeff 	.word	0xfffffeff
 80033e0:	fffffdff 	.word	0xfffffdff

080033e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	2210      	movs	r2, #16
 80033fa:	4393      	bics	r3, r2
 80033fc:	001a      	movs	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4a2e      	ldr	r2, [pc, #184]	@ (80034cc <TIM_OC2_SetConfig+0xe8>)
 8003412:	4013      	ands	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4a2d      	ldr	r2, [pc, #180]	@ (80034d0 <TIM_OC2_SetConfig+0xec>)
 800341a:	4013      	ands	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	021b      	lsls	r3, r3, #8
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	4313      	orrs	r3, r2
 8003428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	2220      	movs	r2, #32
 800342e:	4393      	bics	r3, r2
 8003430:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	4313      	orrs	r3, r2
 800343c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a24      	ldr	r2, [pc, #144]	@ (80034d4 <TIM_OC2_SetConfig+0xf0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d10d      	bne.n	8003462 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	2280      	movs	r2, #128	@ 0x80
 800344a:	4393      	bics	r3, r2
 800344c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	4313      	orrs	r3, r2
 8003458:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2240      	movs	r2, #64	@ 0x40
 800345e:	4393      	bics	r3, r2
 8003460:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a1b      	ldr	r2, [pc, #108]	@ (80034d4 <TIM_OC2_SetConfig+0xf0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d00b      	beq.n	8003482 <TIM_OC2_SetConfig+0x9e>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a1a      	ldr	r2, [pc, #104]	@ (80034d8 <TIM_OC2_SetConfig+0xf4>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d007      	beq.n	8003482 <TIM_OC2_SetConfig+0x9e>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a19      	ldr	r2, [pc, #100]	@ (80034dc <TIM_OC2_SetConfig+0xf8>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d003      	beq.n	8003482 <TIM_OC2_SetConfig+0x9e>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a18      	ldr	r2, [pc, #96]	@ (80034e0 <TIM_OC2_SetConfig+0xfc>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d113      	bne.n	80034aa <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	4a17      	ldr	r2, [pc, #92]	@ (80034e4 <TIM_OC2_SetConfig+0x100>)
 8003486:	4013      	ands	r3, r2
 8003488:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	4a16      	ldr	r2, [pc, #88]	@ (80034e8 <TIM_OC2_SetConfig+0x104>)
 800348e:	4013      	ands	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4313      	orrs	r3, r2
 800349c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	621a      	str	r2, [r3, #32]
}
 80034c4:	46c0      	nop			@ (mov r8, r8)
 80034c6:	46bd      	mov	sp, r7
 80034c8:	b006      	add	sp, #24
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	feff8fff 	.word	0xfeff8fff
 80034d0:	fffffcff 	.word	0xfffffcff
 80034d4:	40012c00 	.word	0x40012c00
 80034d8:	40014000 	.word	0x40014000
 80034dc:	40014400 	.word	0x40014400
 80034e0:	40014800 	.word	0x40014800
 80034e4:	fffffbff 	.word	0xfffffbff
 80034e8:	fffff7ff 	.word	0xfffff7ff

080034ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	4a33      	ldr	r2, [pc, #204]	@ (80035d0 <TIM_OC3_SetConfig+0xe4>)
 8003502:	401a      	ands	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4a2f      	ldr	r2, [pc, #188]	@ (80035d4 <TIM_OC3_SetConfig+0xe8>)
 8003518:	4013      	ands	r3, r2
 800351a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2203      	movs	r2, #3
 8003520:	4393      	bics	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	4a29      	ldr	r2, [pc, #164]	@ (80035d8 <TIM_OC3_SetConfig+0xec>)
 8003532:	4013      	ands	r3, r2
 8003534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	021b      	lsls	r3, r3, #8
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	4313      	orrs	r3, r2
 8003540:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a25      	ldr	r2, [pc, #148]	@ (80035dc <TIM_OC3_SetConfig+0xf0>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d10d      	bne.n	8003566 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	4a24      	ldr	r2, [pc, #144]	@ (80035e0 <TIM_OC3_SetConfig+0xf4>)
 800354e:	4013      	ands	r3, r2
 8003550:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	021b      	lsls	r3, r3, #8
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	4313      	orrs	r3, r2
 800355c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	4a20      	ldr	r2, [pc, #128]	@ (80035e4 <TIM_OC3_SetConfig+0xf8>)
 8003562:	4013      	ands	r3, r2
 8003564:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a1c      	ldr	r2, [pc, #112]	@ (80035dc <TIM_OC3_SetConfig+0xf0>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00b      	beq.n	8003586 <TIM_OC3_SetConfig+0x9a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a1d      	ldr	r2, [pc, #116]	@ (80035e8 <TIM_OC3_SetConfig+0xfc>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d007      	beq.n	8003586 <TIM_OC3_SetConfig+0x9a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a1c      	ldr	r2, [pc, #112]	@ (80035ec <TIM_OC3_SetConfig+0x100>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d003      	beq.n	8003586 <TIM_OC3_SetConfig+0x9a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a1b      	ldr	r2, [pc, #108]	@ (80035f0 <TIM_OC3_SetConfig+0x104>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d113      	bne.n	80035ae <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	4a1a      	ldr	r2, [pc, #104]	@ (80035f4 <TIM_OC3_SetConfig+0x108>)
 800358a:	4013      	ands	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	4a19      	ldr	r2, [pc, #100]	@ (80035f8 <TIM_OC3_SetConfig+0x10c>)
 8003592:	4013      	ands	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	011b      	lsls	r3, r3, #4
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	621a      	str	r2, [r3, #32]
}
 80035c8:	46c0      	nop			@ (mov r8, r8)
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b006      	add	sp, #24
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	fffffeff 	.word	0xfffffeff
 80035d4:	fffeff8f 	.word	0xfffeff8f
 80035d8:	fffffdff 	.word	0xfffffdff
 80035dc:	40012c00 	.word	0x40012c00
 80035e0:	fffff7ff 	.word	0xfffff7ff
 80035e4:	fffffbff 	.word	0xfffffbff
 80035e8:	40014000 	.word	0x40014000
 80035ec:	40014400 	.word	0x40014400
 80035f0:	40014800 	.word	0x40014800
 80035f4:	ffffefff 	.word	0xffffefff
 80035f8:	ffffdfff 	.word	0xffffdfff

080035fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	4a26      	ldr	r2, [pc, #152]	@ (80036ac <TIM_OC4_SetConfig+0xb0>)
 8003612:	401a      	ands	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4a22      	ldr	r2, [pc, #136]	@ (80036b0 <TIM_OC4_SetConfig+0xb4>)
 8003628:	4013      	ands	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4a21      	ldr	r2, [pc, #132]	@ (80036b4 <TIM_OC4_SetConfig+0xb8>)
 8003630:	4013      	ands	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	021b      	lsls	r3, r3, #8
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	4313      	orrs	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	4a1d      	ldr	r2, [pc, #116]	@ (80036b8 <TIM_OC4_SetConfig+0xbc>)
 8003644:	4013      	ands	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	031b      	lsls	r3, r3, #12
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a19      	ldr	r2, [pc, #100]	@ (80036bc <TIM_OC4_SetConfig+0xc0>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d00b      	beq.n	8003674 <TIM_OC4_SetConfig+0x78>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a18      	ldr	r2, [pc, #96]	@ (80036c0 <TIM_OC4_SetConfig+0xc4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d007      	beq.n	8003674 <TIM_OC4_SetConfig+0x78>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a17      	ldr	r2, [pc, #92]	@ (80036c4 <TIM_OC4_SetConfig+0xc8>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d003      	beq.n	8003674 <TIM_OC4_SetConfig+0x78>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a16      	ldr	r2, [pc, #88]	@ (80036c8 <TIM_OC4_SetConfig+0xcc>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d109      	bne.n	8003688 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	4a15      	ldr	r2, [pc, #84]	@ (80036cc <TIM_OC4_SetConfig+0xd0>)
 8003678:	4013      	ands	r3, r2
 800367a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	019b      	lsls	r3, r3, #6
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	4313      	orrs	r3, r2
 8003686:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	621a      	str	r2, [r3, #32]
}
 80036a2:	46c0      	nop			@ (mov r8, r8)
 80036a4:	46bd      	mov	sp, r7
 80036a6:	b006      	add	sp, #24
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	46c0      	nop			@ (mov r8, r8)
 80036ac:	ffffefff 	.word	0xffffefff
 80036b0:	feff8fff 	.word	0xfeff8fff
 80036b4:	fffffcff 	.word	0xfffffcff
 80036b8:	ffffdfff 	.word	0xffffdfff
 80036bc:	40012c00 	.word	0x40012c00
 80036c0:	40014000 	.word	0x40014000
 80036c4:	40014400 	.word	0x40014400
 80036c8:	40014800 	.word	0x40014800
 80036cc:	ffffbfff 	.word	0xffffbfff

080036d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	4a23      	ldr	r2, [pc, #140]	@ (8003774 <TIM_OC5_SetConfig+0xa4>)
 80036e6:	401a      	ands	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4a1f      	ldr	r2, [pc, #124]	@ (8003778 <TIM_OC5_SetConfig+0xa8>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	4313      	orrs	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	4a1b      	ldr	r2, [pc, #108]	@ (800377c <TIM_OC5_SetConfig+0xac>)
 800370e:	4013      	ands	r3, r2
 8003710:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	041b      	lsls	r3, r3, #16
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	4313      	orrs	r3, r2
 800371c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a17      	ldr	r2, [pc, #92]	@ (8003780 <TIM_OC5_SetConfig+0xb0>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d00b      	beq.n	800373e <TIM_OC5_SetConfig+0x6e>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a16      	ldr	r2, [pc, #88]	@ (8003784 <TIM_OC5_SetConfig+0xb4>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d007      	beq.n	800373e <TIM_OC5_SetConfig+0x6e>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a15      	ldr	r2, [pc, #84]	@ (8003788 <TIM_OC5_SetConfig+0xb8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d003      	beq.n	800373e <TIM_OC5_SetConfig+0x6e>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a14      	ldr	r2, [pc, #80]	@ (800378c <TIM_OC5_SetConfig+0xbc>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d109      	bne.n	8003752 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	4a0c      	ldr	r2, [pc, #48]	@ (8003774 <TIM_OC5_SetConfig+0xa4>)
 8003742:	4013      	ands	r3, r2
 8003744:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	021b      	lsls	r3, r3, #8
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	4313      	orrs	r3, r2
 8003750:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	621a      	str	r2, [r3, #32]
}
 800376c:	46c0      	nop			@ (mov r8, r8)
 800376e:	46bd      	mov	sp, r7
 8003770:	b006      	add	sp, #24
 8003772:	bd80      	pop	{r7, pc}
 8003774:	fffeffff 	.word	0xfffeffff
 8003778:	fffeff8f 	.word	0xfffeff8f
 800377c:	fffdffff 	.word	0xfffdffff
 8003780:	40012c00 	.word	0x40012c00
 8003784:	40014000 	.word	0x40014000
 8003788:	40014400 	.word	0x40014400
 800378c:	40014800 	.word	0x40014800

08003790 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	4a24      	ldr	r2, [pc, #144]	@ (8003838 <TIM_OC6_SetConfig+0xa8>)
 80037a6:	401a      	ands	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4a20      	ldr	r2, [pc, #128]	@ (800383c <TIM_OC6_SetConfig+0xac>)
 80037bc:	4013      	ands	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	021b      	lsls	r3, r3, #8
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003840 <TIM_OC6_SetConfig+0xb0>)
 80037d0:	4013      	ands	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	051b      	lsls	r3, r3, #20
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	4313      	orrs	r3, r2
 80037de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a18      	ldr	r2, [pc, #96]	@ (8003844 <TIM_OC6_SetConfig+0xb4>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d00b      	beq.n	8003800 <TIM_OC6_SetConfig+0x70>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a17      	ldr	r2, [pc, #92]	@ (8003848 <TIM_OC6_SetConfig+0xb8>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d007      	beq.n	8003800 <TIM_OC6_SetConfig+0x70>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a16      	ldr	r2, [pc, #88]	@ (800384c <TIM_OC6_SetConfig+0xbc>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d003      	beq.n	8003800 <TIM_OC6_SetConfig+0x70>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a15      	ldr	r2, [pc, #84]	@ (8003850 <TIM_OC6_SetConfig+0xc0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d109      	bne.n	8003814 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	4a14      	ldr	r2, [pc, #80]	@ (8003854 <TIM_OC6_SetConfig+0xc4>)
 8003804:	4013      	ands	r3, r2
 8003806:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	029b      	lsls	r3, r3, #10
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	4313      	orrs	r3, r2
 8003812:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	621a      	str	r2, [r3, #32]
}
 800382e:	46c0      	nop			@ (mov r8, r8)
 8003830:	46bd      	mov	sp, r7
 8003832:	b006      	add	sp, #24
 8003834:	bd80      	pop	{r7, pc}
 8003836:	46c0      	nop			@ (mov r8, r8)
 8003838:	ffefffff 	.word	0xffefffff
 800383c:	feff8fff 	.word	0xfeff8fff
 8003840:	ffdfffff 	.word	0xffdfffff
 8003844:	40012c00 	.word	0x40012c00
 8003848:	40014000 	.word	0x40014000
 800384c:	40014400 	.word	0x40014400
 8003850:	40014800 	.word	0x40014800
 8003854:	fffbffff 	.word	0xfffbffff

08003858 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	221f      	movs	r2, #31
 8003868:	4013      	ands	r3, r2
 800386a:	2201      	movs	r2, #1
 800386c:	409a      	lsls	r2, r3
 800386e:	0013      	movs	r3, r2
 8003870:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	43d2      	mvns	r2, r2
 800387a:	401a      	ands	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a1a      	ldr	r2, [r3, #32]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	211f      	movs	r1, #31
 8003888:	400b      	ands	r3, r1
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	4099      	lsls	r1, r3
 800388e:	000b      	movs	r3, r1
 8003890:	431a      	orrs	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	621a      	str	r2, [r3, #32]
}
 8003896:	46c0      	nop			@ (mov r8, r8)
 8003898:	46bd      	mov	sp, r7
 800389a:	b006      	add	sp, #24
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	223c      	movs	r2, #60	@ 0x3c
 80038ae:	5c9b      	ldrb	r3, [r3, r2]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d101      	bne.n	80038b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038b4:	2302      	movs	r3, #2
 80038b6:	e04f      	b.n	8003958 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	223c      	movs	r2, #60	@ 0x3c
 80038bc:	2101      	movs	r1, #1
 80038be:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	223d      	movs	r2, #61	@ 0x3d
 80038c4:	2102      	movs	r1, #2
 80038c6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a20      	ldr	r2, [pc, #128]	@ (8003960 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d108      	bne.n	80038f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4a1f      	ldr	r2, [pc, #124]	@ (8003964 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80038e6:	4013      	ands	r3, r2
 80038e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2270      	movs	r2, #112	@ 0x70
 80038f8:	4393      	bics	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	4313      	orrs	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a13      	ldr	r2, [pc, #76]	@ (8003960 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d009      	beq.n	800392c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a12      	ldr	r2, [pc, #72]	@ (8003968 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d004      	beq.n	800392c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a11      	ldr	r2, [pc, #68]	@ (800396c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d10c      	bne.n	8003946 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2280      	movs	r2, #128	@ 0x80
 8003930:	4393      	bics	r3, r2
 8003932:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	4313      	orrs	r3, r2
 800393c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	223d      	movs	r2, #61	@ 0x3d
 800394a:	2101      	movs	r1, #1
 800394c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	223c      	movs	r2, #60	@ 0x3c
 8003952:	2100      	movs	r1, #0
 8003954:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	0018      	movs	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	b004      	add	sp, #16
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40012c00 	.word	0x40012c00
 8003964:	ff0fffff 	.word	0xff0fffff
 8003968:	40000400 	.word	0x40000400
 800396c:	40014000 	.word	0x40014000

08003970 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800397a:	2300      	movs	r3, #0
 800397c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	223c      	movs	r2, #60	@ 0x3c
 8003982:	5c9b      	ldrb	r3, [r3, r2]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d101      	bne.n	800398c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003988:	2302      	movs	r3, #2
 800398a:	e06f      	b.n	8003a6c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	223c      	movs	r2, #60	@ 0x3c
 8003990:	2101      	movs	r1, #1
 8003992:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	22ff      	movs	r2, #255	@ 0xff
 8003998:	4393      	bics	r3, r2
 800399a:	001a      	movs	r2, r3
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4a33      	ldr	r2, [pc, #204]	@ (8003a74 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80039a8:	401a      	ands	r2, r3
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	4a30      	ldr	r2, [pc, #192]	@ (8003a78 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80039b6:	401a      	ands	r2, r3
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	4313      	orrs	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4a2e      	ldr	r2, [pc, #184]	@ (8003a7c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80039c4:	401a      	ands	r2, r3
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	4a2b      	ldr	r2, [pc, #172]	@ (8003a80 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80039d2:	401a      	ands	r2, r3
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4a29      	ldr	r2, [pc, #164]	@ (8003a84 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80039e0:	401a      	ands	r2, r3
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4a26      	ldr	r2, [pc, #152]	@ (8003a88 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80039ee:	401a      	ands	r2, r3
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4a24      	ldr	r2, [pc, #144]	@ (8003a8c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80039fc:	401a      	ands	r2, r3
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	041b      	lsls	r3, r3, #16
 8003a04:	4313      	orrs	r3, r2
 8003a06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4a21      	ldr	r2, [pc, #132]	@ (8003a90 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003a0c:	401a      	ands	r2, r3
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a1e      	ldr	r2, [pc, #120]	@ (8003a94 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d11c      	bne.n	8003a5a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4a1d      	ldr	r2, [pc, #116]	@ (8003a98 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003a24:	401a      	ands	r2, r3
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a2a:	051b      	lsls	r3, r3, #20
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4a1a      	ldr	r2, [pc, #104]	@ (8003a9c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003a34:	401a      	ands	r2, r3
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4a17      	ldr	r2, [pc, #92]	@ (8003aa0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003a42:	401a      	ands	r2, r3
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4a15      	ldr	r2, [pc, #84]	@ (8003aa4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003a50:	401a      	ands	r2, r3
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	223c      	movs	r2, #60	@ 0x3c
 8003a66:	2100      	movs	r1, #0
 8003a68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	b004      	add	sp, #16
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	fffffcff 	.word	0xfffffcff
 8003a78:	fffffbff 	.word	0xfffffbff
 8003a7c:	fffff7ff 	.word	0xfffff7ff
 8003a80:	ffffefff 	.word	0xffffefff
 8003a84:	ffffdfff 	.word	0xffffdfff
 8003a88:	ffffbfff 	.word	0xffffbfff
 8003a8c:	fff0ffff 	.word	0xfff0ffff
 8003a90:	efffffff 	.word	0xefffffff
 8003a94:	40012c00 	.word	0x40012c00
 8003a98:	ff0fffff 	.word	0xff0fffff
 8003a9c:	feffffff 	.word	0xfeffffff
 8003aa0:	fdffffff 	.word	0xfdffffff
 8003aa4:	dfffffff 	.word	0xdfffffff

08003aa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e046      	b.n	8003b48 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2288      	movs	r2, #136	@ 0x88
 8003abe:	589b      	ldr	r3, [r3, r2]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d107      	bne.n	8003ad4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2284      	movs	r2, #132	@ 0x84
 8003ac8:	2100      	movs	r1, #0
 8003aca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	0018      	movs	r0, r3
 8003ad0:	f7fd f88e 	bl	8000bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2288      	movs	r2, #136	@ 0x88
 8003ad8:	2124      	movs	r1, #36	@ 0x24
 8003ada:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	438a      	bics	r2, r1
 8003aea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	0018      	movs	r0, r3
 8003af8:	f000 f9d0 	bl	8003e9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	0018      	movs	r0, r3
 8003b00:	f000 f828 	bl	8003b54 <UART_SetConfig>
 8003b04:	0003      	movs	r3, r0
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d101      	bne.n	8003b0e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e01c      	b.n	8003b48 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	490d      	ldr	r1, [pc, #52]	@ (8003b50 <HAL_UART_Init+0xa8>)
 8003b1a:	400a      	ands	r2, r1
 8003b1c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	212a      	movs	r1, #42	@ 0x2a
 8003b2a:	438a      	bics	r2, r1
 8003b2c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2101      	movs	r1, #1
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	0018      	movs	r0, r3
 8003b42:	f000 fa5f 	bl	8004004 <UART_CheckIdleState>
 8003b46:	0003      	movs	r3, r0
}
 8003b48:	0018      	movs	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	b002      	add	sp, #8
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	ffffb7ff 	.word	0xffffb7ff

08003b54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b5c:	231a      	movs	r3, #26
 8003b5e:	18fb      	adds	r3, r7, r3
 8003b60:	2200      	movs	r2, #0
 8003b62:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4abc      	ldr	r2, [pc, #752]	@ (8003e74 <UART_SetConfig+0x320>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	0019      	movs	r1, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	69fa      	ldr	r2, [r7, #28]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	4ab7      	ldr	r2, [pc, #732]	@ (8003e78 <UART_SetConfig+0x324>)
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	0019      	movs	r1, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	69fa      	ldr	r2, [r7, #28]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	4aae      	ldr	r2, [pc, #696]	@ (8003e7c <UART_SetConfig+0x328>)
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	0019      	movs	r1, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	69fa      	ldr	r2, [r7, #28]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd6:	220f      	movs	r2, #15
 8003bd8:	4393      	bics	r3, r2
 8003bda:	0019      	movs	r1, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4aa4      	ldr	r2, [pc, #656]	@ (8003e80 <UART_SetConfig+0x32c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d127      	bne.n	8003c42 <UART_SetConfig+0xee>
 8003bf2:	4ba4      	ldr	r3, [pc, #656]	@ (8003e84 <UART_SetConfig+0x330>)
 8003bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf6:	2203      	movs	r2, #3
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	d017      	beq.n	8003c2e <UART_SetConfig+0xda>
 8003bfe:	d81b      	bhi.n	8003c38 <UART_SetConfig+0xe4>
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d00a      	beq.n	8003c1a <UART_SetConfig+0xc6>
 8003c04:	d818      	bhi.n	8003c38 <UART_SetConfig+0xe4>
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <UART_SetConfig+0xbc>
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d00a      	beq.n	8003c24 <UART_SetConfig+0xd0>
 8003c0e:	e013      	b.n	8003c38 <UART_SetConfig+0xe4>
 8003c10:	231b      	movs	r3, #27
 8003c12:	18fb      	adds	r3, r7, r3
 8003c14:	2200      	movs	r2, #0
 8003c16:	701a      	strb	r2, [r3, #0]
 8003c18:	e058      	b.n	8003ccc <UART_SetConfig+0x178>
 8003c1a:	231b      	movs	r3, #27
 8003c1c:	18fb      	adds	r3, r7, r3
 8003c1e:	2202      	movs	r2, #2
 8003c20:	701a      	strb	r2, [r3, #0]
 8003c22:	e053      	b.n	8003ccc <UART_SetConfig+0x178>
 8003c24:	231b      	movs	r3, #27
 8003c26:	18fb      	adds	r3, r7, r3
 8003c28:	2204      	movs	r2, #4
 8003c2a:	701a      	strb	r2, [r3, #0]
 8003c2c:	e04e      	b.n	8003ccc <UART_SetConfig+0x178>
 8003c2e:	231b      	movs	r3, #27
 8003c30:	18fb      	adds	r3, r7, r3
 8003c32:	2208      	movs	r2, #8
 8003c34:	701a      	strb	r2, [r3, #0]
 8003c36:	e049      	b.n	8003ccc <UART_SetConfig+0x178>
 8003c38:	231b      	movs	r3, #27
 8003c3a:	18fb      	adds	r3, r7, r3
 8003c3c:	2210      	movs	r2, #16
 8003c3e:	701a      	strb	r2, [r3, #0]
 8003c40:	e044      	b.n	8003ccc <UART_SetConfig+0x178>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a90      	ldr	r2, [pc, #576]	@ (8003e88 <UART_SetConfig+0x334>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d127      	bne.n	8003c9c <UART_SetConfig+0x148>
 8003c4c:	4b8d      	ldr	r3, [pc, #564]	@ (8003e84 <UART_SetConfig+0x330>)
 8003c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c50:	220c      	movs	r2, #12
 8003c52:	4013      	ands	r3, r2
 8003c54:	2b0c      	cmp	r3, #12
 8003c56:	d017      	beq.n	8003c88 <UART_SetConfig+0x134>
 8003c58:	d81b      	bhi.n	8003c92 <UART_SetConfig+0x13e>
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d00a      	beq.n	8003c74 <UART_SetConfig+0x120>
 8003c5e:	d818      	bhi.n	8003c92 <UART_SetConfig+0x13e>
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d002      	beq.n	8003c6a <UART_SetConfig+0x116>
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d00a      	beq.n	8003c7e <UART_SetConfig+0x12a>
 8003c68:	e013      	b.n	8003c92 <UART_SetConfig+0x13e>
 8003c6a:	231b      	movs	r3, #27
 8003c6c:	18fb      	adds	r3, r7, r3
 8003c6e:	2200      	movs	r2, #0
 8003c70:	701a      	strb	r2, [r3, #0]
 8003c72:	e02b      	b.n	8003ccc <UART_SetConfig+0x178>
 8003c74:	231b      	movs	r3, #27
 8003c76:	18fb      	adds	r3, r7, r3
 8003c78:	2202      	movs	r2, #2
 8003c7a:	701a      	strb	r2, [r3, #0]
 8003c7c:	e026      	b.n	8003ccc <UART_SetConfig+0x178>
 8003c7e:	231b      	movs	r3, #27
 8003c80:	18fb      	adds	r3, r7, r3
 8003c82:	2204      	movs	r2, #4
 8003c84:	701a      	strb	r2, [r3, #0]
 8003c86:	e021      	b.n	8003ccc <UART_SetConfig+0x178>
 8003c88:	231b      	movs	r3, #27
 8003c8a:	18fb      	adds	r3, r7, r3
 8003c8c:	2208      	movs	r2, #8
 8003c8e:	701a      	strb	r2, [r3, #0]
 8003c90:	e01c      	b.n	8003ccc <UART_SetConfig+0x178>
 8003c92:	231b      	movs	r3, #27
 8003c94:	18fb      	adds	r3, r7, r3
 8003c96:	2210      	movs	r2, #16
 8003c98:	701a      	strb	r2, [r3, #0]
 8003c9a:	e017      	b.n	8003ccc <UART_SetConfig+0x178>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a7a      	ldr	r2, [pc, #488]	@ (8003e8c <UART_SetConfig+0x338>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d104      	bne.n	8003cb0 <UART_SetConfig+0x15c>
 8003ca6:	231b      	movs	r3, #27
 8003ca8:	18fb      	adds	r3, r7, r3
 8003caa:	2200      	movs	r2, #0
 8003cac:	701a      	strb	r2, [r3, #0]
 8003cae:	e00d      	b.n	8003ccc <UART_SetConfig+0x178>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a76      	ldr	r2, [pc, #472]	@ (8003e90 <UART_SetConfig+0x33c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d104      	bne.n	8003cc4 <UART_SetConfig+0x170>
 8003cba:	231b      	movs	r3, #27
 8003cbc:	18fb      	adds	r3, r7, r3
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	701a      	strb	r2, [r3, #0]
 8003cc2:	e003      	b.n	8003ccc <UART_SetConfig+0x178>
 8003cc4:	231b      	movs	r3, #27
 8003cc6:	18fb      	adds	r3, r7, r3
 8003cc8:	2210      	movs	r2, #16
 8003cca:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	69da      	ldr	r2, [r3, #28]
 8003cd0:	2380      	movs	r3, #128	@ 0x80
 8003cd2:	021b      	lsls	r3, r3, #8
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d000      	beq.n	8003cda <UART_SetConfig+0x186>
 8003cd8:	e065      	b.n	8003da6 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8003cda:	231b      	movs	r3, #27
 8003cdc:	18fb      	adds	r3, r7, r3
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d015      	beq.n	8003d10 <UART_SetConfig+0x1bc>
 8003ce4:	dc18      	bgt.n	8003d18 <UART_SetConfig+0x1c4>
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d00d      	beq.n	8003d06 <UART_SetConfig+0x1b2>
 8003cea:	dc15      	bgt.n	8003d18 <UART_SetConfig+0x1c4>
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <UART_SetConfig+0x1a2>
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d005      	beq.n	8003d00 <UART_SetConfig+0x1ac>
 8003cf4:	e010      	b.n	8003d18 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cf6:	f7fe fe55 	bl	80029a4 <HAL_RCC_GetPCLK1Freq>
 8003cfa:	0003      	movs	r3, r0
 8003cfc:	617b      	str	r3, [r7, #20]
        break;
 8003cfe:	e012      	b.n	8003d26 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d00:	4b64      	ldr	r3, [pc, #400]	@ (8003e94 <UART_SetConfig+0x340>)
 8003d02:	617b      	str	r3, [r7, #20]
        break;
 8003d04:	e00f      	b.n	8003d26 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d06:	f7fe fdc1 	bl	800288c <HAL_RCC_GetSysClockFreq>
 8003d0a:	0003      	movs	r3, r0
 8003d0c:	617b      	str	r3, [r7, #20]
        break;
 8003d0e:	e00a      	b.n	8003d26 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d10:	2380      	movs	r3, #128	@ 0x80
 8003d12:	021b      	lsls	r3, r3, #8
 8003d14:	617b      	str	r3, [r7, #20]
        break;
 8003d16:	e006      	b.n	8003d26 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d1c:	231a      	movs	r3, #26
 8003d1e:	18fb      	adds	r3, r7, r3
 8003d20:	2201      	movs	r2, #1
 8003d22:	701a      	strb	r2, [r3, #0]
        break;
 8003d24:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d100      	bne.n	8003d2e <UART_SetConfig+0x1da>
 8003d2c:	e08d      	b.n	8003e4a <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d32:	4b59      	ldr	r3, [pc, #356]	@ (8003e98 <UART_SetConfig+0x344>)
 8003d34:	0052      	lsls	r2, r2, #1
 8003d36:	5ad3      	ldrh	r3, [r2, r3]
 8003d38:	0019      	movs	r1, r3
 8003d3a:	6978      	ldr	r0, [r7, #20]
 8003d3c:	f7fc f9ea 	bl	8000114 <__udivsi3>
 8003d40:	0003      	movs	r3, r0
 8003d42:	005a      	lsls	r2, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	085b      	lsrs	r3, r3, #1
 8003d4a:	18d2      	adds	r2, r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	0019      	movs	r1, r3
 8003d52:	0010      	movs	r0, r2
 8003d54:	f7fc f9de 	bl	8000114 <__udivsi3>
 8003d58:	0003      	movs	r3, r0
 8003d5a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	2b0f      	cmp	r3, #15
 8003d60:	d91c      	bls.n	8003d9c <UART_SetConfig+0x248>
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	2380      	movs	r3, #128	@ 0x80
 8003d66:	025b      	lsls	r3, r3, #9
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d217      	bcs.n	8003d9c <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	200e      	movs	r0, #14
 8003d72:	183b      	adds	r3, r7, r0
 8003d74:	210f      	movs	r1, #15
 8003d76:	438a      	bics	r2, r1
 8003d78:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	085b      	lsrs	r3, r3, #1
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	2207      	movs	r2, #7
 8003d82:	4013      	ands	r3, r2
 8003d84:	b299      	uxth	r1, r3
 8003d86:	183b      	adds	r3, r7, r0
 8003d88:	183a      	adds	r2, r7, r0
 8003d8a:	8812      	ldrh	r2, [r2, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	183a      	adds	r2, r7, r0
 8003d96:	8812      	ldrh	r2, [r2, #0]
 8003d98:	60da      	str	r2, [r3, #12]
 8003d9a:	e056      	b.n	8003e4a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003d9c:	231a      	movs	r3, #26
 8003d9e:	18fb      	adds	r3, r7, r3
 8003da0:	2201      	movs	r2, #1
 8003da2:	701a      	strb	r2, [r3, #0]
 8003da4:	e051      	b.n	8003e4a <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003da6:	231b      	movs	r3, #27
 8003da8:	18fb      	adds	r3, r7, r3
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d015      	beq.n	8003ddc <UART_SetConfig+0x288>
 8003db0:	dc18      	bgt.n	8003de4 <UART_SetConfig+0x290>
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d00d      	beq.n	8003dd2 <UART_SetConfig+0x27e>
 8003db6:	dc15      	bgt.n	8003de4 <UART_SetConfig+0x290>
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d002      	beq.n	8003dc2 <UART_SetConfig+0x26e>
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d005      	beq.n	8003dcc <UART_SetConfig+0x278>
 8003dc0:	e010      	b.n	8003de4 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dc2:	f7fe fdef 	bl	80029a4 <HAL_RCC_GetPCLK1Freq>
 8003dc6:	0003      	movs	r3, r0
 8003dc8:	617b      	str	r3, [r7, #20]
        break;
 8003dca:	e012      	b.n	8003df2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dcc:	4b31      	ldr	r3, [pc, #196]	@ (8003e94 <UART_SetConfig+0x340>)
 8003dce:	617b      	str	r3, [r7, #20]
        break;
 8003dd0:	e00f      	b.n	8003df2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dd2:	f7fe fd5b 	bl	800288c <HAL_RCC_GetSysClockFreq>
 8003dd6:	0003      	movs	r3, r0
 8003dd8:	617b      	str	r3, [r7, #20]
        break;
 8003dda:	e00a      	b.n	8003df2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ddc:	2380      	movs	r3, #128	@ 0x80
 8003dde:	021b      	lsls	r3, r3, #8
 8003de0:	617b      	str	r3, [r7, #20]
        break;
 8003de2:	e006      	b.n	8003df2 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003de8:	231a      	movs	r3, #26
 8003dea:	18fb      	adds	r3, r7, r3
 8003dec:	2201      	movs	r2, #1
 8003dee:	701a      	strb	r2, [r3, #0]
        break;
 8003df0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d028      	beq.n	8003e4a <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003dfc:	4b26      	ldr	r3, [pc, #152]	@ (8003e98 <UART_SetConfig+0x344>)
 8003dfe:	0052      	lsls	r2, r2, #1
 8003e00:	5ad3      	ldrh	r3, [r2, r3]
 8003e02:	0019      	movs	r1, r3
 8003e04:	6978      	ldr	r0, [r7, #20]
 8003e06:	f7fc f985 	bl	8000114 <__udivsi3>
 8003e0a:	0003      	movs	r3, r0
 8003e0c:	001a      	movs	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	085b      	lsrs	r3, r3, #1
 8003e14:	18d2      	adds	r2, r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	0019      	movs	r1, r3
 8003e1c:	0010      	movs	r0, r2
 8003e1e:	f7fc f979 	bl	8000114 <__udivsi3>
 8003e22:	0003      	movs	r3, r0
 8003e24:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	2b0f      	cmp	r3, #15
 8003e2a:	d90a      	bls.n	8003e42 <UART_SetConfig+0x2ee>
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	2380      	movs	r3, #128	@ 0x80
 8003e30:	025b      	lsls	r3, r3, #9
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d205      	bcs.n	8003e42 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	60da      	str	r2, [r3, #12]
 8003e40:	e003      	b.n	8003e4a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003e42:	231a      	movs	r3, #26
 8003e44:	18fb      	adds	r3, r7, r3
 8003e46:	2201      	movs	r2, #1
 8003e48:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	226a      	movs	r2, #106	@ 0x6a
 8003e4e:	2101      	movs	r1, #1
 8003e50:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2268      	movs	r2, #104	@ 0x68
 8003e56:	2101      	movs	r1, #1
 8003e58:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003e66:	231a      	movs	r3, #26
 8003e68:	18fb      	adds	r3, r7, r3
 8003e6a:	781b      	ldrb	r3, [r3, #0]
}
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	b008      	add	sp, #32
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	cfff69f3 	.word	0xcfff69f3
 8003e78:	ffffcfff 	.word	0xffffcfff
 8003e7c:	11fff4ff 	.word	0x11fff4ff
 8003e80:	40013800 	.word	0x40013800
 8003e84:	40021000 	.word	0x40021000
 8003e88:	40004400 	.word	0x40004400
 8003e8c:	40004800 	.word	0x40004800
 8003e90:	40004c00 	.word	0x40004c00
 8003e94:	00f42400 	.word	0x00f42400
 8003e98:	08004f74 	.word	0x08004f74

08003e9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea8:	2208      	movs	r2, #8
 8003eaa:	4013      	ands	r3, r2
 8003eac:	d00b      	beq.n	8003ec6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	4a4a      	ldr	r2, [pc, #296]	@ (8003fe0 <UART_AdvFeatureConfig+0x144>)
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	0019      	movs	r1, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eca:	2201      	movs	r2, #1
 8003ecc:	4013      	ands	r3, r2
 8003ece:	d00b      	beq.n	8003ee8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	4a43      	ldr	r2, [pc, #268]	@ (8003fe4 <UART_AdvFeatureConfig+0x148>)
 8003ed8:	4013      	ands	r3, r2
 8003eda:	0019      	movs	r1, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eec:	2202      	movs	r2, #2
 8003eee:	4013      	ands	r3, r2
 8003ef0:	d00b      	beq.n	8003f0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	4a3b      	ldr	r2, [pc, #236]	@ (8003fe8 <UART_AdvFeatureConfig+0x14c>)
 8003efa:	4013      	ands	r3, r2
 8003efc:	0019      	movs	r1, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0e:	2204      	movs	r2, #4
 8003f10:	4013      	ands	r3, r2
 8003f12:	d00b      	beq.n	8003f2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	4a34      	ldr	r2, [pc, #208]	@ (8003fec <UART_AdvFeatureConfig+0x150>)
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	0019      	movs	r1, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f30:	2210      	movs	r2, #16
 8003f32:	4013      	ands	r3, r2
 8003f34:	d00b      	beq.n	8003f4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	4a2c      	ldr	r2, [pc, #176]	@ (8003ff0 <UART_AdvFeatureConfig+0x154>)
 8003f3e:	4013      	ands	r3, r2
 8003f40:	0019      	movs	r1, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f52:	2220      	movs	r2, #32
 8003f54:	4013      	ands	r3, r2
 8003f56:	d00b      	beq.n	8003f70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	4a25      	ldr	r2, [pc, #148]	@ (8003ff4 <UART_AdvFeatureConfig+0x158>)
 8003f60:	4013      	ands	r3, r2
 8003f62:	0019      	movs	r1, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f74:	2240      	movs	r2, #64	@ 0x40
 8003f76:	4013      	ands	r3, r2
 8003f78:	d01d      	beq.n	8003fb6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	4a1d      	ldr	r2, [pc, #116]	@ (8003ff8 <UART_AdvFeatureConfig+0x15c>)
 8003f82:	4013      	ands	r3, r2
 8003f84:	0019      	movs	r1, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f96:	2380      	movs	r3, #128	@ 0x80
 8003f98:	035b      	lsls	r3, r3, #13
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d10b      	bne.n	8003fb6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	4a15      	ldr	r2, [pc, #84]	@ (8003ffc <UART_AdvFeatureConfig+0x160>)
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	0019      	movs	r1, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fba:	2280      	movs	r2, #128	@ 0x80
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	d00b      	beq.n	8003fd8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	4a0e      	ldr	r2, [pc, #56]	@ (8004000 <UART_AdvFeatureConfig+0x164>)
 8003fc8:	4013      	ands	r3, r2
 8003fca:	0019      	movs	r1, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	605a      	str	r2, [r3, #4]
  }
}
 8003fd8:	46c0      	nop			@ (mov r8, r8)
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	b002      	add	sp, #8
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	ffff7fff 	.word	0xffff7fff
 8003fe4:	fffdffff 	.word	0xfffdffff
 8003fe8:	fffeffff 	.word	0xfffeffff
 8003fec:	fffbffff 	.word	0xfffbffff
 8003ff0:	ffffefff 	.word	0xffffefff
 8003ff4:	ffffdfff 	.word	0xffffdfff
 8003ff8:	ffefffff 	.word	0xffefffff
 8003ffc:	ff9fffff 	.word	0xff9fffff
 8004000:	fff7ffff 	.word	0xfff7ffff

08004004 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b092      	sub	sp, #72	@ 0x48
 8004008:	af02      	add	r7, sp, #8
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2290      	movs	r2, #144	@ 0x90
 8004010:	2100      	movs	r1, #0
 8004012:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004014:	f7fc ff48 	bl	8000ea8 <HAL_GetTick>
 8004018:	0003      	movs	r3, r0
 800401a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2208      	movs	r2, #8
 8004024:	4013      	ands	r3, r2
 8004026:	2b08      	cmp	r3, #8
 8004028:	d12d      	bne.n	8004086 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800402a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800402c:	2280      	movs	r2, #128	@ 0x80
 800402e:	0391      	lsls	r1, r2, #14
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	4a47      	ldr	r2, [pc, #284]	@ (8004150 <UART_CheckIdleState+0x14c>)
 8004034:	9200      	str	r2, [sp, #0]
 8004036:	2200      	movs	r2, #0
 8004038:	f000 f88e 	bl	8004158 <UART_WaitOnFlagUntilTimeout>
 800403c:	1e03      	subs	r3, r0, #0
 800403e:	d022      	beq.n	8004086 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004040:	f3ef 8310 	mrs	r3, PRIMASK
 8004044:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004048:	63bb      	str	r3, [r7, #56]	@ 0x38
 800404a:	2301      	movs	r3, #1
 800404c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800404e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004050:	f383 8810 	msr	PRIMASK, r3
}
 8004054:	46c0      	nop			@ (mov r8, r8)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2180      	movs	r1, #128	@ 0x80
 8004062:	438a      	bics	r2, r1
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004068:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800406a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800406c:	f383 8810 	msr	PRIMASK, r3
}
 8004070:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2288      	movs	r2, #136	@ 0x88
 8004076:	2120      	movs	r1, #32
 8004078:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2284      	movs	r2, #132	@ 0x84
 800407e:	2100      	movs	r1, #0
 8004080:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e060      	b.n	8004148 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2204      	movs	r2, #4
 800408e:	4013      	ands	r3, r2
 8004090:	2b04      	cmp	r3, #4
 8004092:	d146      	bne.n	8004122 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004094:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004096:	2280      	movs	r2, #128	@ 0x80
 8004098:	03d1      	lsls	r1, r2, #15
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	4a2c      	ldr	r2, [pc, #176]	@ (8004150 <UART_CheckIdleState+0x14c>)
 800409e:	9200      	str	r2, [sp, #0]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f000 f859 	bl	8004158 <UART_WaitOnFlagUntilTimeout>
 80040a6:	1e03      	subs	r3, r0, #0
 80040a8:	d03b      	beq.n	8004122 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040aa:	f3ef 8310 	mrs	r3, PRIMASK
 80040ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80040b0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80040b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80040b4:	2301      	movs	r3, #1
 80040b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	f383 8810 	msr	PRIMASK, r3
}
 80040be:	46c0      	nop			@ (mov r8, r8)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4922      	ldr	r1, [pc, #136]	@ (8004154 <UART_CheckIdleState+0x150>)
 80040cc:	400a      	ands	r2, r1
 80040ce:	601a      	str	r2, [r3, #0]
 80040d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f383 8810 	msr	PRIMASK, r3
}
 80040da:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040dc:	f3ef 8310 	mrs	r3, PRIMASK
 80040e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80040e2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80040e6:	2301      	movs	r3, #1
 80040e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	f383 8810 	msr	PRIMASK, r3
}
 80040f0:	46c0      	nop			@ (mov r8, r8)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2101      	movs	r1, #1
 80040fe:	438a      	bics	r2, r1
 8004100:	609a      	str	r2, [r3, #8]
 8004102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004104:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	f383 8810 	msr	PRIMASK, r3
}
 800410c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	228c      	movs	r2, #140	@ 0x8c
 8004112:	2120      	movs	r1, #32
 8004114:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2284      	movs	r2, #132	@ 0x84
 800411a:	2100      	movs	r1, #0
 800411c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e012      	b.n	8004148 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2288      	movs	r2, #136	@ 0x88
 8004126:	2120      	movs	r1, #32
 8004128:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	228c      	movs	r2, #140	@ 0x8c
 800412e:	2120      	movs	r1, #32
 8004130:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2284      	movs	r2, #132	@ 0x84
 8004142:	2100      	movs	r1, #0
 8004144:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	0018      	movs	r0, r3
 800414a:	46bd      	mov	sp, r7
 800414c:	b010      	add	sp, #64	@ 0x40
 800414e:	bd80      	pop	{r7, pc}
 8004150:	01ffffff 	.word	0x01ffffff
 8004154:	fffffedf 	.word	0xfffffedf

08004158 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	603b      	str	r3, [r7, #0]
 8004164:	1dfb      	adds	r3, r7, #7
 8004166:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004168:	e051      	b.n	800420e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	3301      	adds	r3, #1
 800416e:	d04e      	beq.n	800420e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004170:	f7fc fe9a 	bl	8000ea8 <HAL_GetTick>
 8004174:	0002      	movs	r2, r0
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	429a      	cmp	r2, r3
 800417e:	d302      	bcc.n	8004186 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e051      	b.n	800422e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2204      	movs	r2, #4
 8004192:	4013      	ands	r3, r2
 8004194:	d03b      	beq.n	800420e <UART_WaitOnFlagUntilTimeout+0xb6>
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	2b80      	cmp	r3, #128	@ 0x80
 800419a:	d038      	beq.n	800420e <UART_WaitOnFlagUntilTimeout+0xb6>
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	2b40      	cmp	r3, #64	@ 0x40
 80041a0:	d035      	beq.n	800420e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	2208      	movs	r2, #8
 80041aa:	4013      	ands	r3, r2
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	d111      	bne.n	80041d4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2208      	movs	r2, #8
 80041b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	0018      	movs	r0, r3
 80041bc:	f000 f83c 	bl	8004238 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2290      	movs	r2, #144	@ 0x90
 80041c4:	2108      	movs	r1, #8
 80041c6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2284      	movs	r2, #132	@ 0x84
 80041cc:	2100      	movs	r1, #0
 80041ce:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e02c      	b.n	800422e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	69da      	ldr	r2, [r3, #28]
 80041da:	2380      	movs	r3, #128	@ 0x80
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	401a      	ands	r2, r3
 80041e0:	2380      	movs	r3, #128	@ 0x80
 80041e2:	011b      	lsls	r3, r3, #4
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d112      	bne.n	800420e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2280      	movs	r2, #128	@ 0x80
 80041ee:	0112      	lsls	r2, r2, #4
 80041f0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	0018      	movs	r0, r3
 80041f6:	f000 f81f 	bl	8004238 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2290      	movs	r2, #144	@ 0x90
 80041fe:	2120      	movs	r1, #32
 8004200:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2284      	movs	r2, #132	@ 0x84
 8004206:	2100      	movs	r1, #0
 8004208:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e00f      	b.n	800422e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	4013      	ands	r3, r2
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	425a      	negs	r2, r3
 800421e:	4153      	adcs	r3, r2
 8004220:	b2db      	uxtb	r3, r3
 8004222:	001a      	movs	r2, r3
 8004224:	1dfb      	adds	r3, r7, #7
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	429a      	cmp	r2, r3
 800422a:	d09e      	beq.n	800416a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	0018      	movs	r0, r3
 8004230:	46bd      	mov	sp, r7
 8004232:	b004      	add	sp, #16
 8004234:	bd80      	pop	{r7, pc}
	...

08004238 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b08e      	sub	sp, #56	@ 0x38
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004240:	f3ef 8310 	mrs	r3, PRIMASK
 8004244:	617b      	str	r3, [r7, #20]
  return(result);
 8004246:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004248:	637b      	str	r3, [r7, #52]	@ 0x34
 800424a:	2301      	movs	r3, #1
 800424c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	f383 8810 	msr	PRIMASK, r3
}
 8004254:	46c0      	nop			@ (mov r8, r8)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4926      	ldr	r1, [pc, #152]	@ (80042fc <UART_EndRxTransfer+0xc4>)
 8004262:	400a      	ands	r2, r1
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004268:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	f383 8810 	msr	PRIMASK, r3
}
 8004270:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004272:	f3ef 8310 	mrs	r3, PRIMASK
 8004276:	623b      	str	r3, [r7, #32]
  return(result);
 8004278:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800427a:	633b      	str	r3, [r7, #48]	@ 0x30
 800427c:	2301      	movs	r3, #1
 800427e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004282:	f383 8810 	msr	PRIMASK, r3
}
 8004286:	46c0      	nop			@ (mov r8, r8)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689a      	ldr	r2, [r3, #8]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	491b      	ldr	r1, [pc, #108]	@ (8004300 <UART_EndRxTransfer+0xc8>)
 8004294:	400a      	ands	r2, r1
 8004296:	609a      	str	r2, [r3, #8]
 8004298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800429a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800429c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800429e:	f383 8810 	msr	PRIMASK, r3
}
 80042a2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d118      	bne.n	80042de <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042ac:	f3ef 8310 	mrs	r3, PRIMASK
 80042b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80042b2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042b6:	2301      	movs	r3, #1
 80042b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f383 8810 	msr	PRIMASK, r3
}
 80042c0:	46c0      	nop			@ (mov r8, r8)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2110      	movs	r1, #16
 80042ce:	438a      	bics	r2, r1
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f383 8810 	msr	PRIMASK, r3
}
 80042dc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	228c      	movs	r2, #140	@ 0x8c
 80042e2:	2120      	movs	r1, #32
 80042e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80042f2:	46c0      	nop			@ (mov r8, r8)
 80042f4:	46bd      	mov	sp, r7
 80042f6:	b00e      	add	sp, #56	@ 0x38
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	46c0      	nop			@ (mov r8, r8)
 80042fc:	fffffedf 	.word	0xfffffedf
 8004300:	effffffe 	.word	0xeffffffe

08004304 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2284      	movs	r2, #132	@ 0x84
 8004310:	5c9b      	ldrb	r3, [r3, r2]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d101      	bne.n	800431a <HAL_UARTEx_DisableFifoMode+0x16>
 8004316:	2302      	movs	r3, #2
 8004318:	e027      	b.n	800436a <HAL_UARTEx_DisableFifoMode+0x66>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2284      	movs	r2, #132	@ 0x84
 800431e:	2101      	movs	r1, #1
 8004320:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2288      	movs	r2, #136	@ 0x88
 8004326:	2124      	movs	r1, #36	@ 0x24
 8004328:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2101      	movs	r1, #1
 800433e:	438a      	bics	r2, r1
 8004340:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4a0b      	ldr	r2, [pc, #44]	@ (8004374 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004346:	4013      	ands	r3, r2
 8004348:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2288      	movs	r2, #136	@ 0x88
 800435c:	2120      	movs	r1, #32
 800435e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2284      	movs	r2, #132	@ 0x84
 8004364:	2100      	movs	r1, #0
 8004366:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	0018      	movs	r0, r3
 800436c:	46bd      	mov	sp, r7
 800436e:	b004      	add	sp, #16
 8004370:	bd80      	pop	{r7, pc}
 8004372:	46c0      	nop			@ (mov r8, r8)
 8004374:	dfffffff 	.word	0xdfffffff

08004378 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2284      	movs	r2, #132	@ 0x84
 8004386:	5c9b      	ldrb	r3, [r3, r2]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d101      	bne.n	8004390 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800438c:	2302      	movs	r3, #2
 800438e:	e02e      	b.n	80043ee <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2284      	movs	r2, #132	@ 0x84
 8004394:	2101      	movs	r1, #1
 8004396:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2288      	movs	r2, #136	@ 0x88
 800439c:	2124      	movs	r1, #36	@ 0x24
 800439e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2101      	movs	r1, #1
 80043b4:	438a      	bics	r2, r1
 80043b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	08d9      	lsrs	r1, r3, #3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	0018      	movs	r0, r3
 80043d0:	f000 f854 	bl	800447c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2288      	movs	r2, #136	@ 0x88
 80043e0:	2120      	movs	r1, #32
 80043e2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2284      	movs	r2, #132	@ 0x84
 80043e8:	2100      	movs	r1, #0
 80043ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	0018      	movs	r0, r3
 80043f0:	46bd      	mov	sp, r7
 80043f2:	b004      	add	sp, #16
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2284      	movs	r2, #132	@ 0x84
 8004406:	5c9b      	ldrb	r3, [r3, r2]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800440c:	2302      	movs	r3, #2
 800440e:	e02f      	b.n	8004470 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2284      	movs	r2, #132	@ 0x84
 8004414:	2101      	movs	r1, #1
 8004416:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2288      	movs	r2, #136	@ 0x88
 800441c:	2124      	movs	r1, #36	@ 0x24
 800441e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2101      	movs	r1, #1
 8004434:	438a      	bics	r2, r1
 8004436:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	4a0e      	ldr	r2, [pc, #56]	@ (8004478 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004440:	4013      	ands	r3, r2
 8004442:	0019      	movs	r1, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	0018      	movs	r0, r3
 8004452:	f000 f813 	bl	800447c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2288      	movs	r2, #136	@ 0x88
 8004462:	2120      	movs	r1, #32
 8004464:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2284      	movs	r2, #132	@ 0x84
 800446a:	2100      	movs	r1, #0
 800446c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	0018      	movs	r0, r3
 8004472:	46bd      	mov	sp, r7
 8004474:	b004      	add	sp, #16
 8004476:	bd80      	pop	{r7, pc}
 8004478:	f1ffffff 	.word	0xf1ffffff

0800447c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800447c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004488:	2b00      	cmp	r3, #0
 800448a:	d108      	bne.n	800449e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	226a      	movs	r2, #106	@ 0x6a
 8004490:	2101      	movs	r1, #1
 8004492:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2268      	movs	r2, #104	@ 0x68
 8004498:	2101      	movs	r1, #1
 800449a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800449c:	e043      	b.n	8004526 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800449e:	260f      	movs	r6, #15
 80044a0:	19bb      	adds	r3, r7, r6
 80044a2:	2208      	movs	r2, #8
 80044a4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80044a6:	200e      	movs	r0, #14
 80044a8:	183b      	adds	r3, r7, r0
 80044aa:	2208      	movs	r2, #8
 80044ac:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	0e5b      	lsrs	r3, r3, #25
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	240d      	movs	r4, #13
 80044ba:	193b      	adds	r3, r7, r4
 80044bc:	2107      	movs	r1, #7
 80044be:	400a      	ands	r2, r1
 80044c0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	0f5b      	lsrs	r3, r3, #29
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	250c      	movs	r5, #12
 80044ce:	197b      	adds	r3, r7, r5
 80044d0:	2107      	movs	r1, #7
 80044d2:	400a      	ands	r2, r1
 80044d4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80044d6:	183b      	adds	r3, r7, r0
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	197a      	adds	r2, r7, r5
 80044dc:	7812      	ldrb	r2, [r2, #0]
 80044de:	4914      	ldr	r1, [pc, #80]	@ (8004530 <UARTEx_SetNbDataToProcess+0xb4>)
 80044e0:	5c8a      	ldrb	r2, [r1, r2]
 80044e2:	435a      	muls	r2, r3
 80044e4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80044e6:	197b      	adds	r3, r7, r5
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	4a12      	ldr	r2, [pc, #72]	@ (8004534 <UARTEx_SetNbDataToProcess+0xb8>)
 80044ec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80044ee:	0019      	movs	r1, r3
 80044f0:	f7fb fe9a 	bl	8000228 <__divsi3>
 80044f4:	0003      	movs	r3, r0
 80044f6:	b299      	uxth	r1, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	226a      	movs	r2, #106	@ 0x6a
 80044fc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80044fe:	19bb      	adds	r3, r7, r6
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	193a      	adds	r2, r7, r4
 8004504:	7812      	ldrb	r2, [r2, #0]
 8004506:	490a      	ldr	r1, [pc, #40]	@ (8004530 <UARTEx_SetNbDataToProcess+0xb4>)
 8004508:	5c8a      	ldrb	r2, [r1, r2]
 800450a:	435a      	muls	r2, r3
 800450c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800450e:	193b      	adds	r3, r7, r4
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	4a08      	ldr	r2, [pc, #32]	@ (8004534 <UARTEx_SetNbDataToProcess+0xb8>)
 8004514:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004516:	0019      	movs	r1, r3
 8004518:	f7fb fe86 	bl	8000228 <__divsi3>
 800451c:	0003      	movs	r3, r0
 800451e:	b299      	uxth	r1, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2268      	movs	r2, #104	@ 0x68
 8004524:	5299      	strh	r1, [r3, r2]
}
 8004526:	46c0      	nop			@ (mov r8, r8)
 8004528:	46bd      	mov	sp, r7
 800452a:	b005      	add	sp, #20
 800452c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800452e:	46c0      	nop			@ (mov r8, r8)
 8004530:	08004f8c 	.word	0x08004f8c
 8004534:	08004f94 	.word	0x08004f94

08004538 <sniprintf>:
 8004538:	b40c      	push	{r2, r3}
 800453a:	b530      	push	{r4, r5, lr}
 800453c:	4b18      	ldr	r3, [pc, #96]	@ (80045a0 <sniprintf+0x68>)
 800453e:	000c      	movs	r4, r1
 8004540:	681d      	ldr	r5, [r3, #0]
 8004542:	b09d      	sub	sp, #116	@ 0x74
 8004544:	2900      	cmp	r1, #0
 8004546:	da08      	bge.n	800455a <sniprintf+0x22>
 8004548:	238b      	movs	r3, #139	@ 0x8b
 800454a:	2001      	movs	r0, #1
 800454c:	602b      	str	r3, [r5, #0]
 800454e:	4240      	negs	r0, r0
 8004550:	b01d      	add	sp, #116	@ 0x74
 8004552:	bc30      	pop	{r4, r5}
 8004554:	bc08      	pop	{r3}
 8004556:	b002      	add	sp, #8
 8004558:	4718      	bx	r3
 800455a:	2382      	movs	r3, #130	@ 0x82
 800455c:	466a      	mov	r2, sp
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	8293      	strh	r3, [r2, #20]
 8004562:	2300      	movs	r3, #0
 8004564:	9002      	str	r0, [sp, #8]
 8004566:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004568:	9006      	str	r0, [sp, #24]
 800456a:	4299      	cmp	r1, r3
 800456c:	d000      	beq.n	8004570 <sniprintf+0x38>
 800456e:	1e4b      	subs	r3, r1, #1
 8004570:	9304      	str	r3, [sp, #16]
 8004572:	9307      	str	r3, [sp, #28]
 8004574:	2301      	movs	r3, #1
 8004576:	466a      	mov	r2, sp
 8004578:	425b      	negs	r3, r3
 800457a:	82d3      	strh	r3, [r2, #22]
 800457c:	0028      	movs	r0, r5
 800457e:	ab21      	add	r3, sp, #132	@ 0x84
 8004580:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004582:	a902      	add	r1, sp, #8
 8004584:	9301      	str	r3, [sp, #4]
 8004586:	f000 f99d 	bl	80048c4 <_svfiprintf_r>
 800458a:	1c43      	adds	r3, r0, #1
 800458c:	da01      	bge.n	8004592 <sniprintf+0x5a>
 800458e:	238b      	movs	r3, #139	@ 0x8b
 8004590:	602b      	str	r3, [r5, #0]
 8004592:	2c00      	cmp	r4, #0
 8004594:	d0dc      	beq.n	8004550 <sniprintf+0x18>
 8004596:	2200      	movs	r2, #0
 8004598:	9b02      	ldr	r3, [sp, #8]
 800459a:	701a      	strb	r2, [r3, #0]
 800459c:	e7d8      	b.n	8004550 <sniprintf+0x18>
 800459e:	46c0      	nop			@ (mov r8, r8)
 80045a0:	2000000c 	.word	0x2000000c

080045a4 <memset>:
 80045a4:	0003      	movs	r3, r0
 80045a6:	1882      	adds	r2, r0, r2
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d100      	bne.n	80045ae <memset+0xa>
 80045ac:	4770      	bx	lr
 80045ae:	7019      	strb	r1, [r3, #0]
 80045b0:	3301      	adds	r3, #1
 80045b2:	e7f9      	b.n	80045a8 <memset+0x4>

080045b4 <__errno>:
 80045b4:	4b01      	ldr	r3, [pc, #4]	@ (80045bc <__errno+0x8>)
 80045b6:	6818      	ldr	r0, [r3, #0]
 80045b8:	4770      	bx	lr
 80045ba:	46c0      	nop			@ (mov r8, r8)
 80045bc:	2000000c 	.word	0x2000000c

080045c0 <__libc_init_array>:
 80045c0:	b570      	push	{r4, r5, r6, lr}
 80045c2:	2600      	movs	r6, #0
 80045c4:	4c0c      	ldr	r4, [pc, #48]	@ (80045f8 <__libc_init_array+0x38>)
 80045c6:	4d0d      	ldr	r5, [pc, #52]	@ (80045fc <__libc_init_array+0x3c>)
 80045c8:	1b64      	subs	r4, r4, r5
 80045ca:	10a4      	asrs	r4, r4, #2
 80045cc:	42a6      	cmp	r6, r4
 80045ce:	d109      	bne.n	80045e4 <__libc_init_array+0x24>
 80045d0:	2600      	movs	r6, #0
 80045d2:	f000 fc61 	bl	8004e98 <_init>
 80045d6:	4c0a      	ldr	r4, [pc, #40]	@ (8004600 <__libc_init_array+0x40>)
 80045d8:	4d0a      	ldr	r5, [pc, #40]	@ (8004604 <__libc_init_array+0x44>)
 80045da:	1b64      	subs	r4, r4, r5
 80045dc:	10a4      	asrs	r4, r4, #2
 80045de:	42a6      	cmp	r6, r4
 80045e0:	d105      	bne.n	80045ee <__libc_init_array+0x2e>
 80045e2:	bd70      	pop	{r4, r5, r6, pc}
 80045e4:	00b3      	lsls	r3, r6, #2
 80045e6:	58eb      	ldr	r3, [r5, r3]
 80045e8:	4798      	blx	r3
 80045ea:	3601      	adds	r6, #1
 80045ec:	e7ee      	b.n	80045cc <__libc_init_array+0xc>
 80045ee:	00b3      	lsls	r3, r6, #2
 80045f0:	58eb      	ldr	r3, [r5, r3]
 80045f2:	4798      	blx	r3
 80045f4:	3601      	adds	r6, #1
 80045f6:	e7f2      	b.n	80045de <__libc_init_array+0x1e>
 80045f8:	08004fd0 	.word	0x08004fd0
 80045fc:	08004fd0 	.word	0x08004fd0
 8004600:	08004fd4 	.word	0x08004fd4
 8004604:	08004fd0 	.word	0x08004fd0

08004608 <__retarget_lock_acquire_recursive>:
 8004608:	4770      	bx	lr

0800460a <__retarget_lock_release_recursive>:
 800460a:	4770      	bx	lr

0800460c <_free_r>:
 800460c:	b570      	push	{r4, r5, r6, lr}
 800460e:	0005      	movs	r5, r0
 8004610:	1e0c      	subs	r4, r1, #0
 8004612:	d010      	beq.n	8004636 <_free_r+0x2a>
 8004614:	3c04      	subs	r4, #4
 8004616:	6823      	ldr	r3, [r4, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	da00      	bge.n	800461e <_free_r+0x12>
 800461c:	18e4      	adds	r4, r4, r3
 800461e:	0028      	movs	r0, r5
 8004620:	f000 f8e0 	bl	80047e4 <__malloc_lock>
 8004624:	4a1d      	ldr	r2, [pc, #116]	@ (800469c <_free_r+0x90>)
 8004626:	6813      	ldr	r3, [r2, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d105      	bne.n	8004638 <_free_r+0x2c>
 800462c:	6063      	str	r3, [r4, #4]
 800462e:	6014      	str	r4, [r2, #0]
 8004630:	0028      	movs	r0, r5
 8004632:	f000 f8df 	bl	80047f4 <__malloc_unlock>
 8004636:	bd70      	pop	{r4, r5, r6, pc}
 8004638:	42a3      	cmp	r3, r4
 800463a:	d908      	bls.n	800464e <_free_r+0x42>
 800463c:	6820      	ldr	r0, [r4, #0]
 800463e:	1821      	adds	r1, r4, r0
 8004640:	428b      	cmp	r3, r1
 8004642:	d1f3      	bne.n	800462c <_free_r+0x20>
 8004644:	6819      	ldr	r1, [r3, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	1809      	adds	r1, r1, r0
 800464a:	6021      	str	r1, [r4, #0]
 800464c:	e7ee      	b.n	800462c <_free_r+0x20>
 800464e:	001a      	movs	r2, r3
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <_free_r+0x4e>
 8004656:	42a3      	cmp	r3, r4
 8004658:	d9f9      	bls.n	800464e <_free_r+0x42>
 800465a:	6811      	ldr	r1, [r2, #0]
 800465c:	1850      	adds	r0, r2, r1
 800465e:	42a0      	cmp	r0, r4
 8004660:	d10b      	bne.n	800467a <_free_r+0x6e>
 8004662:	6820      	ldr	r0, [r4, #0]
 8004664:	1809      	adds	r1, r1, r0
 8004666:	1850      	adds	r0, r2, r1
 8004668:	6011      	str	r1, [r2, #0]
 800466a:	4283      	cmp	r3, r0
 800466c:	d1e0      	bne.n	8004630 <_free_r+0x24>
 800466e:	6818      	ldr	r0, [r3, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	1841      	adds	r1, r0, r1
 8004674:	6011      	str	r1, [r2, #0]
 8004676:	6053      	str	r3, [r2, #4]
 8004678:	e7da      	b.n	8004630 <_free_r+0x24>
 800467a:	42a0      	cmp	r0, r4
 800467c:	d902      	bls.n	8004684 <_free_r+0x78>
 800467e:	230c      	movs	r3, #12
 8004680:	602b      	str	r3, [r5, #0]
 8004682:	e7d5      	b.n	8004630 <_free_r+0x24>
 8004684:	6820      	ldr	r0, [r4, #0]
 8004686:	1821      	adds	r1, r4, r0
 8004688:	428b      	cmp	r3, r1
 800468a:	d103      	bne.n	8004694 <_free_r+0x88>
 800468c:	6819      	ldr	r1, [r3, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	1809      	adds	r1, r1, r0
 8004692:	6021      	str	r1, [r4, #0]
 8004694:	6063      	str	r3, [r4, #4]
 8004696:	6054      	str	r4, [r2, #4]
 8004698:	e7ca      	b.n	8004630 <_free_r+0x24>
 800469a:	46c0      	nop			@ (mov r8, r8)
 800469c:	20000354 	.word	0x20000354

080046a0 <sbrk_aligned>:
 80046a0:	b570      	push	{r4, r5, r6, lr}
 80046a2:	4e0f      	ldr	r6, [pc, #60]	@ (80046e0 <sbrk_aligned+0x40>)
 80046a4:	000d      	movs	r5, r1
 80046a6:	6831      	ldr	r1, [r6, #0]
 80046a8:	0004      	movs	r4, r0
 80046aa:	2900      	cmp	r1, #0
 80046ac:	d102      	bne.n	80046b4 <sbrk_aligned+0x14>
 80046ae:	f000 fb95 	bl	8004ddc <_sbrk_r>
 80046b2:	6030      	str	r0, [r6, #0]
 80046b4:	0029      	movs	r1, r5
 80046b6:	0020      	movs	r0, r4
 80046b8:	f000 fb90 	bl	8004ddc <_sbrk_r>
 80046bc:	1c43      	adds	r3, r0, #1
 80046be:	d103      	bne.n	80046c8 <sbrk_aligned+0x28>
 80046c0:	2501      	movs	r5, #1
 80046c2:	426d      	negs	r5, r5
 80046c4:	0028      	movs	r0, r5
 80046c6:	bd70      	pop	{r4, r5, r6, pc}
 80046c8:	2303      	movs	r3, #3
 80046ca:	1cc5      	adds	r5, r0, #3
 80046cc:	439d      	bics	r5, r3
 80046ce:	42a8      	cmp	r0, r5
 80046d0:	d0f8      	beq.n	80046c4 <sbrk_aligned+0x24>
 80046d2:	1a29      	subs	r1, r5, r0
 80046d4:	0020      	movs	r0, r4
 80046d6:	f000 fb81 	bl	8004ddc <_sbrk_r>
 80046da:	3001      	adds	r0, #1
 80046dc:	d1f2      	bne.n	80046c4 <sbrk_aligned+0x24>
 80046de:	e7ef      	b.n	80046c0 <sbrk_aligned+0x20>
 80046e0:	20000350 	.word	0x20000350

080046e4 <_malloc_r>:
 80046e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046e6:	2203      	movs	r2, #3
 80046e8:	1ccb      	adds	r3, r1, #3
 80046ea:	4393      	bics	r3, r2
 80046ec:	3308      	adds	r3, #8
 80046ee:	0005      	movs	r5, r0
 80046f0:	001f      	movs	r7, r3
 80046f2:	2b0c      	cmp	r3, #12
 80046f4:	d234      	bcs.n	8004760 <_malloc_r+0x7c>
 80046f6:	270c      	movs	r7, #12
 80046f8:	42b9      	cmp	r1, r7
 80046fa:	d833      	bhi.n	8004764 <_malloc_r+0x80>
 80046fc:	0028      	movs	r0, r5
 80046fe:	f000 f871 	bl	80047e4 <__malloc_lock>
 8004702:	4e37      	ldr	r6, [pc, #220]	@ (80047e0 <_malloc_r+0xfc>)
 8004704:	6833      	ldr	r3, [r6, #0]
 8004706:	001c      	movs	r4, r3
 8004708:	2c00      	cmp	r4, #0
 800470a:	d12f      	bne.n	800476c <_malloc_r+0x88>
 800470c:	0039      	movs	r1, r7
 800470e:	0028      	movs	r0, r5
 8004710:	f7ff ffc6 	bl	80046a0 <sbrk_aligned>
 8004714:	0004      	movs	r4, r0
 8004716:	1c43      	adds	r3, r0, #1
 8004718:	d15f      	bne.n	80047da <_malloc_r+0xf6>
 800471a:	6834      	ldr	r4, [r6, #0]
 800471c:	9400      	str	r4, [sp, #0]
 800471e:	9b00      	ldr	r3, [sp, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d14a      	bne.n	80047ba <_malloc_r+0xd6>
 8004724:	2c00      	cmp	r4, #0
 8004726:	d052      	beq.n	80047ce <_malloc_r+0xea>
 8004728:	6823      	ldr	r3, [r4, #0]
 800472a:	0028      	movs	r0, r5
 800472c:	18e3      	adds	r3, r4, r3
 800472e:	9900      	ldr	r1, [sp, #0]
 8004730:	9301      	str	r3, [sp, #4]
 8004732:	f000 fb53 	bl	8004ddc <_sbrk_r>
 8004736:	9b01      	ldr	r3, [sp, #4]
 8004738:	4283      	cmp	r3, r0
 800473a:	d148      	bne.n	80047ce <_malloc_r+0xea>
 800473c:	6823      	ldr	r3, [r4, #0]
 800473e:	0028      	movs	r0, r5
 8004740:	1aff      	subs	r7, r7, r3
 8004742:	0039      	movs	r1, r7
 8004744:	f7ff ffac 	bl	80046a0 <sbrk_aligned>
 8004748:	3001      	adds	r0, #1
 800474a:	d040      	beq.n	80047ce <_malloc_r+0xea>
 800474c:	6823      	ldr	r3, [r4, #0]
 800474e:	19db      	adds	r3, r3, r7
 8004750:	6023      	str	r3, [r4, #0]
 8004752:	6833      	ldr	r3, [r6, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	2a00      	cmp	r2, #0
 8004758:	d133      	bne.n	80047c2 <_malloc_r+0xde>
 800475a:	9b00      	ldr	r3, [sp, #0]
 800475c:	6033      	str	r3, [r6, #0]
 800475e:	e019      	b.n	8004794 <_malloc_r+0xb0>
 8004760:	2b00      	cmp	r3, #0
 8004762:	dac9      	bge.n	80046f8 <_malloc_r+0x14>
 8004764:	230c      	movs	r3, #12
 8004766:	602b      	str	r3, [r5, #0]
 8004768:	2000      	movs	r0, #0
 800476a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800476c:	6821      	ldr	r1, [r4, #0]
 800476e:	1bc9      	subs	r1, r1, r7
 8004770:	d420      	bmi.n	80047b4 <_malloc_r+0xd0>
 8004772:	290b      	cmp	r1, #11
 8004774:	d90a      	bls.n	800478c <_malloc_r+0xa8>
 8004776:	19e2      	adds	r2, r4, r7
 8004778:	6027      	str	r7, [r4, #0]
 800477a:	42a3      	cmp	r3, r4
 800477c:	d104      	bne.n	8004788 <_malloc_r+0xa4>
 800477e:	6032      	str	r2, [r6, #0]
 8004780:	6863      	ldr	r3, [r4, #4]
 8004782:	6011      	str	r1, [r2, #0]
 8004784:	6053      	str	r3, [r2, #4]
 8004786:	e005      	b.n	8004794 <_malloc_r+0xb0>
 8004788:	605a      	str	r2, [r3, #4]
 800478a:	e7f9      	b.n	8004780 <_malloc_r+0x9c>
 800478c:	6862      	ldr	r2, [r4, #4]
 800478e:	42a3      	cmp	r3, r4
 8004790:	d10e      	bne.n	80047b0 <_malloc_r+0xcc>
 8004792:	6032      	str	r2, [r6, #0]
 8004794:	0028      	movs	r0, r5
 8004796:	f000 f82d 	bl	80047f4 <__malloc_unlock>
 800479a:	0020      	movs	r0, r4
 800479c:	2207      	movs	r2, #7
 800479e:	300b      	adds	r0, #11
 80047a0:	1d23      	adds	r3, r4, #4
 80047a2:	4390      	bics	r0, r2
 80047a4:	1ac2      	subs	r2, r0, r3
 80047a6:	4298      	cmp	r0, r3
 80047a8:	d0df      	beq.n	800476a <_malloc_r+0x86>
 80047aa:	1a1b      	subs	r3, r3, r0
 80047ac:	50a3      	str	r3, [r4, r2]
 80047ae:	e7dc      	b.n	800476a <_malloc_r+0x86>
 80047b0:	605a      	str	r2, [r3, #4]
 80047b2:	e7ef      	b.n	8004794 <_malloc_r+0xb0>
 80047b4:	0023      	movs	r3, r4
 80047b6:	6864      	ldr	r4, [r4, #4]
 80047b8:	e7a6      	b.n	8004708 <_malloc_r+0x24>
 80047ba:	9c00      	ldr	r4, [sp, #0]
 80047bc:	6863      	ldr	r3, [r4, #4]
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	e7ad      	b.n	800471e <_malloc_r+0x3a>
 80047c2:	001a      	movs	r2, r3
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	42a3      	cmp	r3, r4
 80047c8:	d1fb      	bne.n	80047c2 <_malloc_r+0xde>
 80047ca:	2300      	movs	r3, #0
 80047cc:	e7da      	b.n	8004784 <_malloc_r+0xa0>
 80047ce:	230c      	movs	r3, #12
 80047d0:	0028      	movs	r0, r5
 80047d2:	602b      	str	r3, [r5, #0]
 80047d4:	f000 f80e 	bl	80047f4 <__malloc_unlock>
 80047d8:	e7c6      	b.n	8004768 <_malloc_r+0x84>
 80047da:	6007      	str	r7, [r0, #0]
 80047dc:	e7da      	b.n	8004794 <_malloc_r+0xb0>
 80047de:	46c0      	nop			@ (mov r8, r8)
 80047e0:	20000354 	.word	0x20000354

080047e4 <__malloc_lock>:
 80047e4:	b510      	push	{r4, lr}
 80047e6:	4802      	ldr	r0, [pc, #8]	@ (80047f0 <__malloc_lock+0xc>)
 80047e8:	f7ff ff0e 	bl	8004608 <__retarget_lock_acquire_recursive>
 80047ec:	bd10      	pop	{r4, pc}
 80047ee:	46c0      	nop			@ (mov r8, r8)
 80047f0:	2000034c 	.word	0x2000034c

080047f4 <__malloc_unlock>:
 80047f4:	b510      	push	{r4, lr}
 80047f6:	4802      	ldr	r0, [pc, #8]	@ (8004800 <__malloc_unlock+0xc>)
 80047f8:	f7ff ff07 	bl	800460a <__retarget_lock_release_recursive>
 80047fc:	bd10      	pop	{r4, pc}
 80047fe:	46c0      	nop			@ (mov r8, r8)
 8004800:	2000034c 	.word	0x2000034c

08004804 <__ssputs_r>:
 8004804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004806:	688e      	ldr	r6, [r1, #8]
 8004808:	b085      	sub	sp, #20
 800480a:	001f      	movs	r7, r3
 800480c:	000c      	movs	r4, r1
 800480e:	680b      	ldr	r3, [r1, #0]
 8004810:	9002      	str	r0, [sp, #8]
 8004812:	9203      	str	r2, [sp, #12]
 8004814:	42be      	cmp	r6, r7
 8004816:	d830      	bhi.n	800487a <__ssputs_r+0x76>
 8004818:	210c      	movs	r1, #12
 800481a:	5e62      	ldrsh	r2, [r4, r1]
 800481c:	2190      	movs	r1, #144	@ 0x90
 800481e:	00c9      	lsls	r1, r1, #3
 8004820:	420a      	tst	r2, r1
 8004822:	d028      	beq.n	8004876 <__ssputs_r+0x72>
 8004824:	2003      	movs	r0, #3
 8004826:	6921      	ldr	r1, [r4, #16]
 8004828:	1a5b      	subs	r3, r3, r1
 800482a:	9301      	str	r3, [sp, #4]
 800482c:	6963      	ldr	r3, [r4, #20]
 800482e:	4343      	muls	r3, r0
 8004830:	9801      	ldr	r0, [sp, #4]
 8004832:	0fdd      	lsrs	r5, r3, #31
 8004834:	18ed      	adds	r5, r5, r3
 8004836:	1c7b      	adds	r3, r7, #1
 8004838:	181b      	adds	r3, r3, r0
 800483a:	106d      	asrs	r5, r5, #1
 800483c:	42ab      	cmp	r3, r5
 800483e:	d900      	bls.n	8004842 <__ssputs_r+0x3e>
 8004840:	001d      	movs	r5, r3
 8004842:	0552      	lsls	r2, r2, #21
 8004844:	d528      	bpl.n	8004898 <__ssputs_r+0x94>
 8004846:	0029      	movs	r1, r5
 8004848:	9802      	ldr	r0, [sp, #8]
 800484a:	f7ff ff4b 	bl	80046e4 <_malloc_r>
 800484e:	1e06      	subs	r6, r0, #0
 8004850:	d02c      	beq.n	80048ac <__ssputs_r+0xa8>
 8004852:	9a01      	ldr	r2, [sp, #4]
 8004854:	6921      	ldr	r1, [r4, #16]
 8004856:	f000 fade 	bl	8004e16 <memcpy>
 800485a:	89a2      	ldrh	r2, [r4, #12]
 800485c:	4b18      	ldr	r3, [pc, #96]	@ (80048c0 <__ssputs_r+0xbc>)
 800485e:	401a      	ands	r2, r3
 8004860:	2380      	movs	r3, #128	@ 0x80
 8004862:	4313      	orrs	r3, r2
 8004864:	81a3      	strh	r3, [r4, #12]
 8004866:	9b01      	ldr	r3, [sp, #4]
 8004868:	6126      	str	r6, [r4, #16]
 800486a:	18f6      	adds	r6, r6, r3
 800486c:	6026      	str	r6, [r4, #0]
 800486e:	003e      	movs	r6, r7
 8004870:	6165      	str	r5, [r4, #20]
 8004872:	1aed      	subs	r5, r5, r3
 8004874:	60a5      	str	r5, [r4, #8]
 8004876:	42be      	cmp	r6, r7
 8004878:	d900      	bls.n	800487c <__ssputs_r+0x78>
 800487a:	003e      	movs	r6, r7
 800487c:	0032      	movs	r2, r6
 800487e:	9903      	ldr	r1, [sp, #12]
 8004880:	6820      	ldr	r0, [r4, #0]
 8004882:	f000 fa99 	bl	8004db8 <memmove>
 8004886:	2000      	movs	r0, #0
 8004888:	68a3      	ldr	r3, [r4, #8]
 800488a:	1b9b      	subs	r3, r3, r6
 800488c:	60a3      	str	r3, [r4, #8]
 800488e:	6823      	ldr	r3, [r4, #0]
 8004890:	199b      	adds	r3, r3, r6
 8004892:	6023      	str	r3, [r4, #0]
 8004894:	b005      	add	sp, #20
 8004896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004898:	002a      	movs	r2, r5
 800489a:	9802      	ldr	r0, [sp, #8]
 800489c:	f000 fac4 	bl	8004e28 <_realloc_r>
 80048a0:	1e06      	subs	r6, r0, #0
 80048a2:	d1e0      	bne.n	8004866 <__ssputs_r+0x62>
 80048a4:	6921      	ldr	r1, [r4, #16]
 80048a6:	9802      	ldr	r0, [sp, #8]
 80048a8:	f7ff feb0 	bl	800460c <_free_r>
 80048ac:	230c      	movs	r3, #12
 80048ae:	2001      	movs	r0, #1
 80048b0:	9a02      	ldr	r2, [sp, #8]
 80048b2:	4240      	negs	r0, r0
 80048b4:	6013      	str	r3, [r2, #0]
 80048b6:	89a2      	ldrh	r2, [r4, #12]
 80048b8:	3334      	adds	r3, #52	@ 0x34
 80048ba:	4313      	orrs	r3, r2
 80048bc:	81a3      	strh	r3, [r4, #12]
 80048be:	e7e9      	b.n	8004894 <__ssputs_r+0x90>
 80048c0:	fffffb7f 	.word	0xfffffb7f

080048c4 <_svfiprintf_r>:
 80048c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048c6:	b0a1      	sub	sp, #132	@ 0x84
 80048c8:	9003      	str	r0, [sp, #12]
 80048ca:	001d      	movs	r5, r3
 80048cc:	898b      	ldrh	r3, [r1, #12]
 80048ce:	000f      	movs	r7, r1
 80048d0:	0016      	movs	r6, r2
 80048d2:	061b      	lsls	r3, r3, #24
 80048d4:	d511      	bpl.n	80048fa <_svfiprintf_r+0x36>
 80048d6:	690b      	ldr	r3, [r1, #16]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10e      	bne.n	80048fa <_svfiprintf_r+0x36>
 80048dc:	2140      	movs	r1, #64	@ 0x40
 80048de:	f7ff ff01 	bl	80046e4 <_malloc_r>
 80048e2:	6038      	str	r0, [r7, #0]
 80048e4:	6138      	str	r0, [r7, #16]
 80048e6:	2800      	cmp	r0, #0
 80048e8:	d105      	bne.n	80048f6 <_svfiprintf_r+0x32>
 80048ea:	230c      	movs	r3, #12
 80048ec:	9a03      	ldr	r2, [sp, #12]
 80048ee:	6013      	str	r3, [r2, #0]
 80048f0:	2001      	movs	r0, #1
 80048f2:	4240      	negs	r0, r0
 80048f4:	e0cf      	b.n	8004a96 <_svfiprintf_r+0x1d2>
 80048f6:	2340      	movs	r3, #64	@ 0x40
 80048f8:	617b      	str	r3, [r7, #20]
 80048fa:	2300      	movs	r3, #0
 80048fc:	ac08      	add	r4, sp, #32
 80048fe:	6163      	str	r3, [r4, #20]
 8004900:	3320      	adds	r3, #32
 8004902:	7663      	strb	r3, [r4, #25]
 8004904:	3310      	adds	r3, #16
 8004906:	76a3      	strb	r3, [r4, #26]
 8004908:	9507      	str	r5, [sp, #28]
 800490a:	0035      	movs	r5, r6
 800490c:	782b      	ldrb	r3, [r5, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <_svfiprintf_r+0x52>
 8004912:	2b25      	cmp	r3, #37	@ 0x25
 8004914:	d148      	bne.n	80049a8 <_svfiprintf_r+0xe4>
 8004916:	1bab      	subs	r3, r5, r6
 8004918:	9305      	str	r3, [sp, #20]
 800491a:	42b5      	cmp	r5, r6
 800491c:	d00b      	beq.n	8004936 <_svfiprintf_r+0x72>
 800491e:	0032      	movs	r2, r6
 8004920:	0039      	movs	r1, r7
 8004922:	9803      	ldr	r0, [sp, #12]
 8004924:	f7ff ff6e 	bl	8004804 <__ssputs_r>
 8004928:	3001      	adds	r0, #1
 800492a:	d100      	bne.n	800492e <_svfiprintf_r+0x6a>
 800492c:	e0ae      	b.n	8004a8c <_svfiprintf_r+0x1c8>
 800492e:	6963      	ldr	r3, [r4, #20]
 8004930:	9a05      	ldr	r2, [sp, #20]
 8004932:	189b      	adds	r3, r3, r2
 8004934:	6163      	str	r3, [r4, #20]
 8004936:	782b      	ldrb	r3, [r5, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d100      	bne.n	800493e <_svfiprintf_r+0x7a>
 800493c:	e0a6      	b.n	8004a8c <_svfiprintf_r+0x1c8>
 800493e:	2201      	movs	r2, #1
 8004940:	2300      	movs	r3, #0
 8004942:	4252      	negs	r2, r2
 8004944:	6062      	str	r2, [r4, #4]
 8004946:	a904      	add	r1, sp, #16
 8004948:	3254      	adds	r2, #84	@ 0x54
 800494a:	1852      	adds	r2, r2, r1
 800494c:	1c6e      	adds	r6, r5, #1
 800494e:	6023      	str	r3, [r4, #0]
 8004950:	60e3      	str	r3, [r4, #12]
 8004952:	60a3      	str	r3, [r4, #8]
 8004954:	7013      	strb	r3, [r2, #0]
 8004956:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004958:	4b54      	ldr	r3, [pc, #336]	@ (8004aac <_svfiprintf_r+0x1e8>)
 800495a:	2205      	movs	r2, #5
 800495c:	0018      	movs	r0, r3
 800495e:	7831      	ldrb	r1, [r6, #0]
 8004960:	9305      	str	r3, [sp, #20]
 8004962:	f000 fa4d 	bl	8004e00 <memchr>
 8004966:	1c75      	adds	r5, r6, #1
 8004968:	2800      	cmp	r0, #0
 800496a:	d11f      	bne.n	80049ac <_svfiprintf_r+0xe8>
 800496c:	6822      	ldr	r2, [r4, #0]
 800496e:	06d3      	lsls	r3, r2, #27
 8004970:	d504      	bpl.n	800497c <_svfiprintf_r+0xb8>
 8004972:	2353      	movs	r3, #83	@ 0x53
 8004974:	a904      	add	r1, sp, #16
 8004976:	185b      	adds	r3, r3, r1
 8004978:	2120      	movs	r1, #32
 800497a:	7019      	strb	r1, [r3, #0]
 800497c:	0713      	lsls	r3, r2, #28
 800497e:	d504      	bpl.n	800498a <_svfiprintf_r+0xc6>
 8004980:	2353      	movs	r3, #83	@ 0x53
 8004982:	a904      	add	r1, sp, #16
 8004984:	185b      	adds	r3, r3, r1
 8004986:	212b      	movs	r1, #43	@ 0x2b
 8004988:	7019      	strb	r1, [r3, #0]
 800498a:	7833      	ldrb	r3, [r6, #0]
 800498c:	2b2a      	cmp	r3, #42	@ 0x2a
 800498e:	d016      	beq.n	80049be <_svfiprintf_r+0xfa>
 8004990:	0035      	movs	r5, r6
 8004992:	2100      	movs	r1, #0
 8004994:	200a      	movs	r0, #10
 8004996:	68e3      	ldr	r3, [r4, #12]
 8004998:	782a      	ldrb	r2, [r5, #0]
 800499a:	1c6e      	adds	r6, r5, #1
 800499c:	3a30      	subs	r2, #48	@ 0x30
 800499e:	2a09      	cmp	r2, #9
 80049a0:	d950      	bls.n	8004a44 <_svfiprintf_r+0x180>
 80049a2:	2900      	cmp	r1, #0
 80049a4:	d111      	bne.n	80049ca <_svfiprintf_r+0x106>
 80049a6:	e017      	b.n	80049d8 <_svfiprintf_r+0x114>
 80049a8:	3501      	adds	r5, #1
 80049aa:	e7af      	b.n	800490c <_svfiprintf_r+0x48>
 80049ac:	9b05      	ldr	r3, [sp, #20]
 80049ae:	6822      	ldr	r2, [r4, #0]
 80049b0:	1ac0      	subs	r0, r0, r3
 80049b2:	2301      	movs	r3, #1
 80049b4:	4083      	lsls	r3, r0
 80049b6:	4313      	orrs	r3, r2
 80049b8:	002e      	movs	r6, r5
 80049ba:	6023      	str	r3, [r4, #0]
 80049bc:	e7cc      	b.n	8004958 <_svfiprintf_r+0x94>
 80049be:	9b07      	ldr	r3, [sp, #28]
 80049c0:	1d19      	adds	r1, r3, #4
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	9107      	str	r1, [sp, #28]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	db01      	blt.n	80049ce <_svfiprintf_r+0x10a>
 80049ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80049cc:	e004      	b.n	80049d8 <_svfiprintf_r+0x114>
 80049ce:	425b      	negs	r3, r3
 80049d0:	60e3      	str	r3, [r4, #12]
 80049d2:	2302      	movs	r3, #2
 80049d4:	4313      	orrs	r3, r2
 80049d6:	6023      	str	r3, [r4, #0]
 80049d8:	782b      	ldrb	r3, [r5, #0]
 80049da:	2b2e      	cmp	r3, #46	@ 0x2e
 80049dc:	d10c      	bne.n	80049f8 <_svfiprintf_r+0x134>
 80049de:	786b      	ldrb	r3, [r5, #1]
 80049e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80049e2:	d134      	bne.n	8004a4e <_svfiprintf_r+0x18a>
 80049e4:	9b07      	ldr	r3, [sp, #28]
 80049e6:	3502      	adds	r5, #2
 80049e8:	1d1a      	adds	r2, r3, #4
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	9207      	str	r2, [sp, #28]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	da01      	bge.n	80049f6 <_svfiprintf_r+0x132>
 80049f2:	2301      	movs	r3, #1
 80049f4:	425b      	negs	r3, r3
 80049f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80049f8:	4e2d      	ldr	r6, [pc, #180]	@ (8004ab0 <_svfiprintf_r+0x1ec>)
 80049fa:	2203      	movs	r2, #3
 80049fc:	0030      	movs	r0, r6
 80049fe:	7829      	ldrb	r1, [r5, #0]
 8004a00:	f000 f9fe 	bl	8004e00 <memchr>
 8004a04:	2800      	cmp	r0, #0
 8004a06:	d006      	beq.n	8004a16 <_svfiprintf_r+0x152>
 8004a08:	2340      	movs	r3, #64	@ 0x40
 8004a0a:	1b80      	subs	r0, r0, r6
 8004a0c:	4083      	lsls	r3, r0
 8004a0e:	6822      	ldr	r2, [r4, #0]
 8004a10:	3501      	adds	r5, #1
 8004a12:	4313      	orrs	r3, r2
 8004a14:	6023      	str	r3, [r4, #0]
 8004a16:	7829      	ldrb	r1, [r5, #0]
 8004a18:	2206      	movs	r2, #6
 8004a1a:	4826      	ldr	r0, [pc, #152]	@ (8004ab4 <_svfiprintf_r+0x1f0>)
 8004a1c:	1c6e      	adds	r6, r5, #1
 8004a1e:	7621      	strb	r1, [r4, #24]
 8004a20:	f000 f9ee 	bl	8004e00 <memchr>
 8004a24:	2800      	cmp	r0, #0
 8004a26:	d038      	beq.n	8004a9a <_svfiprintf_r+0x1d6>
 8004a28:	4b23      	ldr	r3, [pc, #140]	@ (8004ab8 <_svfiprintf_r+0x1f4>)
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d122      	bne.n	8004a74 <_svfiprintf_r+0x1b0>
 8004a2e:	2207      	movs	r2, #7
 8004a30:	9b07      	ldr	r3, [sp, #28]
 8004a32:	3307      	adds	r3, #7
 8004a34:	4393      	bics	r3, r2
 8004a36:	3308      	adds	r3, #8
 8004a38:	9307      	str	r3, [sp, #28]
 8004a3a:	6963      	ldr	r3, [r4, #20]
 8004a3c:	9a04      	ldr	r2, [sp, #16]
 8004a3e:	189b      	adds	r3, r3, r2
 8004a40:	6163      	str	r3, [r4, #20]
 8004a42:	e762      	b.n	800490a <_svfiprintf_r+0x46>
 8004a44:	4343      	muls	r3, r0
 8004a46:	0035      	movs	r5, r6
 8004a48:	2101      	movs	r1, #1
 8004a4a:	189b      	adds	r3, r3, r2
 8004a4c:	e7a4      	b.n	8004998 <_svfiprintf_r+0xd4>
 8004a4e:	2300      	movs	r3, #0
 8004a50:	200a      	movs	r0, #10
 8004a52:	0019      	movs	r1, r3
 8004a54:	3501      	adds	r5, #1
 8004a56:	6063      	str	r3, [r4, #4]
 8004a58:	782a      	ldrb	r2, [r5, #0]
 8004a5a:	1c6e      	adds	r6, r5, #1
 8004a5c:	3a30      	subs	r2, #48	@ 0x30
 8004a5e:	2a09      	cmp	r2, #9
 8004a60:	d903      	bls.n	8004a6a <_svfiprintf_r+0x1a6>
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d0c8      	beq.n	80049f8 <_svfiprintf_r+0x134>
 8004a66:	9109      	str	r1, [sp, #36]	@ 0x24
 8004a68:	e7c6      	b.n	80049f8 <_svfiprintf_r+0x134>
 8004a6a:	4341      	muls	r1, r0
 8004a6c:	0035      	movs	r5, r6
 8004a6e:	2301      	movs	r3, #1
 8004a70:	1889      	adds	r1, r1, r2
 8004a72:	e7f1      	b.n	8004a58 <_svfiprintf_r+0x194>
 8004a74:	aa07      	add	r2, sp, #28
 8004a76:	9200      	str	r2, [sp, #0]
 8004a78:	0021      	movs	r1, r4
 8004a7a:	003a      	movs	r2, r7
 8004a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8004abc <_svfiprintf_r+0x1f8>)
 8004a7e:	9803      	ldr	r0, [sp, #12]
 8004a80:	e000      	b.n	8004a84 <_svfiprintf_r+0x1c0>
 8004a82:	bf00      	nop
 8004a84:	9004      	str	r0, [sp, #16]
 8004a86:	9b04      	ldr	r3, [sp, #16]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	d1d6      	bne.n	8004a3a <_svfiprintf_r+0x176>
 8004a8c:	89bb      	ldrh	r3, [r7, #12]
 8004a8e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004a90:	065b      	lsls	r3, r3, #25
 8004a92:	d500      	bpl.n	8004a96 <_svfiprintf_r+0x1d2>
 8004a94:	e72c      	b.n	80048f0 <_svfiprintf_r+0x2c>
 8004a96:	b021      	add	sp, #132	@ 0x84
 8004a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a9a:	aa07      	add	r2, sp, #28
 8004a9c:	9200      	str	r2, [sp, #0]
 8004a9e:	0021      	movs	r1, r4
 8004aa0:	003a      	movs	r2, r7
 8004aa2:	4b06      	ldr	r3, [pc, #24]	@ (8004abc <_svfiprintf_r+0x1f8>)
 8004aa4:	9803      	ldr	r0, [sp, #12]
 8004aa6:	f000 f87b 	bl	8004ba0 <_printf_i>
 8004aaa:	e7eb      	b.n	8004a84 <_svfiprintf_r+0x1c0>
 8004aac:	08004f9c 	.word	0x08004f9c
 8004ab0:	08004fa2 	.word	0x08004fa2
 8004ab4:	08004fa6 	.word	0x08004fa6
 8004ab8:	00000000 	.word	0x00000000
 8004abc:	08004805 	.word	0x08004805

08004ac0 <_printf_common>:
 8004ac0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ac2:	0016      	movs	r6, r2
 8004ac4:	9301      	str	r3, [sp, #4]
 8004ac6:	688a      	ldr	r2, [r1, #8]
 8004ac8:	690b      	ldr	r3, [r1, #16]
 8004aca:	000c      	movs	r4, r1
 8004acc:	9000      	str	r0, [sp, #0]
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	da00      	bge.n	8004ad4 <_printf_common+0x14>
 8004ad2:	0013      	movs	r3, r2
 8004ad4:	0022      	movs	r2, r4
 8004ad6:	6033      	str	r3, [r6, #0]
 8004ad8:	3243      	adds	r2, #67	@ 0x43
 8004ada:	7812      	ldrb	r2, [r2, #0]
 8004adc:	2a00      	cmp	r2, #0
 8004ade:	d001      	beq.n	8004ae4 <_printf_common+0x24>
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	6033      	str	r3, [r6, #0]
 8004ae4:	6823      	ldr	r3, [r4, #0]
 8004ae6:	069b      	lsls	r3, r3, #26
 8004ae8:	d502      	bpl.n	8004af0 <_printf_common+0x30>
 8004aea:	6833      	ldr	r3, [r6, #0]
 8004aec:	3302      	adds	r3, #2
 8004aee:	6033      	str	r3, [r6, #0]
 8004af0:	6822      	ldr	r2, [r4, #0]
 8004af2:	2306      	movs	r3, #6
 8004af4:	0015      	movs	r5, r2
 8004af6:	401d      	ands	r5, r3
 8004af8:	421a      	tst	r2, r3
 8004afa:	d027      	beq.n	8004b4c <_printf_common+0x8c>
 8004afc:	0023      	movs	r3, r4
 8004afe:	3343      	adds	r3, #67	@ 0x43
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	1e5a      	subs	r2, r3, #1
 8004b04:	4193      	sbcs	r3, r2
 8004b06:	6822      	ldr	r2, [r4, #0]
 8004b08:	0692      	lsls	r2, r2, #26
 8004b0a:	d430      	bmi.n	8004b6e <_printf_common+0xae>
 8004b0c:	0022      	movs	r2, r4
 8004b0e:	9901      	ldr	r1, [sp, #4]
 8004b10:	9800      	ldr	r0, [sp, #0]
 8004b12:	9d08      	ldr	r5, [sp, #32]
 8004b14:	3243      	adds	r2, #67	@ 0x43
 8004b16:	47a8      	blx	r5
 8004b18:	3001      	adds	r0, #1
 8004b1a:	d025      	beq.n	8004b68 <_printf_common+0xa8>
 8004b1c:	2206      	movs	r2, #6
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	2500      	movs	r5, #0
 8004b22:	4013      	ands	r3, r2
 8004b24:	2b04      	cmp	r3, #4
 8004b26:	d105      	bne.n	8004b34 <_printf_common+0x74>
 8004b28:	6833      	ldr	r3, [r6, #0]
 8004b2a:	68e5      	ldr	r5, [r4, #12]
 8004b2c:	1aed      	subs	r5, r5, r3
 8004b2e:	43eb      	mvns	r3, r5
 8004b30:	17db      	asrs	r3, r3, #31
 8004b32:	401d      	ands	r5, r3
 8004b34:	68a3      	ldr	r3, [r4, #8]
 8004b36:	6922      	ldr	r2, [r4, #16]
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	dd01      	ble.n	8004b40 <_printf_common+0x80>
 8004b3c:	1a9b      	subs	r3, r3, r2
 8004b3e:	18ed      	adds	r5, r5, r3
 8004b40:	2600      	movs	r6, #0
 8004b42:	42b5      	cmp	r5, r6
 8004b44:	d120      	bne.n	8004b88 <_printf_common+0xc8>
 8004b46:	2000      	movs	r0, #0
 8004b48:	e010      	b.n	8004b6c <_printf_common+0xac>
 8004b4a:	3501      	adds	r5, #1
 8004b4c:	68e3      	ldr	r3, [r4, #12]
 8004b4e:	6832      	ldr	r2, [r6, #0]
 8004b50:	1a9b      	subs	r3, r3, r2
 8004b52:	42ab      	cmp	r3, r5
 8004b54:	ddd2      	ble.n	8004afc <_printf_common+0x3c>
 8004b56:	0022      	movs	r2, r4
 8004b58:	2301      	movs	r3, #1
 8004b5a:	9901      	ldr	r1, [sp, #4]
 8004b5c:	9800      	ldr	r0, [sp, #0]
 8004b5e:	9f08      	ldr	r7, [sp, #32]
 8004b60:	3219      	adds	r2, #25
 8004b62:	47b8      	blx	r7
 8004b64:	3001      	adds	r0, #1
 8004b66:	d1f0      	bne.n	8004b4a <_printf_common+0x8a>
 8004b68:	2001      	movs	r0, #1
 8004b6a:	4240      	negs	r0, r0
 8004b6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b6e:	2030      	movs	r0, #48	@ 0x30
 8004b70:	18e1      	adds	r1, r4, r3
 8004b72:	3143      	adds	r1, #67	@ 0x43
 8004b74:	7008      	strb	r0, [r1, #0]
 8004b76:	0021      	movs	r1, r4
 8004b78:	1c5a      	adds	r2, r3, #1
 8004b7a:	3145      	adds	r1, #69	@ 0x45
 8004b7c:	7809      	ldrb	r1, [r1, #0]
 8004b7e:	18a2      	adds	r2, r4, r2
 8004b80:	3243      	adds	r2, #67	@ 0x43
 8004b82:	3302      	adds	r3, #2
 8004b84:	7011      	strb	r1, [r2, #0]
 8004b86:	e7c1      	b.n	8004b0c <_printf_common+0x4c>
 8004b88:	0022      	movs	r2, r4
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	9901      	ldr	r1, [sp, #4]
 8004b8e:	9800      	ldr	r0, [sp, #0]
 8004b90:	9f08      	ldr	r7, [sp, #32]
 8004b92:	321a      	adds	r2, #26
 8004b94:	47b8      	blx	r7
 8004b96:	3001      	adds	r0, #1
 8004b98:	d0e6      	beq.n	8004b68 <_printf_common+0xa8>
 8004b9a:	3601      	adds	r6, #1
 8004b9c:	e7d1      	b.n	8004b42 <_printf_common+0x82>
	...

08004ba0 <_printf_i>:
 8004ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ba2:	b08b      	sub	sp, #44	@ 0x2c
 8004ba4:	9206      	str	r2, [sp, #24]
 8004ba6:	000a      	movs	r2, r1
 8004ba8:	3243      	adds	r2, #67	@ 0x43
 8004baa:	9307      	str	r3, [sp, #28]
 8004bac:	9005      	str	r0, [sp, #20]
 8004bae:	9203      	str	r2, [sp, #12]
 8004bb0:	7e0a      	ldrb	r2, [r1, #24]
 8004bb2:	000c      	movs	r4, r1
 8004bb4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004bb6:	2a78      	cmp	r2, #120	@ 0x78
 8004bb8:	d809      	bhi.n	8004bce <_printf_i+0x2e>
 8004bba:	2a62      	cmp	r2, #98	@ 0x62
 8004bbc:	d80b      	bhi.n	8004bd6 <_printf_i+0x36>
 8004bbe:	2a00      	cmp	r2, #0
 8004bc0:	d100      	bne.n	8004bc4 <_printf_i+0x24>
 8004bc2:	e0ba      	b.n	8004d3a <_printf_i+0x19a>
 8004bc4:	497a      	ldr	r1, [pc, #488]	@ (8004db0 <_printf_i+0x210>)
 8004bc6:	9104      	str	r1, [sp, #16]
 8004bc8:	2a58      	cmp	r2, #88	@ 0x58
 8004bca:	d100      	bne.n	8004bce <_printf_i+0x2e>
 8004bcc:	e08e      	b.n	8004cec <_printf_i+0x14c>
 8004bce:	0025      	movs	r5, r4
 8004bd0:	3542      	adds	r5, #66	@ 0x42
 8004bd2:	702a      	strb	r2, [r5, #0]
 8004bd4:	e022      	b.n	8004c1c <_printf_i+0x7c>
 8004bd6:	0010      	movs	r0, r2
 8004bd8:	3863      	subs	r0, #99	@ 0x63
 8004bda:	2815      	cmp	r0, #21
 8004bdc:	d8f7      	bhi.n	8004bce <_printf_i+0x2e>
 8004bde:	f7fb fa8f 	bl	8000100 <__gnu_thumb1_case_shi>
 8004be2:	0016      	.short	0x0016
 8004be4:	fff6001f 	.word	0xfff6001f
 8004be8:	fff6fff6 	.word	0xfff6fff6
 8004bec:	001ffff6 	.word	0x001ffff6
 8004bf0:	fff6fff6 	.word	0xfff6fff6
 8004bf4:	fff6fff6 	.word	0xfff6fff6
 8004bf8:	0036009f 	.word	0x0036009f
 8004bfc:	fff6007e 	.word	0xfff6007e
 8004c00:	00b0fff6 	.word	0x00b0fff6
 8004c04:	0036fff6 	.word	0x0036fff6
 8004c08:	fff6fff6 	.word	0xfff6fff6
 8004c0c:	0082      	.short	0x0082
 8004c0e:	0025      	movs	r5, r4
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	3542      	adds	r5, #66	@ 0x42
 8004c14:	1d11      	adds	r1, r2, #4
 8004c16:	6019      	str	r1, [r3, #0]
 8004c18:	6813      	ldr	r3, [r2, #0]
 8004c1a:	702b      	strb	r3, [r5, #0]
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e09e      	b.n	8004d5e <_printf_i+0x1be>
 8004c20:	6818      	ldr	r0, [r3, #0]
 8004c22:	6809      	ldr	r1, [r1, #0]
 8004c24:	1d02      	adds	r2, r0, #4
 8004c26:	060d      	lsls	r5, r1, #24
 8004c28:	d50b      	bpl.n	8004c42 <_printf_i+0xa2>
 8004c2a:	6806      	ldr	r6, [r0, #0]
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	2e00      	cmp	r6, #0
 8004c30:	da03      	bge.n	8004c3a <_printf_i+0x9a>
 8004c32:	232d      	movs	r3, #45	@ 0x2d
 8004c34:	9a03      	ldr	r2, [sp, #12]
 8004c36:	4276      	negs	r6, r6
 8004c38:	7013      	strb	r3, [r2, #0]
 8004c3a:	4b5d      	ldr	r3, [pc, #372]	@ (8004db0 <_printf_i+0x210>)
 8004c3c:	270a      	movs	r7, #10
 8004c3e:	9304      	str	r3, [sp, #16]
 8004c40:	e018      	b.n	8004c74 <_printf_i+0xd4>
 8004c42:	6806      	ldr	r6, [r0, #0]
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	0649      	lsls	r1, r1, #25
 8004c48:	d5f1      	bpl.n	8004c2e <_printf_i+0x8e>
 8004c4a:	b236      	sxth	r6, r6
 8004c4c:	e7ef      	b.n	8004c2e <_printf_i+0x8e>
 8004c4e:	6808      	ldr	r0, [r1, #0]
 8004c50:	6819      	ldr	r1, [r3, #0]
 8004c52:	c940      	ldmia	r1!, {r6}
 8004c54:	0605      	lsls	r5, r0, #24
 8004c56:	d402      	bmi.n	8004c5e <_printf_i+0xbe>
 8004c58:	0640      	lsls	r0, r0, #25
 8004c5a:	d500      	bpl.n	8004c5e <_printf_i+0xbe>
 8004c5c:	b2b6      	uxth	r6, r6
 8004c5e:	6019      	str	r1, [r3, #0]
 8004c60:	4b53      	ldr	r3, [pc, #332]	@ (8004db0 <_printf_i+0x210>)
 8004c62:	270a      	movs	r7, #10
 8004c64:	9304      	str	r3, [sp, #16]
 8004c66:	2a6f      	cmp	r2, #111	@ 0x6f
 8004c68:	d100      	bne.n	8004c6c <_printf_i+0xcc>
 8004c6a:	3f02      	subs	r7, #2
 8004c6c:	0023      	movs	r3, r4
 8004c6e:	2200      	movs	r2, #0
 8004c70:	3343      	adds	r3, #67	@ 0x43
 8004c72:	701a      	strb	r2, [r3, #0]
 8004c74:	6863      	ldr	r3, [r4, #4]
 8004c76:	60a3      	str	r3, [r4, #8]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	db06      	blt.n	8004c8a <_printf_i+0xea>
 8004c7c:	2104      	movs	r1, #4
 8004c7e:	6822      	ldr	r2, [r4, #0]
 8004c80:	9d03      	ldr	r5, [sp, #12]
 8004c82:	438a      	bics	r2, r1
 8004c84:	6022      	str	r2, [r4, #0]
 8004c86:	4333      	orrs	r3, r6
 8004c88:	d00c      	beq.n	8004ca4 <_printf_i+0x104>
 8004c8a:	9d03      	ldr	r5, [sp, #12]
 8004c8c:	0030      	movs	r0, r6
 8004c8e:	0039      	movs	r1, r7
 8004c90:	f7fb fac6 	bl	8000220 <__aeabi_uidivmod>
 8004c94:	9b04      	ldr	r3, [sp, #16]
 8004c96:	3d01      	subs	r5, #1
 8004c98:	5c5b      	ldrb	r3, [r3, r1]
 8004c9a:	702b      	strb	r3, [r5, #0]
 8004c9c:	0033      	movs	r3, r6
 8004c9e:	0006      	movs	r6, r0
 8004ca0:	429f      	cmp	r7, r3
 8004ca2:	d9f3      	bls.n	8004c8c <_printf_i+0xec>
 8004ca4:	2f08      	cmp	r7, #8
 8004ca6:	d109      	bne.n	8004cbc <_printf_i+0x11c>
 8004ca8:	6823      	ldr	r3, [r4, #0]
 8004caa:	07db      	lsls	r3, r3, #31
 8004cac:	d506      	bpl.n	8004cbc <_printf_i+0x11c>
 8004cae:	6862      	ldr	r2, [r4, #4]
 8004cb0:	6923      	ldr	r3, [r4, #16]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	dc02      	bgt.n	8004cbc <_printf_i+0x11c>
 8004cb6:	2330      	movs	r3, #48	@ 0x30
 8004cb8:	3d01      	subs	r5, #1
 8004cba:	702b      	strb	r3, [r5, #0]
 8004cbc:	9b03      	ldr	r3, [sp, #12]
 8004cbe:	1b5b      	subs	r3, r3, r5
 8004cc0:	6123      	str	r3, [r4, #16]
 8004cc2:	9b07      	ldr	r3, [sp, #28]
 8004cc4:	0021      	movs	r1, r4
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	9805      	ldr	r0, [sp, #20]
 8004cca:	9b06      	ldr	r3, [sp, #24]
 8004ccc:	aa09      	add	r2, sp, #36	@ 0x24
 8004cce:	f7ff fef7 	bl	8004ac0 <_printf_common>
 8004cd2:	3001      	adds	r0, #1
 8004cd4:	d148      	bne.n	8004d68 <_printf_i+0x1c8>
 8004cd6:	2001      	movs	r0, #1
 8004cd8:	4240      	negs	r0, r0
 8004cda:	b00b      	add	sp, #44	@ 0x2c
 8004cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cde:	2220      	movs	r2, #32
 8004ce0:	6809      	ldr	r1, [r1, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	6022      	str	r2, [r4, #0]
 8004ce6:	2278      	movs	r2, #120	@ 0x78
 8004ce8:	4932      	ldr	r1, [pc, #200]	@ (8004db4 <_printf_i+0x214>)
 8004cea:	9104      	str	r1, [sp, #16]
 8004cec:	0021      	movs	r1, r4
 8004cee:	3145      	adds	r1, #69	@ 0x45
 8004cf0:	700a      	strb	r2, [r1, #0]
 8004cf2:	6819      	ldr	r1, [r3, #0]
 8004cf4:	6822      	ldr	r2, [r4, #0]
 8004cf6:	c940      	ldmia	r1!, {r6}
 8004cf8:	0610      	lsls	r0, r2, #24
 8004cfa:	d402      	bmi.n	8004d02 <_printf_i+0x162>
 8004cfc:	0650      	lsls	r0, r2, #25
 8004cfe:	d500      	bpl.n	8004d02 <_printf_i+0x162>
 8004d00:	b2b6      	uxth	r6, r6
 8004d02:	6019      	str	r1, [r3, #0]
 8004d04:	07d3      	lsls	r3, r2, #31
 8004d06:	d502      	bpl.n	8004d0e <_printf_i+0x16e>
 8004d08:	2320      	movs	r3, #32
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	6023      	str	r3, [r4, #0]
 8004d0e:	2e00      	cmp	r6, #0
 8004d10:	d001      	beq.n	8004d16 <_printf_i+0x176>
 8004d12:	2710      	movs	r7, #16
 8004d14:	e7aa      	b.n	8004c6c <_printf_i+0xcc>
 8004d16:	2220      	movs	r2, #32
 8004d18:	6823      	ldr	r3, [r4, #0]
 8004d1a:	4393      	bics	r3, r2
 8004d1c:	6023      	str	r3, [r4, #0]
 8004d1e:	e7f8      	b.n	8004d12 <_printf_i+0x172>
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	680d      	ldr	r5, [r1, #0]
 8004d24:	1d10      	adds	r0, r2, #4
 8004d26:	6949      	ldr	r1, [r1, #20]
 8004d28:	6018      	str	r0, [r3, #0]
 8004d2a:	6813      	ldr	r3, [r2, #0]
 8004d2c:	062e      	lsls	r6, r5, #24
 8004d2e:	d501      	bpl.n	8004d34 <_printf_i+0x194>
 8004d30:	6019      	str	r1, [r3, #0]
 8004d32:	e002      	b.n	8004d3a <_printf_i+0x19a>
 8004d34:	066d      	lsls	r5, r5, #25
 8004d36:	d5fb      	bpl.n	8004d30 <_printf_i+0x190>
 8004d38:	8019      	strh	r1, [r3, #0]
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	9d03      	ldr	r5, [sp, #12]
 8004d3e:	6123      	str	r3, [r4, #16]
 8004d40:	e7bf      	b.n	8004cc2 <_printf_i+0x122>
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	1d11      	adds	r1, r2, #4
 8004d46:	6019      	str	r1, [r3, #0]
 8004d48:	6815      	ldr	r5, [r2, #0]
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	0028      	movs	r0, r5
 8004d4e:	6862      	ldr	r2, [r4, #4]
 8004d50:	f000 f856 	bl	8004e00 <memchr>
 8004d54:	2800      	cmp	r0, #0
 8004d56:	d001      	beq.n	8004d5c <_printf_i+0x1bc>
 8004d58:	1b40      	subs	r0, r0, r5
 8004d5a:	6060      	str	r0, [r4, #4]
 8004d5c:	6863      	ldr	r3, [r4, #4]
 8004d5e:	6123      	str	r3, [r4, #16]
 8004d60:	2300      	movs	r3, #0
 8004d62:	9a03      	ldr	r2, [sp, #12]
 8004d64:	7013      	strb	r3, [r2, #0]
 8004d66:	e7ac      	b.n	8004cc2 <_printf_i+0x122>
 8004d68:	002a      	movs	r2, r5
 8004d6a:	6923      	ldr	r3, [r4, #16]
 8004d6c:	9906      	ldr	r1, [sp, #24]
 8004d6e:	9805      	ldr	r0, [sp, #20]
 8004d70:	9d07      	ldr	r5, [sp, #28]
 8004d72:	47a8      	blx	r5
 8004d74:	3001      	adds	r0, #1
 8004d76:	d0ae      	beq.n	8004cd6 <_printf_i+0x136>
 8004d78:	6823      	ldr	r3, [r4, #0]
 8004d7a:	079b      	lsls	r3, r3, #30
 8004d7c:	d415      	bmi.n	8004daa <_printf_i+0x20a>
 8004d7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d80:	68e0      	ldr	r0, [r4, #12]
 8004d82:	4298      	cmp	r0, r3
 8004d84:	daa9      	bge.n	8004cda <_printf_i+0x13a>
 8004d86:	0018      	movs	r0, r3
 8004d88:	e7a7      	b.n	8004cda <_printf_i+0x13a>
 8004d8a:	0022      	movs	r2, r4
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	9906      	ldr	r1, [sp, #24]
 8004d90:	9805      	ldr	r0, [sp, #20]
 8004d92:	9e07      	ldr	r6, [sp, #28]
 8004d94:	3219      	adds	r2, #25
 8004d96:	47b0      	blx	r6
 8004d98:	3001      	adds	r0, #1
 8004d9a:	d09c      	beq.n	8004cd6 <_printf_i+0x136>
 8004d9c:	3501      	adds	r5, #1
 8004d9e:	68e3      	ldr	r3, [r4, #12]
 8004da0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004da2:	1a9b      	subs	r3, r3, r2
 8004da4:	42ab      	cmp	r3, r5
 8004da6:	dcf0      	bgt.n	8004d8a <_printf_i+0x1ea>
 8004da8:	e7e9      	b.n	8004d7e <_printf_i+0x1de>
 8004daa:	2500      	movs	r5, #0
 8004dac:	e7f7      	b.n	8004d9e <_printf_i+0x1fe>
 8004dae:	46c0      	nop			@ (mov r8, r8)
 8004db0:	08004fad 	.word	0x08004fad
 8004db4:	08004fbe 	.word	0x08004fbe

08004db8 <memmove>:
 8004db8:	b510      	push	{r4, lr}
 8004dba:	4288      	cmp	r0, r1
 8004dbc:	d902      	bls.n	8004dc4 <memmove+0xc>
 8004dbe:	188b      	adds	r3, r1, r2
 8004dc0:	4298      	cmp	r0, r3
 8004dc2:	d308      	bcc.n	8004dd6 <memmove+0x1e>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d007      	beq.n	8004dda <memmove+0x22>
 8004dca:	5ccc      	ldrb	r4, [r1, r3]
 8004dcc:	54c4      	strb	r4, [r0, r3]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	e7f9      	b.n	8004dc6 <memmove+0xe>
 8004dd2:	5c8b      	ldrb	r3, [r1, r2]
 8004dd4:	5483      	strb	r3, [r0, r2]
 8004dd6:	3a01      	subs	r2, #1
 8004dd8:	d2fb      	bcs.n	8004dd2 <memmove+0x1a>
 8004dda:	bd10      	pop	{r4, pc}

08004ddc <_sbrk_r>:
 8004ddc:	2300      	movs	r3, #0
 8004dde:	b570      	push	{r4, r5, r6, lr}
 8004de0:	4d06      	ldr	r5, [pc, #24]	@ (8004dfc <_sbrk_r+0x20>)
 8004de2:	0004      	movs	r4, r0
 8004de4:	0008      	movs	r0, r1
 8004de6:	602b      	str	r3, [r5, #0]
 8004de8:	f7fb ff7c 	bl	8000ce4 <_sbrk>
 8004dec:	1c43      	adds	r3, r0, #1
 8004dee:	d103      	bne.n	8004df8 <_sbrk_r+0x1c>
 8004df0:	682b      	ldr	r3, [r5, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d000      	beq.n	8004df8 <_sbrk_r+0x1c>
 8004df6:	6023      	str	r3, [r4, #0]
 8004df8:	bd70      	pop	{r4, r5, r6, pc}
 8004dfa:	46c0      	nop			@ (mov r8, r8)
 8004dfc:	20000348 	.word	0x20000348

08004e00 <memchr>:
 8004e00:	b2c9      	uxtb	r1, r1
 8004e02:	1882      	adds	r2, r0, r2
 8004e04:	4290      	cmp	r0, r2
 8004e06:	d101      	bne.n	8004e0c <memchr+0xc>
 8004e08:	2000      	movs	r0, #0
 8004e0a:	4770      	bx	lr
 8004e0c:	7803      	ldrb	r3, [r0, #0]
 8004e0e:	428b      	cmp	r3, r1
 8004e10:	d0fb      	beq.n	8004e0a <memchr+0xa>
 8004e12:	3001      	adds	r0, #1
 8004e14:	e7f6      	b.n	8004e04 <memchr+0x4>

08004e16 <memcpy>:
 8004e16:	2300      	movs	r3, #0
 8004e18:	b510      	push	{r4, lr}
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d100      	bne.n	8004e20 <memcpy+0xa>
 8004e1e:	bd10      	pop	{r4, pc}
 8004e20:	5ccc      	ldrb	r4, [r1, r3]
 8004e22:	54c4      	strb	r4, [r0, r3]
 8004e24:	3301      	adds	r3, #1
 8004e26:	e7f8      	b.n	8004e1a <memcpy+0x4>

08004e28 <_realloc_r>:
 8004e28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e2a:	0006      	movs	r6, r0
 8004e2c:	000c      	movs	r4, r1
 8004e2e:	0015      	movs	r5, r2
 8004e30:	2900      	cmp	r1, #0
 8004e32:	d105      	bne.n	8004e40 <_realloc_r+0x18>
 8004e34:	0011      	movs	r1, r2
 8004e36:	f7ff fc55 	bl	80046e4 <_malloc_r>
 8004e3a:	0004      	movs	r4, r0
 8004e3c:	0020      	movs	r0, r4
 8004e3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004e40:	2a00      	cmp	r2, #0
 8004e42:	d103      	bne.n	8004e4c <_realloc_r+0x24>
 8004e44:	f7ff fbe2 	bl	800460c <_free_r>
 8004e48:	002c      	movs	r4, r5
 8004e4a:	e7f7      	b.n	8004e3c <_realloc_r+0x14>
 8004e4c:	f000 f81c 	bl	8004e88 <_malloc_usable_size_r>
 8004e50:	0007      	movs	r7, r0
 8004e52:	4285      	cmp	r5, r0
 8004e54:	d802      	bhi.n	8004e5c <_realloc_r+0x34>
 8004e56:	0843      	lsrs	r3, r0, #1
 8004e58:	42ab      	cmp	r3, r5
 8004e5a:	d3ef      	bcc.n	8004e3c <_realloc_r+0x14>
 8004e5c:	0029      	movs	r1, r5
 8004e5e:	0030      	movs	r0, r6
 8004e60:	f7ff fc40 	bl	80046e4 <_malloc_r>
 8004e64:	9001      	str	r0, [sp, #4]
 8004e66:	2800      	cmp	r0, #0
 8004e68:	d101      	bne.n	8004e6e <_realloc_r+0x46>
 8004e6a:	9c01      	ldr	r4, [sp, #4]
 8004e6c:	e7e6      	b.n	8004e3c <_realloc_r+0x14>
 8004e6e:	002a      	movs	r2, r5
 8004e70:	42bd      	cmp	r5, r7
 8004e72:	d900      	bls.n	8004e76 <_realloc_r+0x4e>
 8004e74:	003a      	movs	r2, r7
 8004e76:	0021      	movs	r1, r4
 8004e78:	9801      	ldr	r0, [sp, #4]
 8004e7a:	f7ff ffcc 	bl	8004e16 <memcpy>
 8004e7e:	0021      	movs	r1, r4
 8004e80:	0030      	movs	r0, r6
 8004e82:	f7ff fbc3 	bl	800460c <_free_r>
 8004e86:	e7f0      	b.n	8004e6a <_realloc_r+0x42>

08004e88 <_malloc_usable_size_r>:
 8004e88:	1f0b      	subs	r3, r1, #4
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	1f18      	subs	r0, r3, #4
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	da01      	bge.n	8004e96 <_malloc_usable_size_r+0xe>
 8004e92:	580b      	ldr	r3, [r1, r0]
 8004e94:	18c0      	adds	r0, r0, r3
 8004e96:	4770      	bx	lr

08004e98 <_init>:
 8004e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9a:	46c0      	nop			@ (mov r8, r8)
 8004e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e9e:	bc08      	pop	{r3}
 8004ea0:	469e      	mov	lr, r3
 8004ea2:	4770      	bx	lr

08004ea4 <_fini>:
 8004ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea6:	46c0      	nop			@ (mov r8, r8)
 8004ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eaa:	bc08      	pop	{r3}
 8004eac:	469e      	mov	lr, r3
 8004eae:	4770      	bx	lr
